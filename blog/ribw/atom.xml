<feed xmlns="http://www.w3.org/2005/Atom"><title>pagong</title><id>pagong</id><updated>2020-08-23T22:00:00+00:00</updated><entry><title>Information Retrieval and Web Search</title><id>dist/index/index.html</id><updated>2020-08-23T22:00:00+00:00</updated><published>2020-08-23T22:00:00+00:00</published><summary>During 2020 at university, this subject ("Recuperación de la Información y Búsqueda en la Web")</summary><content type="html" src="dist/index/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Information Retrieval and Web Search&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;h1 class=&quot;title&quot; id=&quot;information_retrieval_and_web_search&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#information_retrieval_and_web_search&quot;&gt;¶&lt;/a&gt;Information Retrieval and Web Search&lt;/h1&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;2020-08-24&lt;/div&gt;
&lt;p&gt;During 2020 at university, this subject (&amp;quot;Recuperación de la Información y Búsqueda en la Web&amp;quot;)
had us write blog posts as assignments. I think it would be really fun and I wanted to preserve
that work here, with the hopes it's interesting to someone.&lt;/p&gt;
&lt;p&gt;The posts were auto-generated from the original HTML files and manually anonymized later.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Privado: Final NoSQL evaluation</title><id>dist/final-nosql-evaluation/index.html</id><updated>2020-05-13T22:00:00+00:00</updated><published>2020-05-12T22:00:00+00:00</published><summary>This evaluation is a bit different to my </summary><content type="html" src="dist/final-nosql-evaluation/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Privado: Final NoSQL evaluation&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This evaluation is a bit different to my &lt;a href=&quot;/blog/ribw/16/nosql-evaluation/&quot;&gt;previous one&lt;/a&gt; because this time I have been tasked to evaluate the student &lt;code&gt;a(i - 2)&lt;/code&gt;, and because I am &lt;code&gt;a = 9&lt;/code&gt; that happens to be &lt;code&gt;a(7) =&lt;/code&gt; Classmate.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-05-13&lt;br&gt;
Modified 2020-05-14&lt;/div&gt;
&lt;p&gt;Unfortunately for Classmate, the only entry related to NoSQL I have found in their blog is Prima y segunda Actividad: Base de datos NoSQL which does not develop an application as requested for the third entry (as of 14th of May).&lt;/p&gt;
&lt;p&gt;This means that, instead, I will evaluate &lt;code&gt;a(i - 3)&lt;/code&gt; which happens to be &lt;code&gt;a(6) =&lt;/code&gt; Classmate and they do have an entry.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;classmate_s_evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation&quot;&gt;¶&lt;/a&gt;Classmate’s Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: B.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post I have evaluated is BB.DD. NoSQL RethinkDB 3ª Fase. Aplicación.&lt;/p&gt;
&lt;p&gt;It starts with an introduction, properly explaining what database they have chosen and why, but not what application they will be making.&lt;/p&gt;
&lt;p&gt;This is detailed just below in the next section, although it’s a bit vague.&lt;/p&gt;
&lt;p&gt;The next section talks about the Python dependencies that are required, but they never said they would be making a Python application or that we need to install Python!&lt;/p&gt;
&lt;p&gt;The next section talks about the file structure of the project, and they detail what everything part does, although I have missed some code snippets.&lt;/p&gt;
&lt;p&gt;The final result is pretty cool and contains many interesting graphs, they provide a download to the source code and list all the relevant references used.&lt;/p&gt;
&lt;p&gt;Except for a weird «necesario falta» in the text, it’s otherwise well-written, although given the issues above I cannot grade it with the highest score.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Developing a Python application for MongoDB</title><id>dist/developing-a-python-application-for-mongodb/index.html</id><updated>2020-04-15T22:00:00+00:00</updated><published>2020-03-24T23:00:00+00:00</published><summary>This is the third and last post in the MongoDB series, where we will develop a Python application to process and store OpenData inside Mongo.</summary><content type="html" src="dist/developing-a-python-application-for-mongodb/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Developing a Python application for MongoDB&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This is the third and last post in the MongoDB series, where we will develop a Python application to process and store OpenData inside Mongo.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-25&lt;br&gt;
Modified 2020-04-16&lt;/div&gt;
&lt;p&gt;Other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/mongodb-an-introduction/&quot;&gt;MongoDB: an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/mongodb-basic-operations-and-architecture/&quot;&gt;MongoDB: Basic Operations and Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/developing-a-python-application-for-mongodb/&quot;&gt;Developing a Python application for MongoDB&lt;/a&gt; (this post)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is co-authored wih a Classmate.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 class=&quot;title&quot; id=&quot;what_are_we_making_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_are_we_making_&quot;&gt;¶&lt;/a&gt;What are we making?&lt;/h2&gt;
&lt;p&gt;We are going to develop a web application that renders a map, in this case, the town of Cáceres, with which users can interact. When the user clicks somewhere on the map, the selected location will be sent to the server to process. This server will perform geospatial queries to Mongo and once the results are ready, the information is presented back at the webpage.&lt;/p&gt;
&lt;p&gt;The data used for the application comes from &lt;a href=&quot;https://opendata.caceres.es/&quot;&gt;Cáceres’ OpenData&lt;/a&gt;, and our goal is that users will be able to find information about certain areas in a quick and intuitive way, such as precise coordinates, noise level, and such.&lt;/p&gt;
&lt;h2 id=&quot;what_are_we_using_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_are_we_using_&quot;&gt;¶&lt;/a&gt;What are we using?&lt;/h2&gt;
&lt;p&gt;The web application will be using &lt;a href=&quot;https://python.org/&quot;&gt;Python&lt;/a&gt; for the backend, &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt; for the frontend, and &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;Mongo&lt;/a&gt; as our storage database and processing center.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why Python?&lt;/strong&gt; It’s a comfortable language to write and to read, and has a great ecosystem with &lt;a href=&quot;https://pypi.org/&quot;&gt;plenty of libraries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Svelte?&lt;/strong&gt; Svelte is the New Thing&lt;strong&gt;™&lt;/strong&gt; in the world of component frameworks for JavaScript. It is similar to React or Vue, but compiled and with a lot less boilerplate. Check out their &lt;a href=&quot;https://svelte.dev/blog/svelte-3-rethinking-reactivity&quot;&gt;Svelte post&lt;/a&gt; to learn more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Mongo?&lt;/strong&gt; We believe NoSQL is the right approach for doing the kind of processing and storage that we expect, and it’s &lt;a href=&quot;https://docs.mongodb.com/&quot;&gt;very easy to use&lt;/a&gt;. In addition, we will be making Geospatial Queries which &lt;a href=&quot;https://docs.mongodb.com/manual/geospatial-queries/&quot;&gt;Mongo supports&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why didn’t we choose to make a smaller project, you may ask? You will be shocked to hear that we do not have an answer for that!&lt;/p&gt;
&lt;p&gt;Note that we will not be embedding &lt;strong&gt;all&lt;/strong&gt; the code of the project in this post, or it would be too long! We will include only the relevant snippets needed to understand the core ideas of the project, and not the unnecessary parts of it (for example, parsing configuration files to easily change the port where the server runs is not included).&lt;/p&gt;
&lt;h2 id=&quot;python_dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#python_dependencies&quot;&gt;¶&lt;/a&gt;Python dependencies&lt;/h2&gt;
&lt;p&gt;Because we will program it in Python, you need Python installed. You can install it using a package manager of your choice or heading over to the &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python downloads section&lt;/a&gt;, but if you’re on Linux, chances are you have it installed already.&lt;/p&gt;
&lt;p&gt;Once Python 3.7 or above is installed, install &lt;a href=&quot;https://motor.readthedocs.io/en/stable/&quot;&gt;&lt;code&gt;motor&lt;/code&gt; (Asynchronous Python driver for MongoDB)&lt;/a&gt; and the &lt;a href=&quot;https://docs.aiohttp.org/en/stable/web.html&quot;&gt;&lt;code&gt;aiohttp&lt;/code&gt; server&lt;/a&gt; through &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install aiohttp motor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure that Mongo is running in the background (this has been described in previous posts), and we should be able to get to work.&lt;/p&gt;
&lt;h2 id=&quot;web_dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#web_dependencies&quot;&gt;¶&lt;/a&gt;Web dependencies&lt;/h2&gt;
&lt;p&gt;To work with Svelte and its dependencies, we will need &lt;code&gt;[npm](https://www.npmjs.com/)&lt;/code&gt; which comes with &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt;, so go and &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;install Node from their site&lt;/a&gt;. The download will be different depending on your operating system.&lt;/p&gt;
&lt;p&gt;Following &lt;a href=&quot;https://svelte.dev/blog/the-easiest-way-to-get-started&quot;&gt;the easiest way to get started with Svelte&lt;/a&gt;, we will put our project in a &lt;code&gt;client/&lt;/code&gt; folder (because this is what the clients see, the frontend). Feel free to tinker a bit with the configuration files to change the name and such, although this isn’t relevant for the rest of the post.&lt;/p&gt;
&lt;h2 id=&quot;finding_the_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#finding_the_data&quot;&gt;¶&lt;/a&gt;Finding the data&lt;/h2&gt;
&lt;p&gt;We are going to work with the JSON files provided by &lt;a href=&quot;http://opendata.caceres.es/&quot;&gt;OpenData Cáceres&lt;/a&gt;. In particular, we want information about the noise, census, vias and trees. To save you the time from &lt;a href=&quot;http://opendata.caceres.es/dataset&quot;&gt;searching each of these&lt;/a&gt;, we will automate the download with code.&lt;/p&gt;
&lt;p&gt;If you want to save the data offline or just know what data we’ll be using for other purposes though, you can right click on the following links and select «Save Link As…» with the name of the link:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[noise.json](http://opendata.caceres.es/GetData/GetData?dataset=om:MedicionRuido&amp;amp;format=json)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[census.json](http://opendata.caceres.es/GetData/GetData?dataset=om:InformacionPadron&amp;amp;year=2017&amp;amp;format=json)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[vias.json](http://opendata.caceres.es/GetData/GetData?dataset=om:InformacionPadron&amp;amp;year=2017&amp;amp;format=json)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[trees.json](http://opendata.caceres.es/GetData/GetData?dataset=om:Arbol&amp;amp;format=json)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;backend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#backend&quot;&gt;¶&lt;/a&gt;Backend&lt;/h2&gt;
&lt;p&gt;It’s time to get started with some code! We will put it in a &lt;code&gt;server/&lt;/code&gt; folder because it will contain the Python server, that is, the backend of our application.&lt;/p&gt;
&lt;p&gt;We are using &lt;code&gt;aiohttp&lt;/code&gt; because we would like our server to be &lt;code&gt;async&lt;/code&gt;. We don’t expect a lot of users at the same time, but it’s good to know our server would be well-designed for that use-case. As a bonus, it makes IO points clear in the code, which can help reason about it. The implicit synchronization between &lt;code&gt;await&lt;/code&gt; is also a nice bonus.&lt;/p&gt;
&lt;h3 id=&quot;saving_the_data_in_mongo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#saving_the_data_in_mongo&quot;&gt;¶&lt;/a&gt;Saving the data in Mongo&lt;/h3&gt;
&lt;p&gt;Before running the server, we must ensure that the data we need is already stored and indexed in Mongo. Our &lt;code&gt;server/data.py&lt;/code&gt; will take care of downloading the files, cleaning them up a little (Cáceres’ OpenData can be a bit awkward sometimes), inserting them into Mongo and indexing them.&lt;/p&gt;
&lt;p&gt;Downloading the JSON data can be done with &lt;code&gt;[ClientSession.get](https://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession.get)&lt;/code&gt;. We also take this opportunity to clean up the messy encoding from the JSON, which does not seem to be UTF-8 in some cases.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async def load_json(session, url):
    fixes = [(old, new.encode('utf-8')) for old, new in [
        (b'\xc3\x83\\u2018', 'Ñ'),
        (b'\xc3\x83\\u0081', 'Á'),
        (b'\xc3\x83\\u2030', 'É'),
        (b'\xc3\x83\\u008D', 'Í'),
        (b'\xc3\x83\\u201C', 'Ó'),
        (b'\xc3\x83\xc5\xa1', 'Ú'),
        (b'\xc3\x83\xc2\xa1', 'á'),
    ]]

    async with session.get(url) as resp:
        data = await resp.read()

    # Yes, this feels inefficient, but it's not really worth improving.
    for old, new in fixes:
        data = data.replace(old, new)

    data = data.decode('utf-8')
    return json.loads(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Later on, it can be reused for the various different URLs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import aiohttp

NOISE_URL = 'http://opendata.caceres.es/GetData/GetData?dataset=om:MedicionRuido&amp;amp;format=json'
# (...other needed URLs here)

async def insert_to_db(db):
    async with aiohttp.ClientSession() as session:
        data = await load_json(session, NOISE_URL)
        # now we have the JSON data cleaned up, ready to be parsed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;data_model&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data_model&quot;&gt;¶&lt;/a&gt;Data model&lt;/h3&gt;
&lt;p&gt;With the JSON data in our hands, it’s time to parse it. Always remember to &lt;a href=&quot;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/&quot;&gt;parse, don’t validate&lt;/a&gt;. With &lt;a href=&quot;https://docs.python.org/3/library/dataclasses.html&quot;&gt;Python 3.7 &lt;code&gt;dataclasses&lt;/code&gt;&lt;/a&gt; it’s trivial to define classes that will store only the fields we care about, typed, and with proper names:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from dataclasses import dataclass

Longitude = float
Latitude = float

@dataclass
class GSON:
    type: str
    coordinates: (Longitude, Latitude)

@dataclass
class Noise:
    id: int
    geo: GSON
    level: float
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes it really easy to see that, if we have a &lt;code&gt;Noise&lt;/code&gt;, we can access its &lt;code&gt;geo&lt;/code&gt; data which is a &lt;code&gt;GSON&lt;/code&gt; with a &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;coordinates&lt;/code&gt;, having &lt;code&gt;Longitude&lt;/code&gt; and &lt;code&gt;Latitude&lt;/code&gt; respectively. &lt;code&gt;dataclasses&lt;/code&gt; and &lt;code&gt;[typing](https://docs.python.org/3/library/typing.html)&lt;/code&gt; make dealing with this very easy and clear.&lt;/p&gt;
&lt;p&gt;Every dataclass will be on its own collection inside Mongo, and these are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Noise&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer &lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GeoJSON &lt;code&gt;geo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Longitude-latitude pair &lt;code&gt;coordinates&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating-point number &lt;code&gt;level&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String &lt;code&gt;gender&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer &lt;code&gt;units&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating-point number &lt;code&gt;height&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating-point number &lt;code&gt;cup_diameter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating-point number &lt;code&gt;trunk_diameter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional string &lt;code&gt;variety&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional string &lt;code&gt;distribution&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GeoJSON &lt;code&gt;geo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional string &lt;code&gt;irrigation&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Census&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer &lt;code&gt;year&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Via &lt;code&gt;via&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String &lt;code&gt;kind&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer &lt;code&gt;code&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional string &lt;code&gt;history&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional string &lt;code&gt;old_name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional floating-point number &lt;code&gt;length&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional GeoJSON &lt;code&gt;start&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GeoJSON &lt;code&gt;middle&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional GeoJSON &lt;code&gt;end&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional list with geometry pairs &lt;code&gt;geometry&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer &lt;code&gt;count&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mapping year-to-count &lt;code&gt;count_per_year&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mapping gender-to-count &lt;code&gt;count_per_gender&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mapping nationality-to-count &lt;code&gt;count_per_nationality&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer &lt;code&gt;time_year&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let’s define a method to actually parse the JSON and yield instances from these new data classes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@classmethod
def iter_from_json(cls, data):
    for row in data['results']['bindings']:
        noise_id = int(row['uri']['value'].split('/')[-1])
        long = float(row['geo_long']['value'])
        lat = float(row['geo_lat']['value'])
        level = float(row['om_nivelRuido']['value'])

        yield cls(
            id=noise_id,
            geo=GSON(type='Point', coordinates=[long, lat]),
            level=level
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we iterate over the input JSON &lt;code&gt;data&lt;/code&gt; bindings and &lt;code&gt;yield cls&lt;/code&gt; instances with more consistent naming than the original one. We also extract the data from the many unnecessary nested levels of the JSON and have something a lot flatter to work with.&lt;/p&gt;
&lt;p&gt;For those of you who don’t know what &lt;code&gt;yield&lt;/code&gt; does (after all, not everyone is used to seeing generators), here’s two functions that work nearly the same:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def squares_return(n):
    result = []
    for i in range(n):
        result.append(n ** 2)
    return result

def squares_yield(n):
    for i in range(n):
        yield n ** 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference is that the one with &lt;code&gt;yield&lt;/code&gt; is «lazy» and doesn’t need to do all the work up-front. It will generate (yield) more values as they are needed when you use a &lt;code&gt;for&lt;/code&gt; loop. Generally, it’s a better idea to create generator functions than do all the work early which may be unnecessary. See &lt;a href=&quot;https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do&quot;&gt;What does the «yield» keyword do?&lt;/a&gt; if you still have questions.&lt;/p&gt;
&lt;p&gt;With everything parsed, it’s time to insert the data into Mongo. If the data was not present yet (0 documents), then we will download the file, parse it, insert it as documents into the given Mongo &lt;code&gt;db&lt;/code&gt;, and index it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from dataclasses import asdict

async def insert_to_db(db):
    async with aiohttp.ClientSession() as session:
        if await db.noise.estimated_document_count() == 0:
            data = await load_json(session, NOISE_URL)

            await db.noise.insert_many(asdict(noise) for noise in Noise.iter_from_json(data))
            await db.noise.create_index([('geo', '2dsphere')])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We repeat this process for all the other data, and just like that, Mongo is ready to be used in our server.&lt;/p&gt;
&lt;h3 id=&quot;indices&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#indices&quot;&gt;¶&lt;/a&gt;Indices&lt;/h3&gt;
&lt;p&gt;In order to execute our geospatial queries we have to create an index on the attribute that represents the location, because the operators that we will use requires it. This attribute can be a &lt;a href=&quot;https://docs.mongodb.com/manual/reference/geojson/&quot;&gt;GeoJSON object&lt;/a&gt; or a legacy coordinate pair.&lt;/p&gt;
&lt;p&gt;We have decided to use a GeoJSON object because we want to avoid legacy features that may be deprecated in the future.&lt;/p&gt;
&lt;p&gt;The attribute is called &lt;code&gt;geo&lt;/code&gt; for the &lt;code&gt;Tree&lt;/code&gt; and &lt;code&gt;Noise&lt;/code&gt; objects and &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; for the &lt;code&gt;Via&lt;/code&gt; class. In the &lt;code&gt;Via&lt;/code&gt; we are going to index the attribute &lt;code&gt;middle&lt;/code&gt; because it is the most representative field for us. Because the &lt;code&gt;Via&lt;/code&gt; is inside the &lt;code&gt;Census&lt;/code&gt; and it doesn’t have its own collection, we create the index on the &lt;code&gt;Census&lt;/code&gt; collection.&lt;/p&gt;
&lt;p&gt;The used index type is &lt;code&gt;2dsphere&lt;/code&gt; because it supports queries that work on geometries on an earth-like sphere. Another option is the &lt;code&gt;2d&lt;/code&gt; index but it’s not a good fit for our because it is for queries that calculate geometries on a two-dimensional plane.&lt;/p&gt;
&lt;h3 id=&quot;running_the_server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running_the_server&quot;&gt;¶&lt;/a&gt;Running the server&lt;/h3&gt;
&lt;p&gt;If we ignore the configuration part of the server creation, our &lt;code&gt;server.py&lt;/code&gt; file is pretty simple. Its job is to create a &lt;a href=&quot;https://aiohttp.readthedocs.io/en/stable/web.html&quot;&gt;server application&lt;/a&gt;, setup Mongo and return it to the caller so that they can run it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import asyncio
import subprocess
import motor.motor_asyncio

from aiohttp import web

from . import rest, data

def create_app():
    ret = subprocess.run('npm run build', cwd='../client', shell=True).returncode
    if ret != 0:
        exit(ret)

    db = motor.motor_asyncio.AsyncIOMotorClient().opendata
    loop = asyncio.get_event_loop()
    loop.run_until_complete(data.insert_to_db(db))

    app = web.Application()
    app['db'] = db

    app.router.add_routes([
        web.get('/', lambda r: web.HTTPSeeOther('/index.html')),
        *rest.ROUTES,
        web.static('/', os.path.join(config['www']['root'], 'public')),
    ])

    return app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a bit going on here, but it’s nothing too complex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We automatically run &lt;code&gt;npm run build&lt;/code&gt; on the frontend because it’s very comfortable to have the frontend built automatically before the server runs.&lt;/li&gt;
&lt;li&gt;We create a Motor client and access the &lt;code&gt;opendata&lt;/code&gt; database. Into it, we load the data, effectively saving it in Mongo for the server to use.&lt;/li&gt;
&lt;li&gt;We create the server application and save a reference to the Mongo database in it, so that it can be used later on any endpoint without needing to recreate it.&lt;/li&gt;
&lt;li&gt;We define the routes of our app: root, REST and static (where the frontend files live). We’ll get to the &lt;code&gt;rest&lt;/code&gt; part soon.
Running the server is now simple:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;def main():
    from aiohttp import web
    from . import server

    app = server.create_app()
    web.run_app(app)

if __name__ == '__main__':
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rest_endpoints&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rest_endpoints&quot;&gt;¶&lt;/a&gt;REST endpoints&lt;/h3&gt;
&lt;p&gt;The frontend will communicate with the backend via &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST&lt;/a&gt; calls, so that it can ask for things like «give me the information associated with this area», and the web server can query the Mongo server to reply with a HTTP response. This little diagram should help:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;bitmap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What we need to do, then, is define those REST endpoints we mentioned earlier when creating the server. We will process the HTTP request, ask Mongo for the data, and return the HTTP response:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import asyncio
import pymongo

from aiohttp import web

async def get_area_info(request):
    try:
        long = float(request.query['long'])
        lat = float(request.query['lat'])
        distance = float(request.query['distance'])
    except KeyError as e:
        raise web.HTTPBadRequest(reason=f'a required parameter was missing: {e.args[0]}')
    except ValueError:
        raise web.HTTPBadRequest(reason='one of the parameters was not a valid float')

    geo_avg_noise_pipeline = [{
        '$geoNear': {
            'near' : {'type': 'Point', 'coordinates': [long, lat]},
            'maxDistance': distance,
            'minDistance': 0,
            'spherical' : 'true',
            'distanceField' : 'distance'
        }
    }]

    db = request.app['db']

    try:
        noise_count, sum_noise, avg_noise = 0, 0, 0
        async for item in db.noise.aggregate(geo_avg_noise_pipeline):
            noise_count += 1
            sum_noise += item['level']

        if noise_count != 0:
            avg_noise = sum_noise / noise_count
        else:
            avg_noise = None

    except pymongo.errors.ConnectionFailure:
        raise web.HTTPServiceUnavailable(reason='no connection to database')

    return web.json_response({
        'tree_count': tree_count,
        'trees_per_type': [[k, v] for k, v in trees_per_type.items()],
        'census_count': census_count,
        'avg_noise': avg_noise,
    })

ROUTES = [
    web.get('/rest/get-area-info', get_area_info)
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code, we’re only showing how to return the average noise because that’s the simplest we can do. The real code also fetches tree count, tree count per type, and census count.&lt;/p&gt;
&lt;p&gt;Again, there’s quite a bit to go through, so let’s go step by step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We parse the frontend’s &lt;code&gt;request.query&lt;/code&gt; into &lt;code&gt;float&lt;/code&gt; that we can use. In particular, the frontend is asking us for information at a certain latitude, longitude, and distance. If the query is malformed, we return a proper error.&lt;/li&gt;
&lt;li&gt;We create our query for Mongo outside, just so it’s clearer to read.&lt;/li&gt;
&lt;li&gt;We access the database reference we stored earlier when creating the server with &lt;code&gt;request.app['db']&lt;/code&gt;. Handy!&lt;/li&gt;
&lt;li&gt;We try to query Mongo. It may fail if the Mongo server is not running, so we should handle that and tell the client what’s happening. If it succeeds though, we will gather information about the average noise.&lt;/li&gt;
&lt;li&gt;We return a &lt;code&gt;json_response&lt;/code&gt; with Mongo results for the frontend to present to the user.
You may have noticed we defined a &lt;code&gt;ROUTES&lt;/code&gt; list at the bottom. This will make it easier to expand in the future, and the server creation won’t need to change anything in its code, because it’s already unpacking all the routes we define here.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;geospatial_queries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#geospatial_queries&quot;&gt;¶&lt;/a&gt;Geospatial queries&lt;/h3&gt;
&lt;p&gt;In order to retrieve the information from Mongo database we have defined two geospatial queries:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;geo_query = {
    '$nearSphere' : {
        '$geometry': {
            'type': 'Point',
            'coordinates': [long, lat]
         },
        '$maxDistance': distance,
        '$minDistance': 0
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This query uses &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/nearSphere/#op._S_nearSphere&quot;&gt;the operator &lt;code&gt;$nearSphere&lt;/code&gt;&lt;/a&gt; which return geospatial objects in proximity to a point on a sphere.&lt;/p&gt;
&lt;p&gt;The sphere point is represented by the &lt;code&gt;$geometry&lt;/code&gt; operator where it is specified the type of geometry and the coordinates (given by the HTTP request).&lt;/p&gt;
&lt;p&gt;The maximum and minimum distance are represented by &lt;code&gt;$maxDistance&lt;/code&gt; and &lt;code&gt;$minDistance&lt;/code&gt; respectively. We specify that the maximum distance is the radio selected by the user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;geo_avg_noise_pipeline = [{
    '$geoNear': {
        'near' : {'type': 'Point', 'coordinates': [long, lat]},
        'maxDistance': distance,
        'minDistance': 0,
        'spherical' : 'true',
        'distanceField' : 'distance'
    }
}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This query uses the &lt;a href=&quot;https://docs.mongodb.com/manual/core/aggregation-pipeline/&quot;&gt;aggregation pipeline&lt;/a&gt; stage &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/aggregation/geoNear/#pipe._S_geoNear&quot;&gt;&lt;code&gt;$geoNear&lt;/code&gt;&lt;/a&gt; which returns an ordered stream of documents based on the proximity to a geospatial point. The output documents include an additional distance field.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;near&lt;/code&gt; field is mandatory and is the point for which to find the closest documents. In this field it is specified the type of geometry and the coordinates (given by the HTTP request).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;distanceField&lt;/code&gt; field is also mandatory and is the output field that will contain the calculated distance. In this case we’ve just called it &lt;code&gt;distance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some other fields are &lt;code&gt;maxDistance&lt;/code&gt; that indicates the maximum allowed distance from the center of the point, &lt;code&gt;minDistance&lt;/code&gt; for the minimum distance, and &lt;code&gt;spherical&lt;/code&gt; which tells MongoDB how to calculate the distance between two points.&lt;/p&gt;
&lt;p&gt;We specify the maximum distance as the radio selected by the user in the frontend.&lt;/p&gt;
&lt;h2 id=&quot;frontend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#frontend&quot;&gt;¶&lt;/a&gt;Frontend&lt;/h2&gt;
&lt;p&gt;As said earlier, our frontend will use Svelte. We already downloaded the template, so we can start developing. For some, this is the most fun part, because they can finally see and interact with some of the results. But for this interaction to work, we needed a functional backend which we now have!&lt;/p&gt;
&lt;h3 id=&quot;rest_queries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rest_queries&quot;&gt;¶&lt;/a&gt;REST queries&lt;/h3&gt;
&lt;p&gt;The frontend has to query the server to get any meaningful data to show on the page. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt; does not throw an exception if the server doesn’t respond with HTTP OK, but we would like one if things go wrong, so that we can handle them gracefully. The first we’ll do is define our own exception &lt;a href=&quot;https://stackoverflow.com/a/27724419&quot;&gt;which is not pretty&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function NetworkError(message, status) {
    var instance = new Error(message);
    instance.name = 'NetworkError';
    instance.status = status;
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    if (Error.captureStackTrace) {
        Error.captureStackTrace(instance, NetworkError);
    }
    return instance;
}

NetworkError.prototype = Object.create(Error.prototype, {
    constructor: {
        value: Error,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(NetworkError, Error);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But hey, now we have a proper and reusable &lt;code&gt;NetworkError&lt;/code&gt;! Next, let’s make a proper and reusabe &lt;code&gt;query&lt;/code&gt; function that deals with &lt;code&gt;fetch&lt;/code&gt; for us:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async function query(endpoint) {
    const res = await fetch(endpoint, {
        // if we ever use cookies, this is important
        credentials: 'include'
    });
    if (res.ok) {
        return await res.json();
    } else {
        throw new NetworkError(await res.text(), res.status);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At last, we can query our web server. The export here tells Svelte that this function should be visible to outer modules (public) as opposed to being private:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export function get_area_info(long, lat, distance) {
    return query(`/rest/get-area-info?long=${long}&amp;amp;lat=${lat}&amp;amp;distance=${distance}`);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The attentive reader will have noticed that &lt;code&gt;query&lt;/code&gt; is &lt;code&gt;async&lt;/code&gt;, but &lt;code&gt;get_area_info&lt;/code&gt; is not. This is intentional, because we don’t need to &lt;code&gt;await&lt;/code&gt; for anything inside of it. We can just return the &lt;code&gt;[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)&lt;/code&gt; that &lt;code&gt;query&lt;/code&gt; created and let the caller &lt;code&gt;await&lt;/code&gt; it as they see fit. The &lt;code&gt;await&lt;/code&gt; here would have been redundant.&lt;/p&gt;
&lt;p&gt;For those of you who don’t know what a JavaScript promise is, think of it as an object that represents «an eventual result». The result may not be there yet, but we promised it will be present in the future, and we can &lt;code&gt;await&lt;/code&gt; for it. You can also find the same concept in other languages like Python under a different name, such as &lt;a href=&quot;https://docs.python.org/3/library/asyncio-future.html#asyncio.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;map_component&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#map_component&quot;&gt;¶&lt;/a&gt;Map component&lt;/h3&gt;
&lt;p&gt;In Svelte, we can define self-contained components that are issolated from the rest. This makes it really easy to create a modular application. Think of a Svelte component as your own HTML tag, which you can customize however you want, building upon the already-existing components HTML has to offer.&lt;/p&gt;
&lt;p&gt;The main thing that our map needs to do is render the map as an image and overlay the selection area as the user hovers the map with their mouse. We could render the image in the canvas itself, but instead we’ll use the HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag for that and put a transparent &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; on top with some CSS. This should make it cheaper and easier to render things on the canvas.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Map&lt;/code&gt; component will thus render as the user moves the mouse over it, and produce an event when they click so that whatever component is using a &lt;code&gt;Map&lt;/code&gt; knows that it was clicked. Here’s the final CSS and HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
div {
    position: relative;
}
canvas {
    position: absolute;
    left: 0;
    top: 0;
    cursor: crosshair;
}
&amp;lt;/style&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img bind:this={img} on:load={handleLoad} {height} src=&amp;quot;caceres-municipality.svg&amp;quot; alt=&amp;quot;Cáceres (municipality)&amp;quot;/&amp;gt;
    &amp;lt;canvas
        bind:this={canvas}
        on:mousemove={handleMove}
        on:wheel={handleWheel}
        on:mouseup={handleClick}/&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We hardcode a map source here, but ideally this would be provided by the server. The project is already complex enough, so we tried to avoid more complexity than necessary.&lt;/p&gt;
&lt;p&gt;We bind the tags to some variables declared in the JavaScript code of the component, along with some functions and parameters to let the users of &lt;code&gt;Map&lt;/code&gt; customize it just a little.&lt;/p&gt;
&lt;p&gt;Here’s the gist of the JavaScript code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    import { createEventDispatcher, onMount } from 'svelte';

    export let height = 200;

    const dispatch = createEventDispatcher();

    let img;
    let canvas;

    const LONG_WEST = -6.426881;
    const LONG_EAST = -6.354143;
    const LAT_NORTH = 39.500064;
    const LAT_SOUTH = 39.443201;

    let x = 0;
    let y = 0;
    let clickInfo = null; // [x, y, radius]
    let radiusDelta = 0.005 * height;
    let maxRadius = 0.2 * height;
    let minRadius = 0.01 * height;
    let radius = 0.05 * height;

    function handleLoad() {
        canvas.width = img.width;
        canvas.height = img.height;
    }

    function handleMove(event) {
        const { left, top } = this.getBoundingClientRect();
        x = Math.round(event.clientX - left);
        y = Math.round(event.clientY - top);
    }

    function handleWheel(event) {
        if (event.deltaY &amp;lt; 0) {
            if (radius &amp;lt; maxRadius) {
                radius += radiusDelta;
            }
        } else {
            if (radius &amp;gt; minRadius) {
                radius -= radiusDelta;
            }
        }
        event.preventDefault();
    }

    function handleClick(event) {
        dispatch('click', {
            // the real code here maps the x/y/radius values to the right range, here omitted
            x: ...,
            y: ...,
            radius: ...,
        });
    }

    onMount(() =&amp;gt; {
        const ctx = canvas.getContext('2d');
        let frame;

        (function loop() {
            frame = requestAnimationFrame(loop);

            // the real code renders mouse area/selection, here omitted for brevity
            ...
        }());

        return () =&amp;gt; {
            cancelAnimationFrame(frame);
        };
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go through bit-by-bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We define a few variables and constants for later use in the final code.&lt;/li&gt;
&lt;li&gt;We define the handlers to react to mouse movement and clicks. On click, we dispatch an event to outer components.&lt;/li&gt;
&lt;li&gt;We setup the render loop with animation frames, and cancel the current frame appropriatedly if the component disappears.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;app_component&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#app_component&quot;&gt;¶&lt;/a&gt;App component&lt;/h3&gt;
&lt;p&gt;Time to put everything together! We wil include our function to make REST queries along with our &lt;code&gt;Map&lt;/code&gt; component to render things on screen.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    import Map from './Map.svelte';
    import { get_area_info } from './rest.js'
    let selection = null;
    let area_info_promise = null;
    function handleMapSelection(event) {
        selection = event.detail;
        area_info_promise = get_area_info(selection.x, selection.y, selection.radius);
    }
    function format_avg_noise(avg_noise) {
        if (avg_noise === null) {
            return '(no data)';
        } else {
            return `${avg_noise.toFixed(2)} dB`;
        }
    }
&amp;lt;/script&amp;gt;

&amp;lt;div class=&amp;quot;container-fluid&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col-3&amp;quot; style=&amp;quot;max-width: 300em;&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;
                &amp;lt;h1&amp;gt;Caceres Data Consultory&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;Map height={400} on:click={handleMapSelection}/&amp;gt;
            &amp;lt;div class=&amp;quot;text-center mt-4&amp;quot;&amp;gt;
                {#if selection === null}
                        &amp;lt;p class=&amp;quot;m-1 p-3 border border-bottom-0 bg-info text-white&amp;quot;&amp;gt;Click on the map to select the area you wish to see details for.&amp;lt;/p&amp;gt;
                {:else}
                        &amp;lt;h2 class=&amp;quot;bg-dark text-white&amp;quot;&amp;gt;Selected area&amp;lt;/h2&amp;gt;
                        &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Coordinates:&amp;lt;/b&amp;gt; ({selection.x}, {selection.y})&amp;lt;/p&amp;gt;
                        &amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Radius:&amp;lt;/b&amp;gt; {selection.radius} meters&amp;lt;/p&amp;gt;
                {/if}
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;col-sm-4&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
            {#if area_info_promise !== null}
                {#await area_info_promise}
                    &amp;lt;p&amp;gt;Fetching area information…&amp;lt;/p&amp;gt;
                {:then area_info}
                    &amp;lt;div class=&amp;quot;col&amp;quot;&amp;gt;
                        &amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;
                            &amp;lt;h2 class=&amp;quot;m-1 bg-dark text-white&amp;quot;&amp;gt;Area information&amp;lt;/h2&amp;gt;
                            &amp;lt;ul class=&amp;quot;list-unstyled&amp;quot;&amp;gt;
                                &amp;lt;li&amp;gt;There are &amp;lt;b&amp;gt;{area_info.tree_count} trees &amp;lt;/b&amp;gt; within the area&amp;lt;/li&amp;gt;
                                &amp;lt;li&amp;gt;The &amp;lt;b&amp;gt;average noise&amp;lt;/b&amp;gt; is &amp;lt;b&amp;gt;{format_avg_noise(area_info.avg_noise)}&amp;lt;/b&amp;gt;&amp;lt;/li&amp;gt;
                                &amp;lt;li&amp;gt;There are &amp;lt;b&amp;gt;{area_info.census_count} persons &amp;lt;/b&amp;gt; within the area&amp;lt;/li&amp;gt;
                            &amp;lt;/ul&amp;gt;
                        &amp;lt;/div&amp;gt;
                        {#if area_info.trees_per_type.length &amp;gt; 0} 
                            &amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;
                                &amp;lt;h2 class=&amp;quot;m-1 bg-dark text-white&amp;quot;&amp;gt;Tree count per type&amp;lt;/h2&amp;gt;
                            &amp;lt;/div&amp;gt;
                            &amp;lt;ul class=&amp;quot;list-group&amp;quot;&amp;gt;
                                {#each area_info.trees_per_type as [type, count]}
                                    &amp;lt;li class=&amp;quot;list-group-item&amp;quot;&amp;gt;{type} &amp;lt;span class=&amp;quot;badge badge-dark float-right&amp;quot;&amp;gt;{count}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
                                {/each}
                            &amp;lt;/ul&amp;gt;
                        {/if}
                    &amp;lt;/div&amp;gt;
                {:catch error}
                    &amp;lt;p&amp;gt;Failed to fetch area information: {error.message}&amp;lt;/p&amp;gt;
                {/await}
            {/if}
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;We import the &lt;code&gt;Map&lt;/code&gt; component and REST function so we can use them.&lt;/li&gt;
&lt;li&gt;We define a listener for the events that the &lt;code&gt;Map&lt;/code&gt; produces. Such event will trigger a REST call to the server and save the result in a promise used later.&lt;/li&gt;
&lt;li&gt;We’re using Bootstrap for the layout because it’s a lot easier. In the body we add our &lt;code&gt;Map&lt;/code&gt; and another column to show the selection information.&lt;/li&gt;
&lt;li&gt;We make use of Svelte’s &lt;code&gt;{#await}&lt;/code&gt; to nicely notify the user when the call is being made, when it was successful, and when it failed. If it’s successful, we display the info.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;results&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#results&quot;&gt;¶&lt;/a&gt;Results&lt;/h2&gt;
&lt;p&gt;Lo and behold, watch our application run!&lt;/p&gt;
&lt;p&gt;&lt;video controls=&quot;controls&quot; src=&quot;sr-2020-04-14_09-28-25.mp4&quot;&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;In this video you can see our application running, but let’s describe what is happening in more detail.&lt;/p&gt;
&lt;p&gt;When the application starts running (by opening it in your web browser of choice), you can see a map with the town of Cáceres. Then you, the user, can click to retrieve the information within the selected area.&lt;/p&gt;
&lt;p&gt;It is important to note that one can make the selection area larger or smaller by trying to scroll up or down, respectively.&lt;/p&gt;
&lt;p&gt;Once an area is selected, it is colored green in order to let the user know which area they have selected. Under the map, the selected coordinates and the radius (in meters) is also shown for the curious. At the right side the information concerning the selected area is shown, such as the number of trees, the average noise and the number of persons. If there are trees in the area, the application also displays the trees per type, sorted by the number of trees.&lt;/p&gt;
&lt;h2 id=&quot;download&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download&quot;&gt;¶&lt;/a&gt;Download&lt;/h2&gt;
&lt;p&gt;We hope you enjoyed reading this post as much as we enjoyed writing it! Feel free to download the final project and play around with it. Maybe you can adapt it for even more interesting purposes!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;download removed&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To run the above code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unzip the downloaded file.&lt;/li&gt;
&lt;li&gt;Make a copy of &lt;code&gt;example-server-config.ini&lt;/code&gt; and rename it to &lt;code&gt;server-config.ini&lt;/code&gt;, then edit the file to suit your needs.&lt;/li&gt;
&lt;li&gt;Run the server with &lt;code&gt;python -m server&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&quot;http://localhost:9000&quot;&gt;localhost:9000&lt;/a&gt; in your web browser (or whatever port you chose) and enjoy!&lt;/li&gt;
&lt;/ol&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>MongoDB: an Introduction</title><id>dist/mongodb-an-introduction/index.html</id><updated>2020-04-07T22:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>This is the first post in the MongoDB series, where we will introduce the MongoDB database system and take a look at its features and installation methods.</summary><content type="html" src="dist/mongodb-an-introduction/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;MongoDB: an Introduction&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This is the first post in the MongoDB series, where we will introduce the MongoDB database system and take a look at its features and installation methods.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-04-08&lt;/div&gt;
&lt;p&gt;Other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/mongodb-an-introduction/&quot;&gt;MongoDB: an Introduction&lt;/a&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/mongodb-basic-operations-and-architecture/&quot;&gt;MongoDB: Basic Operations and Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/developing-a-python-application-for-mongodb/&quot;&gt;Developing a Python application for MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is co-authored wih Classmate.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;img src=&quot;mongodb.png&quot; alt=&quot;NoSQL database – MongoDB – First delivery&quot; /&gt;
&lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;purpose_of_technology&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#purpose_of_technology&quot;&gt;¶&lt;/a&gt;Purpose of technology&lt;/h2&gt;
&lt;p&gt;MongoDB is a &lt;strong&gt;general purpose, document-based, distributed database&lt;/strong&gt; built for modern application developers and for the cloud era, with the scalability and flexibility that you want with the querying and indexing that you need. It being a document database means it stores data in JSON-like documents.&lt;/p&gt;
&lt;p&gt;The Mongo team believes this is the most natural way to think about data, which is (they claim) much more expressive and powerful than the traditional row/column model, since programmers think in objects.&lt;/p&gt;
&lt;h2 id=&quot;how_it_works&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how_it_works&quot;&gt;¶&lt;/a&gt;How it works&lt;/h2&gt;
&lt;p&gt;MongoDB’s architecture can be summarized as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document data model.&lt;/li&gt;
&lt;li&gt;Distributed systems design.&lt;/li&gt;
&lt;li&gt;Unified experience with freedom to run it anywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a more in-depth explanation, MongoDB offers a &lt;a href=&quot;https://www.mongodb.com/collateral/mongodb-architecture-guide&quot;&gt;download to the MongoDB Architecture Guide&lt;/a&gt; with roughly ten pages worth of text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;knGHenfTGA4kzJb1PHmS9EQvtZl2QlhbIPN15M38m8fZfZf7ODwYfhf0Tltr.png&quot; alt=&quot;&quot; /&gt;
_ Overview of MongoDB’s architecture_&lt;/p&gt;
&lt;p&gt;Regarding usage, MongoDB comes with a really nice introduction along with JavaScript, Python, Java, C++ or C# code at our choice, which describes the steps necessary to make it work. Below we will describe a common workflow.&lt;/p&gt;
&lt;p&gt;First, we must &lt;strong&gt;connect&lt;/strong&gt; to a running MongoDB instance. Once the connection succeeds, we can access individual «collections», which we can think of as &lt;em&gt;tables&lt;/em&gt; where collections of data is stored.&lt;/p&gt;
&lt;p&gt;For instance, we could &lt;strong&gt;insert&lt;/strong&gt; an arbitrary JSON document into the &lt;code&gt;restaurants&lt;/code&gt; collection to store information about a restaurant.&lt;/p&gt;
&lt;p&gt;At any other point in time, we can &lt;strong&gt;query&lt;/strong&gt; these collections. The queries range from trivial, empty ones (which would retrieve all the documents and fields) to more rich and complex queries (for instance, using AND and OR operators, checking if data exists, and then looking for a value in a list).&lt;/p&gt;
&lt;p&gt;MongoDB also supports the creation of &lt;strong&gt;indices&lt;/strong&gt;, similar to those in other database systems. It allows for the creation of indices on any field or subfields.&lt;/p&gt;
&lt;p&gt;In Mongo, the &lt;strong&gt;aggregation pipeline&lt;/strong&gt; allows us to filter and analyze data based on a given set of criteria. For example, we could pull all the documents in the &lt;code&gt;restaurants&lt;/code&gt; collection that have a &lt;code&gt;category&lt;/code&gt; of &lt;code&gt;Bakery&lt;/code&gt; using the &lt;code&gt;$match&lt;/code&gt; operator. Then, we can group them by their star rating using the &lt;code&gt;$group&lt;/code&gt; operator. Using the accumulator operator, &lt;code&gt;$sum&lt;/code&gt;, we can see how many bakeries in our collection have each star rating.&lt;/p&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot;&gt;¶&lt;/a&gt;Features&lt;/h2&gt;
&lt;p&gt;The features can be seen all over the place in their site, because it’s something they make a lot of emphasis on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easy development&lt;/strong&gt;, thanks to the document data model, something they claim to be «the best way to work with data».&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data is stored in flexible JSON-like documents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This model directly maps to the objects in the application’s code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ad hoc queries, indexing, and real time aggregation provide powerful ways to access and analyze the data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Powerful query language&lt;/strong&gt;, with a rich and expressive query language that allows filtering and sorting by any field, no matter how nested it may be within a document. The queries are themselves JSON, and thus easily composable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support for aggregations&lt;/strong&gt; and other modern use-cases such as geo-based search, graph search, and text search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A distributed systems design&lt;/strong&gt;, which allows developers to intelligently put data where they want it. High availability, horizontal scaling, and geographic distribution are built in and easy to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A unified experience&lt;/strong&gt; with the freedom to run anywhere, which allows developers to future-proof their work and eliminate vendor lock-in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;corner_in_cap_theorem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#corner_in_cap_theorem&quot;&gt;¶&lt;/a&gt;Corner in CAP theorem&lt;/h2&gt;
&lt;p&gt;MongoDB’s position in the CAP theorem (Consistency, Availability, Partition Tolerance) depends on the database and driver configurations, and the type of disaster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;strong&gt;no partitions&lt;/strong&gt;, the main focus is &lt;strong&gt;CA&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If there are **partitions **but the system is &lt;strong&gt;strongly connected&lt;/strong&gt;, the main focus is &lt;strong&gt;AP&lt;/strong&gt;: non-synchronized writes from the old primary are ignored.&lt;/li&gt;
&lt;li&gt;If there are &lt;strong&gt;partitions&lt;/strong&gt; but the system is &lt;strong&gt;not strongly connected&lt;/strong&gt;, the main focus is &lt;strong&gt;CP&lt;/strong&gt;: only read access is provided to avoid inconsistencies.
The general consensus seems to be that Mongo is &lt;strong&gt;CP&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;download&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download&quot;&gt;¶&lt;/a&gt;Download&lt;/h2&gt;
&lt;p&gt;We will be using the apt-based installation.&lt;/p&gt;
&lt;p&gt;The Community version can be downloaded by anyone through &lt;a href=&quot;https://www.mongodb.com/download-center/community&quot;&gt;MongoDB Download Center&lt;/a&gt;, where one can choose the version, Operating System and Package.MongoDB also seems to be &lt;a href=&quot;https://packages.ubuntu.com/eoan/mongodb&quot;&gt;available in Ubuntu’s PPAs&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;¶&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;We will be using an Ubuntu-based system, with apt available. To install MongoDB, we open a terminal and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install mongodb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After confirming that we do indeed want to install the package, we should be able to run the following command to verify that the installation was successful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mongod --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should be similar to the following: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db version v4.0.16
git version: 2a5433168a53044cb6b4fa8083e4cfd7ba142221
OpenSSL version: OpenSSL 1.1.1  11 Sep 2018
allocator: tcmalloc
modules: none
build environment:
	distmod: ubuntu1804
	distarch: x86_64
	target_arch: x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB’s official site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/what-is-mongodb&quot;&gt;What is MongoDB?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/mongodb-architecture&quot;&gt;MongoDB Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/q/11292215/4759433&quot;&gt;Where does mongodb stand in the CAP theorem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@bikas.katwal10/mongodb-vs-cassandra-vs-rdbms-where-do-they-stand-in-the-cap-theorem-1bae779a7a15&quot;&gt;What is the CAP Theorem? MongoDB vs Cassandra vs RDBMS, where do they stand in the CAP theorem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quora.com/Why-doesnt-MongoDB-have-availability-in-the-CAP-theorem&quot;&gt;Why doesn’t MongoDB have availability in the CAP theorem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.mongodb.com/manual/installation/&quot;&gt;Install MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>MongoDB: Basic Operations and Architecture</title><id>dist/mongodb-basic-operations-and-architecture/index.html</id><updated>2020-04-07T22:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>This is the second post in the MongoDB series, where we will take a look at the </summary><content type="html" src="dist/mongodb-basic-operations-and-architecture/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;MongoDB: Basic Operations and Architecture&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This is the second post in the MongoDB series, where we will take a look at the &lt;a href=&quot;https://stackify.com/what-are-crud-operations/&quot;&gt;CRUD operations&lt;/a&gt; they support, the data model and architecture used.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-04-08&lt;/div&gt;
&lt;p&gt;Other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/mongodb-an-introduction/&quot;&gt;MongoDB: an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/mongodb-basic-operations-and-architecture/&quot;&gt;MongoDB: Basic Operations and Architecture&lt;/a&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/developing-a-python-application-for-mongodb/&quot;&gt;Developing a Python application for MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is co-authored wih Classmate, and in it we will take an explorative approach using the &lt;code&gt;mongo&lt;/code&gt; command line shell to execute commands against the database. It even has TAB auto-completion, which is awesome!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Before creating any documents, we first need to create somewhere for the documents to be in. And before we create anything, the database has to be running, so let’s do that first. If we don’t have a service installed, we can run the &lt;code&gt;mongod&lt;/code&gt; command ourselves in some local folder to make things easier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p mongo-database
$ mongod --dbpath mongo-database
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like that, we will have Mongo running. Now, let’s connect to it using the &lt;code&gt;mongo&lt;/code&gt; command in another terminal (don’t close the terminal where the server is running, we need it!). By default, it connects to localhost, which is just what we need.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;title&quot; id=&quot;create&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create&quot;&gt;¶&lt;/a&gt;Create&lt;/h2&gt;
&lt;h3 id=&quot;create_a_database&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create_a_database&quot;&gt;¶&lt;/a&gt;Create a database&lt;/h3&gt;
&lt;p&gt;Let’s list the databases:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; show databases
admin   0.000GB
config  0.000GB
local   0.000GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, how interesting! There’s already some databases, even though we just created the directory where Mongo will store everything. However, they seem empty, which make sense.&lt;/p&gt;
&lt;p&gt;Creating a new database is done by &lt;code&gt;use&lt;/code&gt;-ing a name that doesn’t exist. Let’s call our new database «helloworld».&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; use helloworld
switched to db helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good! Now the «local variable» called &lt;code&gt;db&lt;/code&gt; points to our &lt;code&gt;helloworld&lt;/code&gt; database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db
helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens if we print the databases again? Surely our new database will show up now…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; show databases
admin   0.000GB
config  0.000GB
local   0.000GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…maybe not! It seems Mongo won’t create the database until we create some collections and documents in it. Databases contain collections, and inside collections (which you can think of as tables) we can insert new documents (which you can think of as rows). Like in many programming languages, the dot operator is used to access these «members».&lt;/p&gt;
&lt;h3 id=&quot;create_a_document&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create_a_document&quot;&gt;¶&lt;/a&gt;Create a document&lt;/h3&gt;
&lt;p&gt;Let’s add a new greeting into the &lt;code&gt;greetings&lt;/code&gt; collection:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.insert({message: &amp;quot;¡Bienvenido!&amp;quot;, lang: &amp;quot;es&amp;quot;})
WriteResult({ &amp;quot;nInserted&amp;quot; : 1 })

&amp;gt; show collections
greetings

&amp;gt; show databases
admin       0.000GB
config      0.000GB
helloworld  0.000GB
local       0.000GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks promising! We can also see our new &lt;code&gt;helloworld&lt;/code&gt; database also shows up. The Mongo shell actually works on JavaScript-like code, which is why we can use a variant of JSON (BSON) to insert documents (note the lack of quotes around the keys, convenient!).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.insert/index.html&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; method actually supports a list of documents, and by default Mongo will assign a unique identifier to each. If we don’t want that though, all we have to do is add the &lt;code&gt;_id&lt;/code&gt; key to our documents.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.insert([
... {message: &amp;quot;Welcome!&amp;quot;, lang: &amp;quot;en&amp;quot;},
... {message: &amp;quot;Bonjour!&amp;quot;, lang: &amp;quot;fr&amp;quot;},
... ])
BulkWriteResult({
    &amp;quot;writeErrors&amp;quot; : [ ],
    &amp;quot;writeConcernErrors&amp;quot; : [ ],
    &amp;quot;nInserted&amp;quot; : 2,
    &amp;quot;nUpserted&amp;quot; : 0,
    &amp;quot;nMatched&amp;quot; : 0,
    &amp;quot;nModified&amp;quot; : 0,
    &amp;quot;nRemoved&amp;quot; : 0,
    &amp;quot;upserted&amp;quot; : [ ]
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;create_a_collection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create_a_collection&quot;&gt;¶&lt;/a&gt;Create a collection&lt;/h3&gt;
&lt;p&gt;In this example, we created the collection &lt;code&gt;greetings&lt;/code&gt; implicitly, but behind the scenes Mongo made a call to &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.createCollection/&quot;&gt;&lt;code&gt;createCollection&lt;/code&gt;&lt;/a&gt;. Let’s do just that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.createCollection(&amp;quot;goodbyes&amp;quot;)
{ &amp;quot;ok&amp;quot; : 1 }

&amp;gt; show collections
goodbyes
greetings
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The method actually has a default parameter to configure other options, like the maximum size of the collection or maximum amount of documents in it, validation-related options, and so on. These are all described in more details in the documentation.&lt;/p&gt;
&lt;h2 id=&quot;read&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#read&quot;&gt;¶&lt;/a&gt;Read&lt;/h2&gt;
&lt;p&gt;To read the contents of a document, we have to &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.find/index.html&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.find()
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e74829a0659f802b15f18dd&amp;quot;), &amp;quot;message&amp;quot; : &amp;quot;¡Bienvenido!&amp;quot;, &amp;quot;lang&amp;quot; : &amp;quot;es&amp;quot; }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e7487b90659f802b15f18de&amp;quot;), &amp;quot;message&amp;quot; : &amp;quot;Welcome!&amp;quot;, &amp;quot;lang&amp;quot; : &amp;quot;en&amp;quot; }
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e7487b90659f802b15f18df&amp;quot;), &amp;quot;message&amp;quot; : &amp;quot;Bonjour!&amp;quot;, &amp;quot;lang&amp;quot; : &amp;quot;fr&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s a bit unreadable for my taste, can we make it more &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.pretty/index.html&quot;&gt;&lt;code&gt;pretty&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.find().pretty()
{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e74829a0659f802b15f18dd&amp;quot;),
    &amp;quot;message&amp;quot; : &amp;quot;¡Bienvenido!&amp;quot;,
    &amp;quot;lang&amp;quot; : &amp;quot;es&amp;quot;
}
{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e7487b90659f802b15f18de&amp;quot;),
    &amp;quot;message&amp;quot; : &amp;quot;Welcome!&amp;quot;,
    &amp;quot;lang&amp;quot; : &amp;quot;en&amp;quot;
}
{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e7487b90659f802b15f18df&amp;quot;),
    &amp;quot;message&amp;quot; : &amp;quot;Bonjour!&amp;quot;,
    &amp;quot;lang&amp;quot; : &amp;quot;fr&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gorgeous! We can clearly see Mongo created an identifier for us automatically. The queries are also JSON, and support a bunch of operators (prefixed by &lt;code&gt;$&lt;/code&gt;), known as &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/query/&quot;&gt;Query Selectors&lt;/a&gt;. Here’s a few:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th&gt;
    Operation
   &lt;/th&gt;
   &lt;th&gt;
    Syntax
   &lt;/th&gt;
   &lt;th&gt;
    RDBMS equivalent
   &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Equals
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {key: {$eq: value}}
    &lt;/code&gt;
    &lt;br/&gt;
    Shorthand:
    &lt;code&gt;
     {key: value}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where key = value
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Less Than
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {key: {$lte: value}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where key &amp;lt; value
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Less Than or Equal
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {key: {$lt: value}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where key &amp;lt;= value
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Greater Than
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {key: {$gt: value}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where key &amp;gt; value
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Greater Than or Equal
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {key: {$gte: value}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where key &amp;gt;= value
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Not Equal
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {key: {$ne: value}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where key != value
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    And
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {$and: [{k1: v1}, {k2: v2}]}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where k1 = v1 and k2 = v2
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Or
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {$or: [{k1: v1}, {k2: v2}]}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where k1 = v1 or k2 = v2
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The operations all do what you would expect them to do, and their names are really intuitive. Aggregating operations with &lt;code&gt;$and&lt;/code&gt; or &lt;code&gt;$or&lt;/code&gt; can be done anywhere in the query, nested any level deep.&lt;/p&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;¶&lt;/a&gt;Update&lt;/h2&gt;
&lt;p&gt;Updating a document can be done by using &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.save/index.html&quot;&gt;&lt;code&gt;save&lt;/code&gt;&lt;/a&gt; on an already-existing document (that is, the document we want to save has &lt;code&gt;_id&lt;/code&gt; and it’s in the collection already). If the document is not in the collection yet, this method will create it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.save({_id: ObjectId(&amp;quot;5e74829a0659f802b15f18dd&amp;quot;), message: &amp;quot;¡Bienvenido, humano!&amp;quot;, &amp;quot;lang&amp;quot; : &amp;quot;es&amp;quot;})
WriteResult({ &amp;quot;nMatched&amp;quot; : 1, &amp;quot;nUpserted&amp;quot; : 0, &amp;quot;nModified&amp;quot; : 1 })

&amp;gt; db.greetings.find({lang: &amp;quot;es&amp;quot;})
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e74829a0659f802b15f18dd&amp;quot;), &amp;quot;message&amp;quot; : &amp;quot;¡Bienvenido, humano!&amp;quot;, &amp;quot;lang&amp;quot; : &amp;quot;es&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.update/index.html&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method takes a query and new value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.update({lang: &amp;quot;en&amp;quot;}, {$set: {message: &amp;quot;Welcome, human!&amp;quot;}})
WriteResult({ &amp;quot;nMatched&amp;quot; : 1, &amp;quot;nUpserted&amp;quot; : 0, &amp;quot;nModified&amp;quot; : 1 })

&amp;gt; db.greetings.find({lang: &amp;quot;en&amp;quot;})
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5e7487b90659f802b15f18de&amp;quot;), &amp;quot;message&amp;quot; : &amp;quot;Welcome, human!&amp;quot;, &amp;quot;lang&amp;quot; : &amp;quot;en&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;indexing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#indexing&quot;&gt;¶&lt;/a&gt;Indexing&lt;/h2&gt;
&lt;p&gt;Creating an index is done with &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/index.html&quot;&gt;&lt;code&gt;createIndex&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.createIndex({lang: +1})
{
    &amp;quot;createdCollectionAutomatically&amp;quot; : false,
    &amp;quot;numIndexesBefore&amp;quot; : 1,
    &amp;quot;numIndexesAfter&amp;quot; : 2,
    &amp;quot;ok&amp;quot; : 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we create an ascending index on the lang key. Descending order is done with &lt;code&gt;-1&lt;/code&gt;. Now a query for &lt;code&gt;lang&lt;/code&gt; in our three documents will be fast… well maybe iteration over three documents was faster than an index.&lt;/p&gt;
&lt;h2 id=&quot;delete&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete&quot;&gt;¶&lt;/a&gt;Delete&lt;/h2&gt;
&lt;h3 id=&quot;delete_a_document&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete_a_document&quot;&gt;¶&lt;/a&gt;Delete a document&lt;/h3&gt;
&lt;p&gt;I have to confess, I can’t talk French. I learnt it long ago and it’s long forgotten, so let’s remove the translation I copied online from our greetings with &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.remove/index.html&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.greetings.remove({lang: &amp;quot;fr&amp;quot;})
WriteResult({ &amp;quot;nRemoved&amp;quot; : 1 })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;delete_a_collection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete_a_collection&quot;&gt;¶&lt;/a&gt;Delete a collection&lt;/h3&gt;
&lt;p&gt;We never really used the &lt;code&gt;goodbyes&lt;/code&gt; collection. Can we get rid of that?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.goodbyes.drop()
true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, it is &lt;code&gt;true&lt;/code&gt; that we can &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.drop/index.html&quot;&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/a&gt; it.&lt;/p&gt;
&lt;h3 id=&quot;delete_a_database&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete_a_database&quot;&gt;¶&lt;/a&gt;Delete a database&lt;/h3&gt;
&lt;p&gt;Now, I will be honest, I don’t really like our &lt;code&gt;greetings&lt;/code&gt; database either. It stinks. Let’s get rid of it as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.dropDatabase()
{ &amp;quot;dropped&amp;quot; : &amp;quot;helloworld&amp;quot;, &amp;quot;ok&amp;quot; : 1 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeah, take that! The &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.dropDatabase/&quot;&gt;&lt;code&gt;dropDatabase&lt;/code&gt;&lt;/a&gt; can be used to drop databases.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;p&gt;The examples in this post are all fictional, and the methods that could be used where taken from Classmate’s post, and of course &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/&quot;&gt;Mongo’s documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Introduction to Hadoop and its MapReduce</title><id>dist/introduction-to-hadoop-and-its-mapreduce/index.html</id><updated>2020-04-02T22:00:00+00:00</updated><published>2020-03-31T22:00:00+00:00</published><summary>Hadoop is an open-source, free, Java-based programming framework that helps processing large datasets in a distributed environment and the problems that arise when trying to harness the knowledge from BigData, capable of running on thousands of nodes and dealing with petabytes of data. It is based on Google File System (GFS) and originated from the work on the Nutch open-source project on search engines.</summary><content type="html" src="dist/introduction-to-hadoop-and-its-mapreduce/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Introduction to Hadoop and its MapReduce&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Hadoop is an open-source, free, Java-based programming framework that helps processing large datasets in a distributed environment and the problems that arise when trying to harness the knowledge from BigData, capable of running on thousands of nodes and dealing with petabytes of data. It is based on Google File System (GFS) and originated from the work on the Nutch open-source project on search engines.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-04-01&lt;br&gt;
Modified 2020-04-03&lt;/div&gt;
&lt;p&gt;Hadoop also offers a distributed filesystem (HDFS) enabling for fast transfer among nodes, and a way to program with MapReduce.&lt;/p&gt;
&lt;p&gt;It aims to strive for the 4 V’s: Volume, Variety, Veracity and Velocity. For veracity, it is a secure environment that can be trusted.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;milestones&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#milestones&quot;&gt;¶&lt;/a&gt;Milestones&lt;/h2&gt;
&lt;p&gt;The creators of Hadoop are Doug Cutting and Mike Cafarella, who just wanted to design a search engine, Nutch, and quickly found the problems of dealing with large amounts of data. They found their solution with the papers Google published.&lt;/p&gt;
&lt;p&gt;The name comes from the plush of Cutting’s child, a yellow elephant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In July 2005, Nutch used GFS to perform MapReduce operations.&lt;/li&gt;
&lt;li&gt;In February 2006, Nutch started a Lucene subproject which led to Hadoop.&lt;/li&gt;
&lt;li&gt;In April 2007, Yahoo used Hadoop in a 1 000-node cluster.&lt;/li&gt;
&lt;li&gt;In January 2008, Apache took over and made Hadoop a top-level project.&lt;/li&gt;
&lt;li&gt;In July 2008, Apache tested a 4000-node cluster. The performance was the fastest compared to other technologies that year.&lt;/li&gt;
&lt;li&gt;In May 2009, Hadoop sorted a petabyte of data in 17 hours.&lt;/li&gt;
&lt;li&gt;In December 2011, Hadoop reached 1.0.&lt;/li&gt;
&lt;li&gt;In May 2012, Hadoop 2.0 was released with the addition of YARN (Yet Another Resource Navigator) on top of HDFS, splitting MapReduce and other processes into separate components, greatly improving the fault tolerance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here onwards, many other alternatives have born, like Spark, Hive &amp;amp; Drill, Kafka, HBase, built around the Hadoop ecosystem.&lt;/p&gt;
&lt;p&gt;As of 2017, Amazon has clusters between 1 and 100 nodes, Yahoo has over 100 000 CPUs running Hadoop, AOL has clusters with 50 machines, and Facebook has a 320-machine (2 560 cores) and 1.3PB of raw storage.&lt;/p&gt;
&lt;h2 id=&quot;why_not_use_rdbms_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why_not_use_rdbms_&quot;&gt;¶&lt;/a&gt;Why not use RDBMS?&lt;/h2&gt;
&lt;p&gt;Relational database management systems simply cannot scale horizontally, and vertical scaling will require very expensive servers. Similar to RDBMS, Hadoop has a notion of jobs (analogous to transactions), but without ACID or concurrency control. Hadoop supports any form of data (unstructured or semi-structured) in read-only mode, and failures are common but there’s a simple yet efficient fault tolerance.&lt;/p&gt;
&lt;p&gt;So what problems does Hadoop solve? It solves the way we should think about problems, and distributing them, which is key to do anything related with BigData nowadays. We start working with clusters of nodes, and coordinating the jobs between them. Hadoop’s API makes this really easy.&lt;/p&gt;
&lt;p&gt;Hadoop also takes very seriously the loss of data with replication, and if a node falls, they are moved to a different node.&lt;/p&gt;
&lt;h2 id=&quot;major_components&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#major_components&quot;&gt;¶&lt;/a&gt;Major components&lt;/h2&gt;
&lt;p&gt;The previously-mentioned HDFS runs on commodity machine, which are cost-friendly. It is very fault-tolerant and efficient enough to process huge amounts of data, because it splits large files into smaller chunks (or blocks) that can be more easily handled. Multiple nodes can work on multiple chunks at the same time.&lt;/p&gt;
&lt;p&gt;NameNode stores the metadata of the various datablocks (map of blocks) along with their location. It is the brain and the master in Hadoop’s master-slave architecture, also known as the namespace, and makes use of the DataNode.&lt;/p&gt;
&lt;p&gt;A secondary NameNode is a replica that can be used if the first NameNode dies, so that Hadoop doesn’t shutdown and can restart.&lt;/p&gt;
&lt;p&gt;DataNode stores the blocks of data, and are the slaves in the architecture. This data is split into one or more files. Their only job is to manage this access to the data. They are often distributed among racks to avoid data lose.&lt;/p&gt;
&lt;p&gt;JobTracker creates and schedules jobs from the clients for either map or reduce operations.&lt;/p&gt;
&lt;p&gt;TaskTracker runs MapReduce tasks assigned to the current data node.&lt;/p&gt;
&lt;p&gt;When clients need data, they first interact with the NameNode and replies with the location of the data in the correct DataNode. Client proceeds with interaction with the DataNode.&lt;/p&gt;
&lt;h2 id=&quot;mapreduce&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mapreduce&quot;&gt;¶&lt;/a&gt;MapReduce&lt;/h2&gt;
&lt;p&gt;MapReduce, as the name implies, is split into two steps: the map and the reduce. The map stage is the «divide and conquer» strategy, while the reduce part is about combining and reducing the results.&lt;/p&gt;
&lt;p&gt;The mapper has to process the input data (normally a file or directory), commonly line-by-line, and produce one or more outputs. The reducer uses all the results from the mapper as its input to produce a new output file itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;bitmap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When reading the data, some may be junk that we can choose to ignore. If it is valid data, however, we label it with a particular type that can be useful for the upcoming process. Hadoop is responsible for splitting the data accross the many nodes available to execute this process in parallel.&lt;/p&gt;
&lt;p&gt;There is another part to MapReduce, known as the Shuffle-and-Sort. In this part, types or categories from one node get moved to a different node. This happens with all nodes, so that every node can work on a complete category. These categories are known as «keys», and allows Hadoop to scale linearly.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/oT7kczq5A-0&quot;&gt;YouTube – Hadoop Tutorial For Beginners | What Is Hadoop? | Hadoop Tutorial | Hadoop Training | Simplilearn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/bcjSe0xCHbE&quot;&gt;YouTube – Learn MapReduce with Playing Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/j8ehT1_G5AY?list=PLi4tp-TF_qjM_ed4lIzn03w7OnEh0D8Xi&quot;&gt;YouTube – Video Post #2: Hadoop para torpes (I)-¿Qué es y para qué sirve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/NQ8mjVPCDvk?list=PLi4tp-TF_qjM_ed4lIzn03w7OnEh0D8Xi&quot;&gt;Video Post #3: Hadoop para torpes (II)-¿Cómo funciona? HDFS y MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hadoop.apache.org/old/releases.html&quot;&gt;Apache Hadoop Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/20qWx2KYqYg?list=PLi4tp-TF_qjM_ed4lIzn03w7OnEh0D8Xi&quot;&gt;Video Post #4: Hadoop para torpes (III y fin)- Ecosistema y distribuciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hadoopbook.com/&quot;&gt;Chapter 2 – Hadoop: The Definitive Guide, Fourth Edition&lt;/a&gt; (&lt;a href=&quot;http://grut-computing.com/HadoopBook.pdf&quot;&gt;pdf,&lt;/a&gt;&lt;a href=&quot;http://www.hadoopbook.com/code.html&quot;&gt;code&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Google’s BigTable</title><id>dist/googles-bigtable/index.html</id><updated>2020-04-02T22:00:00+00:00</updated><published>2020-03-31T22:00:00+00:00</published><summary>Let’s talk about BigTable, and why it is what it is. But before we get into that, let’s see some important aspects anybody should consider when dealing with a lot of data (something BigTable does!).</summary><content type="html" src="dist/googles-bigtable/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Google’s BigTable&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Let’s talk about BigTable, and why it is what it is. But before we get into that, let’s see some important aspects anybody should consider when dealing with a lot of data (something BigTable does!).&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-04-01&lt;br&gt;
Modified 2020-04-03&lt;/div&gt;
&lt;h2 class=&quot;title&quot; id=&quot;the_basics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the_basics&quot;&gt;¶&lt;/a&gt;The basics&lt;/h2&gt;
&lt;p&gt;Converting a text document into a different format is often a great way to greatly speed up scanning of it in the future. It allows for efficient searches.&lt;/p&gt;
&lt;p&gt;In addition, you generally want to store everything in a single, giant file. This will save a lot of time opening and closing files, because everything is in the same file! One proposal to make this happen is &lt;a href=&quot;https://trec.nist.gov/file_help.html&quot;&gt;Web TREC&lt;/a&gt; (see also the &lt;a href=&quot;https://en.wikipedia.org/wiki/Text_Retrieval_Conference&quot;&gt;Wikipedia page on TREC&lt;/a&gt;), which is basically HTML but every document is properly delimited from one another.&lt;/p&gt;
&lt;p&gt;Because we will have a lot of data, it’s often a good idea to compress it. Most text consists of the same words, over and over again. Classic compression techniques such as &lt;code&gt;DEFLATE&lt;/code&gt; or &lt;code&gt;LZW&lt;/code&gt; do an excellent job here.&lt;/p&gt;
&lt;h2 id=&quot;so_what_s_bigtable_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#so_what_s_bigtable_&quot;&gt;¶&lt;/a&gt;So what’s BigTable?&lt;/h2&gt;
&lt;p&gt;Okay, enough of an introduction to the basics on storing data. BigTable is what Google uses to store documents, and it’s a customized approach to save, search and update web pages.&lt;/p&gt;
&lt;p&gt;BigTable is is a distributed storage system for managing structured data, able to scale to petabytes of data across thousands of commodity servers, with wide applicability, scalability, high performance, and high availability.&lt;/p&gt;
&lt;p&gt;In a way, it’s kind of like databases and shares many implementation strategies with them, like parallel databases, or main-memory databases, but of course, with a different schema.&lt;/p&gt;
&lt;p&gt;It consists of a big table known as the «Root tablet», with pointers to many other «tablets» (or metadata in between). These are stored in a replicated filesystem accessible by all BigTable servers. Any change to a tablet gets logged (said log also gets stored in a replicated filesystem).&lt;/p&gt;
&lt;p&gt;If any of the tablets servers gets locked, a different one can take its place, read the log and deal with the problem.&lt;/p&gt;
&lt;p&gt;There’s no query language, transactions occur at row-level only. Every read or write in a row is atomic. Each row stores a single web page, and by combining the row and column keys along with a timestamp, it is possible to retrieve a single cell in the row. More formally, it’s a map that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fetch(row: string, column: string, time: int64) -&amp;gt; string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A row may have as many columns as it needs, and these column groups are the same for everyone (but the columns themselves may vary), which is importan to reduce disk read time.&lt;/p&gt;
&lt;p&gt;Rows are split in different tablets based on the row keys, which simplifies determining an appropriated server for them. The keys can be up to 64KB big, although most commonly they range 10-100 bytes.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions&quot;&gt;¶&lt;/a&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;BigTable is Google’s way to deal with large amounts of data on many of their services, and the ideas behind it are not too complex to understand.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>A practical example with Hadoop</title><id>dist/a-practical-example-with-hadoop/index.html</id><updated>2020-04-02T22:00:00+00:00</updated><published>2020-03-31T22:00:00+00:00</published><summary>In our </summary><content type="html" src="dist/a-practical-example-with-hadoop/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;A practical example with Hadoop&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;In our &lt;a href=&quot;/blog/ribw/introduction-to-hadoop-and-its-mapreduce/&quot;&gt;previous Hadoop post&lt;/a&gt;, we learnt what it is, how it originated, and how it works, from a theoretical standpoint. Here we will instead focus on a more practical example with Hadoop.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-04-01&lt;br&gt;
Modified 2020-04-03&lt;/div&gt;
&lt;p&gt;This post will showcase my own implementation to implement a word counter for any plain text document that you want to analyze.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;¶&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before running any piece of software, its executable code must first be downloaded into our computers so that we can run it. Head over to &lt;a href=&quot;http://hadoop.apache.org/releases.html&quot;&gt;Apache Hadoop’s releases&lt;/a&gt; and download the &lt;a href=&quot;https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz&quot;&gt;latest binary version&lt;/a&gt; at the time of writing (3.2.1).&lt;/p&gt;
&lt;p&gt;We will be using the &lt;a href=&quot;https://linuxmint.com/&quot;&gt;Linux Mint&lt;/a&gt; distribution because I love its simplicity, although the process shown here should work just fine on any similar Linux distribution such as &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the archive download is complete, extract it with any tool of your choice (graphical or using the terminal) and execute it. Make sure you have a version of Java installed, such as &lt;a href=&quot;https://openjdk.java.net/&quot;&gt;OpenJDK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are all the three steps in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz
tar xf hadoop-3.2.1.tar.gz
hadoop-3.2.1/bin/hadoop version
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;processing_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#processing_data&quot;&gt;¶&lt;/a&gt;Processing data&lt;/h2&gt;
&lt;p&gt;To take advantage of Hadoop, we have to design our code to work in the MapReduce model. Both the map and reduce phase work on key-value pairs as input and output, and both have a programmer-defined function.&lt;/p&gt;
&lt;p&gt;We will use Java, because it’s a dependency that we already have anyway, so might as well.&lt;/p&gt;
&lt;p&gt;Our map function needs to split each of the lines we receive as input into words, and we will also convert them to lowercase, thus preparing the data for later use (counting words). There won’t be bad records, so we don’t have to worry about that.&lt;/p&gt;
&lt;p&gt;Copy or reproduce the following code in a file called &lt;code&gt;WordCountMapper.java&lt;/code&gt;, using any text editor of your choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class WordCountMapper extends Mapper&amp;lt;LongWritable, Text, Text, IntWritable&amp;gt; {
    @Override
    public void map(LongWritable key, Text value, Context context)
            throws IOException, InterruptedException {
        for (String word : value.toString().split(&amp;quot;\\W&amp;quot;)) {
            context.write(new Text(word.toLowerCase()), new IntWritable(1));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s create the &lt;code&gt;WordCountReducer.java&lt;/code&gt; file. Its job is to reduce the data from multiple values into just one. We do that by summing all the values (our word count so far):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class WordCountReducer extends Reducer&amp;lt;Text, IntWritable, Text, IntWritable&amp;gt; {
    @Override
    public void reduce(Text key, Iterable&amp;lt;IntWritable&amp;gt; values, Context context)
            throws IOException, InterruptedException {
        int count = 0;
        for (IntWritable value : values) {
            count += value.get();
        }
        context.write(key, new IntWritable(count));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s just take a moment to appreciate how absolutely tiny this code is, and it’s Java! Hadoop’s API is really awesome and lets us write such concise code to achieve what we need.&lt;/p&gt;
&lt;p&gt;Last, let’s write the &lt;code&gt;main&lt;/code&gt; method, or else we won’t be able to run it. In our new file &lt;code&gt;WordCount.java&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println(&amp;quot;usage: java WordCount &amp;lt;input path&amp;gt; &amp;lt;output path&amp;gt;&amp;quot;);
            System.exit(-1);
        }

        Job job = Job.getInstance();

        job.setJobName(&amp;quot;Word count&amp;quot;);
        job.setJarByClass(WordCount.class);
        job.setMapperClass(WordCountMapper.class);
        job.setReducerClass(WordCountReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        boolean result = job.waitForCompletion(true);

        System.exit(result ? 0 : 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And compile by including the required &lt;code&gt;.jar&lt;/code&gt; dependencies in Java’s classpath with the &lt;code&gt;-cp&lt;/code&gt; switch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javac -cp &amp;quot;hadoop-3.2.1/share/hadoop/common/*:hadoop-3.2.1/share/hadoop/mapreduce/*&amp;quot; *.java
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At last, we can run it (also specifying the dependencies in the classpath, this one’s a mouthful). Let’s run it on the same &lt;code&gt;WordCount.java&lt;/code&gt; source file we wrote:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -cp &amp;quot;.:hadoop-3.2.1/share/hadoop/common/*:hadoop-3.2.1/share/hadoop/common/lib/*:hadoop-3.2.1/share/hadoop/mapreduce/*:hadoop-3.2.1/share/hadoop/mapreduce/lib/*:hadoop-3.2.1/share/hadoop/yarn/*:hadoop-3.2.1/share/hadoop/yarn/lib/*:hadoop-3.2.1/share/hadoop/hdfs/*:hadoop-3.2.1/share/hadoop/hdfs/lib/*&amp;quot; WordCount WordCount.java results
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hooray! We should have a new &lt;code&gt;results/&lt;/code&gt; folder along with the following files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls results
part-r-00000  _SUCCESS
$ cat results/part-r-00000 
	154
0	2
1	3
2	1
addinputpath	1
apache	6
args	4
boolean	1
class	6
count	1
err	1
exception	1
-snip- (output cut for clarity)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked! Now this example was obviously tiny, but hopefully enough to demonstrate how to get the basics running on real world data.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>How does Google’s Search Engine work?</title><id>dist/how-does-googles-search-engine-work/index.html</id><updated>2020-03-27T23:00:00+00:00</updated><published>2020-03-17T23:00:00+00:00</published><summary>The original implementation was written in C/++ for Linux/Solaris.</summary><content type="html" src="dist/how-does-googles-search-engine-work/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;How does Google’s Search Engine work?&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;The original implementation was written in C/++ for Linux/Solaris.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-18&lt;br&gt;
Modified 2020-03-28&lt;/div&gt;
&lt;p&gt;There are three major components in the system’s anatomy, which can be thought as steps to be performed for Google to be what it is today.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-1024x649.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But before we talk about the different components, let’s take a look at how they store all of this information.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;data_structures&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data_structures&quot;&gt;¶&lt;/a&gt;Data structures&lt;/h2&gt;
&lt;p&gt;A «BigFile» is a virtual file addressable by 64 bits.&lt;/p&gt;
&lt;p&gt;There exists a repository with the full HTML of every page compressed, along with a document identifier, length and URL.&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    sync
   &lt;/td&gt;
   &lt;td&gt;
    length
   &lt;/td&gt;
   &lt;td&gt;
    compressed packet
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Document Index has the document identifier, a pointer into the repository, a checksum and various other statistics.&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    doc id
   &lt;/td&gt;
   &lt;td&gt;
    ecode
   &lt;/td&gt;
   &lt;td&gt;
    url len
   &lt;/td&gt;
   &lt;td&gt;
    page len
   &lt;/td&gt;
   &lt;td&gt;
    url
   &lt;/td&gt;
   &lt;td&gt;
    page
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A Lexicon stores the repository of words, implemented with a hashtable over pointers linking to the barrels (sorted linked lists) of the Inverted Index.&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    word id
   &lt;/td&gt;
   &lt;td&gt;
    n docs
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    word id
   &lt;/td&gt;
   &lt;td&gt;
    n docs
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Hit Lists store occurences of a word in a document.&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     plain
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    cap: 1
   &lt;/td&gt;
   &lt;td&gt;
    imp: 3
   &lt;/td&gt;
   &lt;td&gt;
    pos: 12
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     fancy
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    cap: 1
   &lt;/td&gt;
   &lt;td&gt;
    imp: 7
   &lt;/td&gt;
   &lt;td&gt;
    type: 4
   &lt;/td&gt;
   &lt;td&gt;
    pos: 8
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     anchor
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    cap: 1
   &lt;/td&gt;
   &lt;td&gt;
    imp: 7
   &lt;/td&gt;
   &lt;td&gt;
    type: 4
   &lt;/td&gt;
   &lt;td&gt;
    hash: 4
   &lt;/td&gt;
   &lt;td&gt;
    pos: 8
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Forward Index is a barrel with a range of word identifiers (document identifier and list of word identifiers).&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td rowspan=&quot;3&quot;&gt;
    doc id
   &lt;/td&gt;
   &lt;td&gt;
    word id: 24
   &lt;/td&gt;
   &lt;td&gt;
    n hits: 8
   &lt;/td&gt;
   &lt;td&gt;
    hit hit hit hit hit hit hit hit
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    word id: 24
   &lt;/td&gt;
   &lt;td&gt;
    n hits: 8
   &lt;/td&gt;
   &lt;td&gt;
    hit hit hit hit hit hit hit hit
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    null word id
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Inverted Index can be sorted by either document identifier or by ranking of word occurence.&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    doc id: 23
   &lt;/td&gt;
   &lt;td&gt;
    n hits: 5
   &lt;/td&gt;
   &lt;td&gt;
    hit hit hit hit hit
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    doc id: 23
   &lt;/td&gt;
   &lt;td&gt;
    n hits: 3
   &lt;/td&gt;
   &lt;td&gt;
    hit hit hit
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    doc id: 23
   &lt;/td&gt;
   &lt;td&gt;
    n hits: 4
   &lt;/td&gt;
   &lt;td&gt;
    hit hit hit hit
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    doc id: 23
   &lt;/td&gt;
   &lt;td&gt;
    n hits: 2
   &lt;/td&gt;
   &lt;td&gt;
    hit hit
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Back in 1998, Google compressed its repository to 53GB and had 24 million pages. The indices, lexicon, and other temporary storage required about 55GB.&lt;/p&gt;
&lt;h2 id=&quot;crawling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#crawling&quot;&gt;¶&lt;/a&gt;Crawling&lt;/h2&gt;
&lt;p&gt;The crawling must be reliable, fast and robust, and also respect the decision of some authors not wanting their pages crawled. Originally, it took a week or more, so simultaneous execution became a must.&lt;/p&gt;
&lt;p&gt;Back in 1998, Google had between 3 and 4 crawlers running at 100 web pages per second maximum. These were implemented in Python.&lt;/p&gt;
&lt;p&gt;The crawled pages need parsing to deal with typos or formatting issues.&lt;/p&gt;
&lt;h2 id=&quot;indexing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#indexing&quot;&gt;¶&lt;/a&gt;Indexing&lt;/h2&gt;
&lt;p&gt;Indexing is about putting the pages into barrels, converting words into word identifiers, and occurences into hit lists.&lt;/p&gt;
&lt;p&gt;Once indexing is done, sorting of the barrels happens to have them ordered by word identifier, producing the inverted index. This process also had to be done in parallel over many machines, or would otherwise have been too slow.&lt;/p&gt;
&lt;h2 id=&quot;searching&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#searching&quot;&gt;¶&lt;/a&gt;Searching&lt;/h2&gt;
&lt;p&gt;We need to find quality results efficiently. Plenty of weights are considered nowadays, but at its heart, PageRank is used. It is the algorithm they use to map the web, which is formally defined as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;8e1e61b119e107fcb4bdd7e78f649985.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;PR(A) = (1-d) + d(PR(T1)/C(T1) + … + PR(Tn)/C(Tn))&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; is a given page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&amp;lt;sub&amp;gt;n&amp;lt;/sub&amp;gt;&lt;/code&gt; are pages that point to A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; is the damping factor in the range &lt;code&gt;[0, 1]&lt;/code&gt; (often 0.85)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C(A)&lt;/code&gt; is the number of links going out of page &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PR(A)&lt;/code&gt; is the page rank of page &lt;code&gt;A&lt;/code&gt;
This formula indicates the probability that a random surfer visits a certain page, and &lt;code&gt;1 - d&lt;/code&gt; is used to indicate when it will «get bored» and stop surfing. More intuitively, the page rank of a page will grow as more pages link to it, or the few that link to it have high page rank.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The anchor text in the links also help provide a better description and helps indexing for even better results.&lt;/p&gt;
&lt;p&gt;While searching, the concern is disk I/O which takes up most of the time. Caching is very important to improve performance up to 30 times.&lt;/p&gt;
&lt;p&gt;Now, in order to turn user queries into something we can search, we must parse the query and convert the words into word identifiers.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;¶&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Google is designed to be a efficient, scalable, high-quality search engine. There are still bottlenecks in CPU, memory, disk speed and network I/O, but major data structures are used to make efficient use of the resources.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf&quot;&gt;The anatomy of a large-scale hypertextual Web search engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.site.uottawa.ca/%7Ediana/csi4107/Google_SearchEngine.pdf&quot;&gt;The Anatomy of a Large-Scale Hypertextual Web Search Engine (slides)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Privado: PC-Crawler evaluation 2</title><id>dist/pc-crawler-evaluation-2/index.html</id><updated>2020-03-27T23:00:00+00:00</updated><published>2020-03-15T23:00:00+00:00</published><summary>As the student </summary><content type="html" src="dist/pc-crawler-evaluation-2/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Privado: PC-Crawler evaluation 2&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;As the student &lt;code&gt;a(i)&lt;/code&gt; where &lt;code&gt;i = 9&lt;/code&gt;, I have been assigned to evaluate students &lt;code&gt;a(i - 1)&lt;/code&gt; and &lt;code&gt;a(i - 2)&lt;/code&gt;, these being:&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-16&lt;br&gt;
Modified 2020-03-28&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;a08: Classmate (username)&lt;/li&gt;
&lt;li&gt;a07: Classmate (username)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The evaluation is done according to the criteria described in Segunda entrega del PC-Crawler.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;classmate_s_evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation&quot;&gt;¶&lt;/a&gt;Classmate’s evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: A.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the evaluation of Crawler – Thesauro.&lt;/p&gt;
&lt;p&gt;It’s a well-written post, properly using WordPress code blocks, and they explain the process of improving the code and what it does. Because there are no noticeable issues with the post, they get the highest grading.&lt;/p&gt;
&lt;h2 id=&quot;classmate_s_evaluation_2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation_2&quot;&gt;¶&lt;/a&gt;Classmate’s evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: B.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the evaluation of Actividad 2-Crawler.&lt;/p&gt;
&lt;p&gt;They start with an introduction on what they will do.&lt;/p&gt;
&lt;p&gt;Next, they show the code they have written, also describing what it does, although they don’t explain &lt;em&gt;why&lt;/em&gt; they chose the data structures they used.&lt;/p&gt;
&lt;p&gt;The style of the code leaves a lot to be desired, and they should have embedded the code in the post instead of taking screenshots. People that rely on screen readers will not be able to see the code.&lt;/p&gt;
&lt;p&gt;I have graded them B and not A for this last reason.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>What is ElasticSearch and why should you care?</title><id>dist/what-is-elasticsearch-and-why-should-you-care/index.html</id><updated>2020-03-26T23:00:00+00:00</updated><published>2020-03-17T23:00:00+00:00</published><summary>ElasticSearch is a giant search index with powerful analytics capabilities. It’s like a database and search engine on steroids, really easy and fast to get up and running. One can think of it as your own Google, a search engine with analytics.</summary><content type="html" src="dist/what-is-elasticsearch-and-why-should-you-care/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;What is ElasticSearch and why should you care?&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;ElasticSearch is a giant search index with powerful analytics capabilities. It’s like a database and search engine on steroids, really easy and fast to get up and running. One can think of it as your own Google, a search engine with analytics.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-18&lt;br&gt;
Modified 2020-03-27&lt;/div&gt;
&lt;p&gt;ElasticSearch is rich, stable, performs well, is well maintained, and able to scale to petabytes of any kind of data, whether it’s structured, semi-structured or not at all. It’s cost-effective and can be used to make business decisions.&lt;/p&gt;
&lt;p&gt;Or, described in 10 seconds:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Schema-free, REST &amp;amp; JSON based distributed document store
Open source: Apache License 2.0
Zero configuration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- Alex Reelsen&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;basic_capabilities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#basic_capabilities&quot;&gt;¶&lt;/a&gt;Basic capabilities&lt;/h2&gt;
&lt;p&gt;ElasticSearch lets you ask questions about your data, not just make queries. You may think SQL can do this too, but what’s important is making a pipeline of facets, and feed the results from query to query.&lt;/p&gt;
&lt;p&gt;Instead of changing your data, you can be flexible with your questions with no need to re-index it every time the questions change.&lt;/p&gt;
&lt;p&gt;ElasticSearch is not just to search for full-text data, either. It can search for structured data and return more than just the results. It also yields additional data, such as ranking, highlights, and allows for pagination.&lt;/p&gt;
&lt;p&gt;It doesn’t take a lot of configuration to get running, either, which can be a good boost on productivity.&lt;/p&gt;
&lt;h2 id=&quot;how_does_it_work_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how_does_it_work_&quot;&gt;¶&lt;/a&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;ElasticSearch depends on Java, and can work in a distributed cluster if you execute multiple instances. Data will be replicated and sharded as needed. The current version at the time of writing is 7.6.1, and it’s being developed fast!&lt;/p&gt;
&lt;p&gt;It also has support for plugins, with an ever-growing ecosystem and integration on many programming languages. Tools around it are being built around it, too, like Kibana which helps you visualize your data.&lt;/p&gt;
&lt;p&gt;The way you use it is through a JSON API, served over HTTP/S.&lt;/p&gt;
&lt;h2 id=&quot;how_can_i_use_it_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how_can_i_use_it_&quot;&gt;¶&lt;/a&gt;How can I use it?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/downloads/&quot;&gt;You can try ElasticSearch out for free on Elastic Cloud&lt;/a&gt;, however, it can also be &lt;a href=&quot;https://www.elastic.co/downloads/elasticsearch&quot;&gt;downloaded and ran offline&lt;/a&gt;, which is what we’ll do. Download the file corresponding to your operating system, unzip it, and execute the binary. Running it is as simple as that!&lt;/p&gt;
&lt;p&gt;Now you can make queries to it over HTTP, with for example &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -X PUT localhost:9200/orders/order/1 -d '
{
  &amp;quot;created_at&amp;quot;: &amp;quot;2013/09/05 15:45:10&amp;quot;,
  &amp;quot;items&amp;quot;: [
    {
      name: &amp;quot;HD Monitor&amp;quot;
    }
  ],
  &amp;quot;total&amp;quot;: 249.95
}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a new order with some information, such as when it was created, what items it contains, and the total cost of the order.&lt;/p&gt;
&lt;p&gt;You can then query or filter as needed, script it or even create statistics.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/sKnkQSec1U0&quot;&gt;YouTube – What is Elasticsearch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/yWNiRC_hUAw&quot;&gt;YouTube – GOTO 2013 • Elasticsearch – Beyond Full-text Search • Alex Reelsen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/kibana&quot;&gt;Kibana – Your window into the Elastic Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/index.html&quot;&gt;Elastic Stack and Product Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Privado: NoSQL evaluation</title><id>dist/nosql-evaluation/index.html</id><updated>2020-03-26T23:00:00+00:00</updated><published>2020-03-15T23:00:00+00:00</published><summary>I have decided to evaluate Classmate‘s post and Classmate‘s post, because they review databases I have not seen or used before, and I think it would be interesting to see new ones.</summary><content type="html" src="dist/nosql-evaluation/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Privado: NoSQL evaluation&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;I have decided to evaluate Classmate‘s post and Classmate‘s post, because they review databases I have not seen or used before, and I think it would be interesting to see new ones.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-16&lt;br&gt;
Modified 2020-03-27&lt;/div&gt;
&lt;p&gt;The evaluation is based on the requirements defined by Trabajos en grupo sobre Bases de Datos NoSQL:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1ª entrada:&lt;/strong&gt; Descripción de la finalidad de la tecnología y cómo funciona o trabaja la BD NoSQL, sus características, la arista que ocupa en el Teorema CAP, de dónde se descarga, y cómo se instala.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- Teacher&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;classmate_s_evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation&quot;&gt;¶&lt;/a&gt;Classmate’s evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: A.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post I have evaluated is BB.DD. NoSQL: Voldemort 1ª Fase.&lt;/p&gt;
&lt;p&gt;The post doesn’t start very well, because the first sentence has (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;En él repasaremos en qué consiste &lt;strong&gt;MongoDB&lt;/strong&gt;, sus características, y cómo se instala, entre otros.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- Classmate&lt;/p&gt;
&lt;p&gt;…yet the post is about Voldemort!&lt;/p&gt;
&lt;p&gt;The post does detail how it works, its architecture, corner in the CAP theorem, download and installation.&lt;/p&gt;
&lt;p&gt;I have graded the post with A because I think it meets all the requirements, even if they slipped a bit in the beginning.&lt;/p&gt;
&lt;h2 id=&quot;classmate_s_evaluation_2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation_2&quot;&gt;¶&lt;/a&gt;Classmate’s evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: A.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post I have evaluted is Raven.&lt;/p&gt;
&lt;p&gt;They have done a good job describing the project’s goals, corner in the CAP theorem, download, and provide an extensive installation section.&lt;/p&gt;
&lt;p&gt;They don’t seem to use some of WordPress features, such as lists, but otherwise the post is good and deserves an A grading.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Integrating Apache Tika into our Crawler</title><id>dist/integrating-apache-tika-into-our-crawler/index.html</id><updated>2020-03-24T23:00:00+00:00</updated><published>2020-03-17T23:00:00+00:00</published><summary>In our last crawler post</summary><content type="html" src="dist/integrating-apache-tika-into-our-crawler/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Integrating Apache Tika into our Crawler&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;&lt;a href=&quot;/blog/ribw/upgrading-our-baby-crawler/&quot;&gt;In our last crawler post&lt;/a&gt;, we detailed how our crawler worked, and although it did a fine job, it’s time for some extra upgrading.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-18&lt;br&gt;
Modified 2020-03-25&lt;/div&gt;
&lt;h2 class=&quot;title&quot; id=&quot;what_kind_of_upgrades_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_kind_of_upgrades_&quot;&gt;¶&lt;/a&gt;What kind of upgrades?&lt;/h2&gt;
&lt;p&gt;A small but useful one. We are adding support for file types that contain text but cannot be processed by normal text editors because they are structured and not just plain text (such as PDF files, Excel, Word documents…).&lt;/p&gt;
&lt;p&gt;And for this task, we will make use of the help offered by &lt;a href=&quot;https://tika.apache.org/&quot;&gt;Tika&lt;/a&gt;, our friendly Apache tool.&lt;/p&gt;
&lt;h2 id=&quot;what_is_tika_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_is_tika_&quot;&gt;¶&lt;/a&gt;What is Tika?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tika.apache.org/&quot;&gt;Tika&lt;/a&gt; is a set of libraries offered by &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Apache_Software_Foundation&quot;&gt;The Apache Software Foundation&lt;/a&gt; that we can include in our project in order to extract the text and metadata of files from a &lt;a href=&quot;https://tika.apache.org/1.24/formats.html&quot;&gt;long list of supported formats&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;changes_in_the_code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#changes_in_the_code&quot;&gt;¶&lt;/a&gt;Changes in the code&lt;/h2&gt;
&lt;p&gt;Not much has changed in the structure of the crawler, we simply have added a new method in &lt;code&gt;Utils&lt;/code&gt; that uses the class &lt;code&gt;Tika&lt;/code&gt; from the previously mentioned library so as to process and extract the text of more filetypes.&lt;/p&gt;
&lt;p&gt;Then, we use this text just like we would for our standard text file (checking the thesaurus and adding it to the word map) and voilà! We have just added support for a big range of file types.&lt;/p&gt;
&lt;h2 id=&quot;incorporating_gradle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#incorporating_gradle&quot;&gt;¶&lt;/a&gt;Incorporating Gradle&lt;/h2&gt;
&lt;p&gt;In order for the previous code to work, we need to make use of external libraries. To make this process easier and because the project is growing, we decided to use &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;, a build system that can be used for projects in various programming languages, such as Java.&lt;/p&gt;
&lt;p&gt;We followed their &lt;a href=&quot;https://guides.gradle.org/building-java-applications/&quot;&gt;guide to Building Java Applications&lt;/a&gt;, and in a few steps added the required &lt;code&gt;.gradle&lt;/code&gt; files. Now we can compile and run the code without having to worry about juggling with Java and external dependencies in a single command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew run
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;download&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download&quot;&gt;¶&lt;/a&gt;Download&lt;/h2&gt;
&lt;p&gt;And here you can download the final result:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;download removed&lt;/em&gt;&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Cassandra: Basic Operations and Architecture</title><id>dist/nosql-databases-basic-operations-and-architecture/index.html</id><updated>2020-03-23T23:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>This is the second post in the NoSQL Databases series, with a brief description on the basic operations (such as insertion, retrieval, indexing…), and complete execution along with the data model / architecture.</summary><content type="html" src="dist/nosql-databases-basic-operations-and-architecture/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Cassandra: Basic Operations and Architecture&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This is the second post in the NoSQL Databases series, with a brief description on the basic operations (such as insertion, retrieval, indexing…), and complete execution along with the data model / architecture.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-03-24&lt;/div&gt;
&lt;p&gt;Other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/nosql-databases-an-introduction/&quot;&gt;Cassandra: an Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/nosql-databases-basic-operations-and-architecture/&quot;&gt;Cassandra: Basic Operations and Architecture&lt;/a&gt; (this post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Cassandra uses it own Query Language for managing the databases, it is known as **CQL **(&lt;strong&gt;Cassandra Query Language&lt;/strong&gt;). Cassandra stores data in &lt;strong&gt;&lt;em&gt;tables&lt;/em&gt;&lt;/strong&gt;, as in relational databases, and these tables are grouped in &lt;strong&gt;&lt;em&gt;keyspaces&lt;/em&gt;&lt;/strong&gt;. A keyspace defines a number of options that applies to all the tables it contains. The most used option is the **replication strategy. **It is recommended to have only one keyspace by application.&lt;/p&gt;
&lt;p&gt;It is important to mention that &lt;strong&gt;tables and keyspaces&lt;/strong&gt; are** case insensitive**, so myTable is equivalent to mytable, but it is possible to &lt;strong&gt;force case sensitivity&lt;/strong&gt; using &lt;strong&gt;double-quotes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To begin with the basic operations it is necessary to deploy Cassandra:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open a terminal in the root of the Apache Cassandra folder downloaded in the previous post.&lt;/li&gt;
&lt;li&gt;Run the command:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;$ bin/cassandra
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once Cassandra is deployed, it is time to open a** CQL Shell**, in &lt;strong&gt;other terminal&lt;/strong&gt;, with the command: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/cqlsh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is possible to check if Cassandra is deployed if the SQL Shell prints the next message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;uwqQgQte-cuYb_pePFOuY58re23kngrDKNgL1qz4yOfnBDZkqMIH3fFuCrye.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;CQL Shell&lt;/em&gt;&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;create_insert&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create_insert&quot;&gt;¶&lt;/a&gt;Create/Insert&lt;/h2&gt;
&lt;h3 id=&quot;ddl_data_definition_language_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ddl_data_definition_language_&quot;&gt;¶&lt;/a&gt;DDL (Data Definition Language)&lt;/h3&gt;
&lt;h4 id=&quot;create_keyspace&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create_keyspace&quot;&gt;¶&lt;/a&gt;Create keyspace&lt;/h4&gt;
&lt;p&gt;A keyspace is created using a **CREATE KEYSPACE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ **CREATE** KEYSPACE [ **IF** **NOT** **EXISTS** ] keyspace_name **WITH** options;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The supported “&lt;strong&gt;options&lt;/strong&gt;” are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“&lt;strong&gt;replication&lt;/strong&gt;”: this is **mandatory **and defines the &lt;strong&gt;replication strategy&lt;/strong&gt; and the &lt;strong&gt;replication factor&lt;/strong&gt; (the number of nodes that will have a copy of the data). Within this option there is a property called “&lt;strong&gt;class&lt;/strong&gt;” in which the &lt;strong&gt;replication strategy&lt;/strong&gt; is specified (“SimpleStrategy” or “NetworkTopologyStrategy”)&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;durable_writes&lt;/strong&gt;”: this is &lt;strong&gt;not mandatory&lt;/strong&gt; and it is possible to use the &lt;strong&gt;commit logs for updates&lt;/strong&gt;.
Attempting to create an already existing keyspace will return an error unless the **IF NOT EXISTS **directive is used. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The example associated to this statement is create a keyspace with name “test_keyspace” with “SimpleStrategy” as “class” of replication and a “replication_factor” of 3.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**CREATE** KEYSPACE test_keyspace
    **WITH** **replication** = {'class': 'SimpleStrategy',
                        'replication_factor' : 3};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The **USE **statement allows to &lt;strong&gt;change&lt;/strong&gt; the current &lt;strong&gt;keyspace&lt;/strong&gt;. The syntax of this statement is very simple: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**USE** keyspace_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;RDWIG2RwvEevUFQv6TGFtGzRm4_9ERpxPf0feriflaj3alvWw3FEIAr_ZdF1.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;USE statement&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to get the metadata from a keyspace with the **DESCRIBE **statement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DESCRIBE** KEYSPACES | KEYSPACE keyspace_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;create_table&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create_table&quot;&gt;¶&lt;/a&gt;Create table&lt;/h4&gt;
&lt;p&gt;Creating a new table uses the **CREATE TABLE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**CREATE** **TABLE** [ **IF** **NOT** **EXISTS** ] table_name
    '('
        column_definition
        ( ',' column_definition )*
        [ ',' **PRIMARY** **KEY** '(' primary_key ')' ]
    ')' [ **WITH** table_options ];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With “column_definition” as: column_name cql_type [ STATIC ] [ PRIMARY KEY]; “primary_key” as: partition_key [ ‘,’ clustering_columns ]; and “table_options” as: COMPACT STORAGE [ AND table_options ] or CLUSTERING ORDER BY ‘(‘ clustering_order ‘)’ [ AND table_options ] or “options”.&lt;/p&gt;
&lt;p&gt;Attempting to create an already existing table will return an error unless the &lt;strong&gt;IF NOT EXISTS&lt;/strong&gt; directive is used.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;CQL types&lt;/strong&gt; are described in the References section.&lt;/p&gt;
&lt;p&gt;For example, we are going to create a table called “species_table” in the keyspace “test_keyspace” in which we will have a “species” text (as PRIMARY KEY), a “common_name” text, a “population” varint, a “average_size” int and a “sex” text. Besides, we are going to add a comment to the table: “Some species records”;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**CREATE** **TABLE** species_table (
    species text **PRIMARY** **KEY**,
    common_name text,
    population varint,
    average_size **int**,
    sex text,
) **WITH** **comment**='Some species records';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is also possible to get the metadata from a table with the **DESCRIBE **statement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DESCRIBE** **TABLES** | **TABLE** [keyspace_name.]table_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;dml_data_manipulation_language_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dml_data_manipulation_language_&quot;&gt;¶&lt;/a&gt;DML (Data Manipulation Language)&lt;/h3&gt;
&lt;h4 id=&quot;insert_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#insert_data&quot;&gt;¶&lt;/a&gt;Insert data&lt;/h4&gt;
&lt;p&gt;Inserting data for a row is done using an **INSERT **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**INSERT** **INTO** table_name ( names_values | json_clause )
                      [ **IF** **NOT** **EXISTS** ]
                      [ **USING** update_parameter ( **AND** update_parameter )* ];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where “names_values” is: names VALUES tuple_literal; “json_clause” is: JSON string [ DEFAULT ( NULL | UNSET ) ]; and “update_parameter” is usually: TTL.&lt;/p&gt;
&lt;p&gt;For example we are going to use both VALUES and JSON clauses to insert data in the table “species_table”. In the VALUES clause it is necessary to supply the list of columns, not as in the JSON clause that is optional.&lt;/p&gt;
&lt;p&gt;Note: TTL (Time To Live) and Timestamp are metrics for expiring data, so, when the time set is passed, the operation is expired.&lt;/p&gt;
&lt;p&gt;In the VALUES clause we are going to insert a new specie called “White monkey”, with an average size of 3, its common name is “Copito de nieve”, population 0 and sex “male”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**INSERT** **INTO** species_table (species, common_name, population, average_size, sex)
                **VALUES** ('White monkey', 'Copito de nieve', 0, 3, 'male');
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the JSON clause we are going to insert a new specie called “Cloned sheep”, with an average size of 1, its common name is “Dolly the sheep”, population 0 and sex “female”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**INSERT** **INTO** species_table JSON '{&amp;quot;species&amp;quot;: &amp;quot;Cloned Sheep&amp;quot;,
                              &amp;quot;common_name&amp;quot;: &amp;quot;Dolly the Sheep&amp;quot;,
                              &amp;quot;average_size&amp;quot;:1,
                              &amp;quot;population&amp;quot;:0,
                              &amp;quot;sex&amp;quot;: &amp;quot;female&amp;quot;}';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: all updates for an **INSERT **are applied **atomically **and in &lt;strong&gt;isolation.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;read&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#read&quot;&gt;¶&lt;/a&gt;Read&lt;/h2&gt;
&lt;p&gt;Querying data from data is done using a **SELECT **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**SELECT** [ JSON | **DISTINCT** ] ( select_clause | '*' )
                      **FROM** table_name
                      [ **WHERE** where_clause ]
                      [ **GROUP** **BY** group_by_clause ]
                      [ **ORDER** **BY** ordering_clause ]
                      [ PER **PARTITION** **LIMIT** (**integer** | bind_marker) ]
                      [ **LIMIT** (**integer** | bind_marker) ]
                      [ ALLOW FILTERING ];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The **CQL SELECT **statement is very **similar **to the **SQL SELECT **statement due to the fact that both allows filtering (&lt;strong&gt;WHERE&lt;/strong&gt;), grouping data (&lt;strong&gt;GROUP BY&lt;/strong&gt;), ordering the data (&lt;strong&gt;ORDER BY&lt;/strong&gt;) and limit the number of data (&lt;strong&gt;LIMIT&lt;/strong&gt;). Besides, **CQL offers **a **limit per partition **and allow the **filtering **of &lt;strong&gt;data&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note: as in SQL it it possible to set alias to the data with the statement &lt;strong&gt;AS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example we are going to retrieve all the information about those values from the tables “species_table” which “sex” is “male”. Allow filtering is mandatory when there is a WHERE statement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**SELECT** * **FROM** species_table **WHERE** sex = 'male' ALLOW FILTERING;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;s6GrKIGATvOSD7oGRNScUU5RnLN_-3X1JXvnVi_wDT_hrmPMZdnCdBI8DpIJ.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;SELECT statement&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, we are going to test the SELECT JSON statement. For this, we are going to retrieve only the species name with a population of 0. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**SELECT** JSON species **FROM** species_table **WHERE** population = 0 ALLOW FILTERING;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;Up_eHlqKQp2RI5XIbgPOvj1B5J3gLxz7v7EI0NDRgezQTipecdfDT6AQoso0.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;SELECT JSON statement&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;¶&lt;/a&gt;Update&lt;/h2&gt;
&lt;h3 id=&quot;ddl_data_definition_language__2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ddl_data_definition_language__2&quot;&gt;¶&lt;/a&gt;DDL (Data Definition Language)&lt;/h3&gt;
&lt;h4 id=&quot;alter_keyspace&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#alter_keyspace&quot;&gt;¶&lt;/a&gt;Alter keyspace&lt;/h4&gt;
&lt;p&gt;The statement **ALTER KEYSPACE **allows to modify the options of a keyspace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**ALTER** KEYSPACE keyspace_name **WITH** options;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: the supported **options **are the same than for creating a keyspace, “&lt;strong&gt;replication&lt;/strong&gt;” and “&lt;strong&gt;durable_writes&lt;/strong&gt;”.&lt;/p&gt;
&lt;p&gt;The example associated to this statement is to modify the keyspace with name “test_keyspace” and set a “replication_factor” of 4.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**ALTER** KEYSPACE test_keyspace
    **WITH** **replication** = {'class': 'SimpleStrategy', 'replication_factor' : 4};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;alter_table&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#alter_table&quot;&gt;¶&lt;/a&gt;Alter table&lt;/h4&gt;
&lt;p&gt;Altering an existing table uses the **ALTER TABLE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**ALTER** **TABLE** table_name alter_table_instruction;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where “alter_table_instruction” can be: ADD column_name cql_type ( ‘,’ column_name cql_type )&lt;em&gt;; or DROP column_name ( column_name )&lt;/em&gt;; or WITH options&lt;/p&gt;
&lt;p&gt;The example associated to this statement is to ADD a new column to the table “species_table”, called “extinct” with type “boolean”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**ALTER** **TABLE** species_table **ADD** extinct **boolean**;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another example is to DROP the column called “sex” from the table “species_table”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**ALTER** **TABLE** species_table **DROP** sex;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, alter the comment with the WITH clause and set the comment to “All species records”. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**ALTER** **TABLE** species_table **WITH** **comment**='All species records';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These changes can be checked with the **DESCRIBE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DESCRIBE** **TABLE** species_table;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;xebKPqkWkn97YVHpRVXZYWvRUfeRUyCH-vPDs67aFaEeU53YTRbDOFscOlAr.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;DESCRIBE table&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;dml_data_manipulation_language__2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dml_data_manipulation_language__2&quot;&gt;¶&lt;/a&gt;DML (Data Manipulation Language)&lt;/h3&gt;
&lt;h4 id=&quot;update_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update_data&quot;&gt;¶&lt;/a&gt;Update data&lt;/h4&gt;
&lt;p&gt;Updating a row is done using an **UPDATE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**UPDATE** table_name
[ **USING** update_parameter ( **AND** update_parameter )* ]
**SET** assignment ( ',' assignment )*
**WHERE** where_clause
[ **IF** ( **EXISTS** | condition ( **AND** condition )*) ];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where the update_parameter is: ( TIMESTAMP | TTL) (integer | bind_marker)&lt;/p&gt;
&lt;p&gt;It is important to mention that the **WHERE **clause is used to select the row to update and **must &lt;strong&gt;include ** all columns&lt;/strong&gt; composing the &lt;strong&gt;PRIMARY KEY.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are going to test this statement updating the column “extinct” to true to the column with name ‘White monkey’.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**UPDATE** species_table **SET** extinct = **true** **WHERE** species='White monkey';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;IcaCe6VEC5c0ZQIygz-CiclzFyt491u7xPMg2muJLR8grmqaiUzkoQsVCoHf.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;SELECT statement&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;delete&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete&quot;&gt;¶&lt;/a&gt;Delete&lt;/h2&gt;
&lt;h3 id=&quot;ddl_data_definition_language__3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ddl_data_definition_language__3&quot;&gt;¶&lt;/a&gt;DDL (Data Definition Language)&lt;/h3&gt;
&lt;h4 id=&quot;drop_keyspace&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#drop_keyspace&quot;&gt;¶&lt;/a&gt;Drop keyspace&lt;/h4&gt;
&lt;p&gt;Dropping a keyspace can be done using the **DROP KEYSPACE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DROP** KEYSPACE [ **IF** **EXISTS** ] keyspace_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, drop the keyspace called “test_keyspace_2” if it exists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DROP** KEYSPACE **IF** **EXISTS** test_keyspace_2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this keyspace does not exists, this sentence will do nothing.&lt;/p&gt;
&lt;h4 id=&quot;drop_table&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#drop_table&quot;&gt;¶&lt;/a&gt;Drop table&lt;/h4&gt;
&lt;p&gt;Dropping a table uses the **DROP TABLE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DROP** **TABLE** [ **IF** **EXISTS** ] table_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, drop the table called “species_2” if it exists: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DROP** **TABLE** **IF** **EXISTS** species_2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this table does not exists, this sentence will do nothing.&lt;/p&gt;
&lt;h4 id=&quot;truncate_table_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#truncate_table_&quot;&gt;¶&lt;/a&gt;Truncate (table)&lt;/h4&gt;
&lt;p&gt;A table can be truncated using the **TRUNCATE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**TRUNCATE** [ **TABLE** ] table_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not execute this command now, because if you do it, you will need to insert the previous data again.&lt;/p&gt;
&lt;p&gt;Note: as tables are the only object that can be truncated the keyword TABLE can be omitted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;FOkhfpxlWFQCzcdfeWxLTy7wx5inDv0xwVeVhE79Pqtk3yYzWsZJnz_SBhUi.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;TRUNCATE statement&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;dml_data_manipulation_language__3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dml_data_manipulation_language__3&quot;&gt;¶&lt;/a&gt;DML (Data Manipulation Language)&lt;/h3&gt;
&lt;h4 id=&quot;delete_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete_data&quot;&gt;¶&lt;/a&gt;Delete data&lt;/h4&gt;
&lt;p&gt;Deleting rows or parts of rows uses the **DELETE **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DELETE** [ simple_selection ( ',' simple_selection ) ]
                      **FROM** table_name
                      [ **USING** update_parameter ( **AND** update_parameter )* ]
                      **WHERE** where_clause
                      [ **IF** ( **EXISTS** | condition ( **AND** condition )*) ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are going to delete the value of the column “average_size” from “Cloned Sheep”. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DELETE** average_size **FROM** species_table **WHERE** species = 'Cloned Sheep';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;CyuQokVL5J9TAelq-WEWhNl6kFtbIYs0R1AeU5NX4EkG-YQI81mNHdnf2yWN.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;DELETE value statement&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And we are going to delete the same row as mentioned before. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DELETE** **FROM** species_table **WHERE** species = 'Cloned Sheep';
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;jvQ5cXJ5GTVQ6giVhBEpPJmrJw-zwKKyB9nsTm5PRcGSTzkmh-WO4kTeuLpB.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;DELETE row statement&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;batch&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#batch&quot;&gt;¶&lt;/a&gt;Batch&lt;/h2&gt;
&lt;p&gt;Multiple &lt;strong&gt;INSERT&lt;/strong&gt;, **UPDATE **and **DELETE **can be executed in a &lt;strong&gt;single statement&lt;/strong&gt; by grouping them through a **BATCH **statement.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**BEGIN** [ UNLOGGED | COUNTER ] BATCH
                            [ **USING** update_parameter ( **AND** update_parameter )* ]
                            modification_statement ( ';' modification_statement )*
                            APPLY BATCH;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where modification_statement can be a insert_statement or an update_statement or a delete_statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**UNLOGGED **means that either all operations in a batch eventually complete or none will.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COUNTER&lt;/strong&gt; means that the updates are not idempotent, so each time we execute the updates in a batch, we will have different results.
For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;**BEGIN** BATCH
   **INSERT** **INTO** species_table (species, common_name, population, average_size, extinct)
                **VALUES** ('Blue Shark', 'Tiburillo', 30, 10, **false**);
   **INSERT** **INTO** species_table (species, common_name, population, average_size, extinct)
                **VALUES** ('Cloned sheep', 'Dolly the Sheep', 1, 1, **true**);
   **UPDATE** species_table **SET** population = 2 **WHERE** species='Cloned sheep';
   **DELETE** **FROM** species_table **WHERE** species =  'White monkey';
APPLY BATCH;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;EL9Dac26o0FqkVoeAKmopEKQe0wWq-xYI14b9RzGxtUkFJA3i2eTiR6qkuuJ.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;BATCH statement&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;index&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#index&quot;&gt;¶&lt;/a&gt;Index&lt;/h2&gt;
&lt;p&gt;CQL support creating secondary indexes on tables, allowing queries on the table to use those indexes. &lt;/p&gt;
&lt;p&gt;**Creating **a secondary index on a table uses the **CREATE INDEX **statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**CREATE** [ CUSTOM ] **INDEX** [ **IF** **NOT** **EXISTS** ] [ index_name ]
                                **ON** table_name '(' index_identifier ')'
                                [ **USING** string [ **WITH** OPTIONS = map_literal ] ];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example we are going to create a index called “population_idx” that is related to the column “population” in the table “species_table”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**CREATE** **INDEX** population_idx **ON** species_table (population);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**Dropping **a secondary index uses the &lt;strong&gt;DROP INDEX&lt;/strong&gt; statement: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DROP** **INDEX** [ **IF** **EXISTS** ] index_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we are going to drop the previous index: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**DROP** **INDEX** **IF** **EXISTS** population_idx;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cassandra.apache.org/doc/latest/cql/ddl.html&quot;&gt;Cassandra CQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://techdifferences.com/difference-between-ddl-and-dml-in-dbms.html&quot;&gt;Differences between DML and DDL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.datastax.com/en/dse/5.1/cql/cql/cql_reference/cqlReferenceTOC.html&quot;&gt;Datastax CQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cassandra.apache.org/doc/latest/cql/types.html#grammar-token-cql-type&quot;&gt;Cassandra CQL Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cassandra.apache.org/doc/latest/cql/indexes.html&quot;&gt;Cassandra Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Upgrading our Baby Crawler</title><id>dist/upgrading-our-baby-crawler/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-03-10T23:00:00+00:00</published><summary>In our </summary><content type="html" src="dist/upgrading-our-baby-crawler/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Upgrading our Baby Crawler&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;In our &lt;a href=&quot;/blog/ribw/build-your-own-pc/&quot;&gt;last post on this series&lt;/a&gt;, we presented the code for our Personal Crawler. However, we didn’t quite explain what a crawler even is! We will use this moment to go a bit more in-depth, and make some upgrades to it.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-11&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;h2 class=&quot;title&quot; id=&quot;what_is_a_crawler_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_is_a_crawler_&quot;&gt;¶&lt;/a&gt;What is a Crawler?&lt;/h2&gt;
&lt;p&gt;A crawler is a program whose job is to analyze documents and extract data from them. For example, search engines like &lt;a href=&quot;http://duckduckgo.com/&quot;&gt;DuckDuckGo&lt;/a&gt;, &lt;a href=&quot;https://bing.com/&quot;&gt;Bing&lt;/a&gt; or &lt;a href=&quot;http://google.com/&quot;&gt;Google&lt;/a&gt; all have crawlers to analyze websites and build a database around them. They are some kind of «trackers», because they keep track of everything they find.&lt;/p&gt;
&lt;p&gt;Their basic behaviour can be described as follows: given a starting list of URLs, follow them all and identify hyperlinks inside the documents. Add these to the list of links to follow, and repeat &lt;em&gt;ad infinitum&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This lets us create an index to quickly search across them all.&lt;/li&gt;
&lt;li&gt;We can also identify broken links.&lt;/li&gt;
&lt;li&gt;We can gather any other type of information that we found.
Our crawler will work offline, within our own computer, scanning the text documents it finds on the root we tell it to scan.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;design_decissions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#design_decissions&quot;&gt;¶&lt;/a&gt;Design Decissions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We will use Java. Its runtime is quite ubiquitous, so it should be able to run in virtually anywhere. The language is typed, which helps catch errors early on.&lt;/li&gt;
&lt;li&gt;Our solution is iterative. While recursion can be seen as more elegants by some, iterative solutions are often more performant with less need for optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#requirements&quot;&gt;¶&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;p&gt;If you don’t have Java installed yet, you can &lt;a href=&quot;https://java.com/en/download/&quot;&gt;Download Free Java Software&lt;/a&gt; from Oracle’s site. To compile the code, the &lt;a href=&quot;https://www.oracle.com/java/technologies/javase-jdk8-downloads.html&quot;&gt;Java Development Kit&lt;/a&gt; is also necessary.&lt;/p&gt;
&lt;p&gt;We don’t depend on any other external libraries, for easier deployment and compilation.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementation&quot;&gt;¶&lt;/a&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Because the code was getting pretty large, it has been split into several files, and we have also upgraded it to use a Graphical User Interface instead! We decided to use Swing, based on the Java tutorial &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/&quot;&gt;Creating a GUI With JFC/Swing&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;app&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#app&quot;&gt;¶&lt;/a&gt;App&lt;/h3&gt;
&lt;p&gt;This file is the entry point of our application. Its job is to initialize the components, lay them out in the main panel, and connect the event handlers.&lt;/p&gt;
&lt;p&gt;Most widgets are pretty standard, and are defined as class variables. However, some variables are notable. The &lt;code&gt;[DefaultTableModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/table/DefaultTableModel.html)&lt;/code&gt; is used because it allows to &lt;a href=&quot;https://stackoverflow.com/a/22550106&quot;&gt;dynamically add rows&lt;/a&gt;, and we also have a &lt;code&gt;[SwingWorker](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html)&lt;/code&gt; subclass responsible for performing the word analysis (which is quite CPU intensive and should not be ran in the UI thread!).&lt;/p&gt;
&lt;p&gt;There’s a few utility methods to ease some common operations, such as &lt;code&gt;updateStatus&lt;/code&gt; which changes the status label in the main window, informing the user of the latest changes.&lt;/p&gt;
&lt;h3 id=&quot;thesaurus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thesaurus&quot;&gt;¶&lt;/a&gt;Thesaurus&lt;/h3&gt;
&lt;p&gt;A thesaurus is a collection of words or terms used to represent concepts. In literature this is commonly known as a dictionary.&lt;/p&gt;
&lt;p&gt;On the subject of this project, we are using a thesaurus based on how relevant is a word for the meaning of a sentence, filtering out those that barely give us any information.&lt;/p&gt;
&lt;p&gt;This file contains a simple thesaurus implementation, which can trivially be used as a normal or inverted thesaurus. However, we only treat it as inverted, and its job is loading itself and determining if words are valid or should otherwise be ignored.&lt;/p&gt;
&lt;h3 id=&quot;utils&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#utils&quot;&gt;¶&lt;/a&gt;Utils&lt;/h3&gt;
&lt;p&gt;Several utility functions used across the codebase.&lt;/p&gt;
&lt;h3 id=&quot;wordmap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wordmap&quot;&gt;¶&lt;/a&gt;WordMap&lt;/h3&gt;
&lt;p&gt;This file is the important one, and its implementation hasn’t changed much since our last post. Instances of a word map contain… wait for it… a map of words! It stores the mapping &lt;code&gt;word → count&lt;/code&gt; in memory, and offers methods to query the count of a word or iterate over the word count entries.&lt;/p&gt;
&lt;p&gt;It can be loaded from cache or told to analyze a root path. Once an instance is created, additional files could be analyzed one by one if desired.&lt;/p&gt;
&lt;h2 id=&quot;download&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download&quot;&gt;¶&lt;/a&gt;Download&lt;/h2&gt;
&lt;p&gt;The code was getting a bit too large to embed it within the blog post itself, so instead you can download it as a&lt;code&gt;.zip&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;download removed&lt;/em&gt;&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Cassandra: an Introduction</title><id>dist/cassandra-an-introduction/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>This is the first post in the Cassandra series, where we will introduce the Cassandra database system and take a look at its features and installation methods.</summary><content type="html" src="dist/cassandra-an-introduction/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Cassandra: an Introduction&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This is the first post in the Cassandra series, where we will introduce the Cassandra database system and take a look at its features and installation methods.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;p&gt;Other posts in this series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/ribw/cassandra-an-introduction/&quot;&gt;Cassandra: an Introduction&lt;/a&gt; (this post)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is co-authored wih Classmate.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&quot;image-container&quot;&gt;
&lt;img src=&quot;cassandra-database-e1584191543401.jpg&quot; alt=&quot;NoSQL database – Apache Cassandra – First delivery&quot; /&gt;
&lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;purpose_of_technology&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#purpose_of_technology&quot;&gt;¶&lt;/a&gt;Purpose of technology&lt;/h2&gt;
&lt;p&gt;Apache Cassandra is a &lt;strong&gt;NoSQL&lt;/strong&gt;, &lt;strong&gt;open-source&lt;/strong&gt;, &lt;strong&gt;distributed “key-value” database&lt;/strong&gt;. It allows &lt;strong&gt;large volumes of distributed data&lt;/strong&gt;. The main **goal **is provide &lt;strong&gt;linear scalability and availabilitywithout compromising performance&lt;/strong&gt;. Besides, Cassandra &lt;strong&gt;supports replication&lt;/strong&gt; across multiple datacenters, providing low latency. &lt;/p&gt;
&lt;h2 id=&quot;how_it_works&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how_it_works&quot;&gt;¶&lt;/a&gt;How it works&lt;/h2&gt;
&lt;p&gt;Cassandra’s distributed **architecture **is based on a series of &lt;strong&gt;equal nodes&lt;/strong&gt; that communicate with a &lt;strong&gt;P2P protocol&lt;/strong&gt; so that &lt;strong&gt;redundancy is maximum&lt;/strong&gt;. It offers robust support for multiple datacenters, with &lt;strong&gt;asynchronous replication&lt;/strong&gt; without the need for a master server. &lt;/p&gt;
&lt;p&gt;Besides, Cassandra’s &lt;strong&gt;data model consists of partitioning the rows&lt;/strong&gt;, which are rearranged into &lt;strong&gt;different tables&lt;/strong&gt;. The primary keys of each table have a first component that is the &lt;strong&gt;partition key&lt;/strong&gt;. Within a partition, the rows are grouped by the remaining columns of the key. The other columns can be indexed separately from the primary key.&lt;/p&gt;
&lt;p&gt;These tables can be &lt;strong&gt;created, deleted, updated and queried****at runtime without blocking&lt;/strong&gt; each other. However it does &lt;strong&gt;not support joins or subqueries&lt;/strong&gt;, but instead &lt;strong&gt;emphasizes denormalization&lt;/strong&gt; through features like collections.&lt;/p&gt;
&lt;p&gt;Nowadays, Cassandra uses its own query language called &lt;strong&gt;CQL&lt;/strong&gt; (&lt;strong&gt;Cassandra Query Language&lt;/strong&gt;), with a &lt;strong&gt;similar syntax to SQL&lt;/strong&gt;. It also allows access from &lt;strong&gt;JDBC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;s0GHpggGZXOFcdhypRWV4trU-PkSI6lukEv54pLZnoirh0GlDVAc4LamB1Dy.png&quot; alt=&quot;&quot; /&gt;
_ Cassandra architecture _&lt;/p&gt;
&lt;h2 id=&quot;features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#features&quot;&gt;¶&lt;/a&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decentralized&lt;/strong&gt;: there are &lt;strong&gt;no single points of failure&lt;/strong&gt;, every **node **in the cluster has the &lt;strong&gt;same role&lt;/strong&gt; and there is &lt;strong&gt;no master node&lt;/strong&gt;, so each node &lt;strong&gt;can service any request&lt;/strong&gt;, besides the data is distributed across the cluster.&lt;/li&gt;
&lt;li&gt;Supports **replication **and multiple replication of &lt;strong&gt;data center&lt;/strong&gt;: the replication strategies are &lt;strong&gt;configurable&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;**Scalability: **reading and writing performance increases linearly as new nodes are added, also &lt;strong&gt;new nodes&lt;/strong&gt; can be &lt;strong&gt;added without interrupting&lt;/strong&gt; application &lt;strong&gt;execution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault tolerance: data replication&lt;/strong&gt; is done **automatically **in several nodes in order to recover from failures. It is possible to &lt;strong&gt;replace failure nodes****without &lt;strong&gt;making&lt;/strong&gt; inactivity time or interruptions&lt;/strong&gt; to the application.&lt;/li&gt;
&lt;li&gt;**Consistency: **a choice of consistency level is provided for &lt;strong&gt;reading and writing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MapReduce support&lt;/strong&gt;: it is **integrated **with &lt;strong&gt;Apache Hadoop&lt;/strong&gt; to support MapReduce.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query language&lt;/strong&gt;: it has its own query language called **CQL (Cassandra Query Language) **&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;corner_in_cap_theorem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#corner_in_cap_theorem&quot;&gt;¶&lt;/a&gt;Corner in CAP theorem&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Apache Cassandra&lt;/strong&gt; is usually described as an “&lt;strong&gt;AP&lt;/strong&gt;” system because it guarantees &lt;strong&gt;availability&lt;/strong&gt; and &lt;strong&gt;partition/fault tolerance&lt;/strong&gt;. So it errs on the side of ensuring data availability even if this means &lt;strong&gt;sacrificing consistency&lt;/strong&gt;. But, despite this fact, Apache Cassandra &lt;strong&gt;seeks to satisfy all three requirements&lt;/strong&gt; (Consistency, Availability and Fault tolerance) simultaneously and can be &lt;strong&gt;configured to behave&lt;/strong&gt; like a “&lt;strong&gt;CP&lt;/strong&gt;” database, guaranteeing &lt;strong&gt;consistency and partition/fault tolerance&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;rf3n9LTOKCQVbx4qrn7NPSVcRcwE1LxR_khi-9Qc51Hcbg6BHHPu-0GZjUwD.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Cassandra in CAP Theorem&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;download&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#download&quot;&gt;¶&lt;/a&gt;Download&lt;/h2&gt;
&lt;p&gt;In order to download the file, with extension .tar.gz. you must visit the &lt;a href=&quot;https://cassandra.apache.org/download/&quot;&gt;download site&lt;/a&gt; and click on the file “&lt;a href=&quot;https://ftp.cixug.es/apache/cassandra/3.11.6/apache-cassandra-3.11.6-bin.tar.gz&quot;&gt;https://ftp.cixug.es/apache/cassandra/3.11.6/apache-cassandra-3.11.6-bin.tar.gz&lt;/a&gt;”. It is important to mention that the previous link is related to the 3.11.6 version.&lt;/p&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;¶&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;This database can only be installed on Linux distributions and Mac OS X systems, so, it is not possible to install it on Microsoft Windows.&lt;/p&gt;
&lt;p&gt;The first main requirement is having installed Java 8 in &lt;strong&gt;Ubuntu&lt;/strong&gt;, the OS that we will use. Therefore, the Java 8 installation is explained below. First open a terminal and execute the next command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install openjdk-8-jdk openjdk-8-jre
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to establish Java as a environment variable it is needed to open the file “/.bashrc”: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add at the end of it the path where Java is installed, as follows: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/
export PATH=$PATH:$JAVA_HOME/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, save the file and execute the next command, note that it does the same effect re-opening the terminal: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to check if the Java environment variable is set correctly, run the next command: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo $JAVA_HOME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;JUUmX5MIHynJR_K9EdCgKeJcpINeCGRRt2QRu4JLPtRhCVidOhcbWwVTQjyu.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;$JAVAHOME variable&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afterwards, it is possible to check the installed Java version with the command: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;z9v1-0hpZwjI4U5UZej9cRGN5-Y4AZl0WUPWyQ_-JlzTAIvZtTFPnKY2xMQ_.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Java version&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next requirement is having installed the latest version of Python 2.7. This can be checked with the command: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it is not installed, to install it, it is as simple as run the next command in the terminal: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: it is better to use “python2” instead of “python” because in that way, you force to user Python 2.7. Modern distributions will use Python 3 for the «python» command.&lt;/p&gt;
&lt;p&gt;Therefore, it is possible to check the installed Python version with the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;Ger5Vw_e1HIK84QgRub-BwGmzIGKasgiYb4jHdfRNRrvG4d6Msp_3Vk62-9i.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Python version&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once both requirements are ready, next step is to unzip the file previously downloaded, right click on the file and select “Extract here” or with the next command, on the directory where is the downloaded file. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -zxvf apache-cassandra-x.x.x-bin.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to check if the installation is completed, you can execute the next command, in the root folder of the project. This will start Cassandra in a single node. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/bin/cassandra
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is possible to make a get some data from Cassandra with CQL (Cassandra Query Language). To check this execute the next command in another terminal. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/bin/cqlsh localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once CQL is open, type the next sentence and check the result: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT cluster_name, listen_address from system.local;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output should be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;miUO60A-RtyEAOOVFJqlkPRC18H4RKUhot6RWzhO9FmtzgTPOYHFtwxqgZEf.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Sentence output&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Finally, the installation guide provided by the website of the database is attached in this &lt;a href=&quot;https://cassandra.apache.org/doc/latest/getting_started/installing.html&quot;&gt;installation guide&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://es.wikipedia.org/wiki/Apache_Cassandra&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datastax.com/blog/2019/05/how-apache-cassandratm-balances-consistency-availability-and-performance&quot;&gt;Datastax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.yugabyte.com/apache-cassandra-architecture-how-it-works-lightweight-transactions/&quot;&gt;yugabyte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Privado: PC-Crawler evaluation</title><id>dist/pc-crawler-evaluation/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-03-03T23:00:00+00:00</published><summary>As the student </summary><content type="html" src="dist/pc-crawler-evaluation/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Privado: PC-Crawler evaluation&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;As the student &lt;code&gt;a(i)&lt;/code&gt; where &lt;code&gt;i = 9&lt;/code&gt;, I have been assigned to evaluate students &lt;code&gt;a(i + 3)&lt;/code&gt; and &lt;code&gt;a(i + 4)&lt;/code&gt;, these being:&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-04&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;a12: Classmate (username)&lt;/li&gt;
&lt;li&gt;a13: Classmate (username)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;title&quot; id=&quot;classmate_s_evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation&quot;&gt;¶&lt;/a&gt;Classmate’s evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: B.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think they mix up a bit their considerations with program usage and how it works, not justifying why the considerations are the ones they chose, or what the alternatives would be.&lt;/p&gt;
&lt;p&gt;The implementation notes are quite well-written. Even someone without knowledge of Java’s syntax can read the notes and more or less make sense of what’s going on, with the relevant code excerpts on each section.&lt;/p&gt;
&lt;p&gt;Implementation-wise, some methods could definitely use some improvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;esExtensionTextual&lt;/code&gt; is overly complicated. It could use a &lt;code&gt;for&lt;/code&gt; loop and Java’s &lt;code&gt;String.endsWith&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calcularFrecuencia&lt;/code&gt; has quite some duplication (e.g. &lt;code&gt;this.getFicherosYDirectorios().remove(0)&lt;/code&gt;) and could definitely be cleaned up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, all the desired functionality is implemented.&lt;/p&gt;
&lt;p&gt;Style-wise, some of the newlines and avoiding braces on &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; could be changed to improve the readability.&lt;/p&gt;
&lt;p&gt;The post is written in Spanish, but uses some words that don’t translate well («remover» could better be said as «eliminar» or «quitar»).&lt;/p&gt;
&lt;h2 id=&quot;classmate_s_evaluation_2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation_2&quot;&gt;¶&lt;/a&gt;Classmate’s evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: B.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Their post starts with an explanation on what a crawler is, common uses for them, and what type of crawler they will be developing. This is a very good start. Regarding the post style, it seems they are not properly using some of WordPress features, such as lists, and instead rely on paragraphs with special characters prefixing each list item.&lt;/p&gt;
&lt;p&gt;The post also contains some details on how to install the requirements to run the program, which can be very useful for someone not used to working with Java.&lt;/p&gt;
&lt;p&gt;They do not explain their implementation and the filename of the download has a typo.&lt;/p&gt;
&lt;p&gt;Implementation-wise, the code seems to be well-organized, into several packages and files, although the naming is a bit inconsistent. They even designed a GUI, which is quite impressive.&lt;/p&gt;
&lt;p&gt;Some of the methods are documented, although the code inside them is not very commented, including missing rationale for the data structures chosen. There also seem to be several other unused main functions, which I’m unsure why they were kept.&lt;/p&gt;
&lt;p&gt;However, all the desired functionality is implemented.&lt;/p&gt;
&lt;p&gt;Similar to Classmate, the code style could be improved and settled on some standard, as well as making use of Java features such as &lt;code&gt;for&lt;/code&gt; loops over iterators instead of manual loops.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Introduction to NoSQL</title><id>dist/introduction-to-nosql/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-02-24T23:00:00+00:00</published><summary>This post will primarly focus on the talk held in the </summary><content type="html" src="dist/introduction-to-nosql/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Introduction to NoSQL&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This post will primarly focus on the talk held in the &lt;a href=&quot;https://youtu.be/qI_g07C_Q5I&quot;&gt;GOTO 2012 conference: Introduction to NoSQL by Martin Fowler&lt;/a&gt;. It can be seen as an informal, summarized transcript of the talk&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-02-25&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;The relational database model is affected by the &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;impedance mismatch problem&lt;/a&gt;&lt;/em&gt;. This occurs because we have to match our high-level design with the separate columns and rows used by relational databases.&lt;/p&gt;
&lt;p&gt;Taking the in-memory objects and putting them into a relational database (which were dominant at the time) simply didn’t work out. Why? Relational databases were more than just databases, they served as a an integration mechanism across applications, up to the 2000s. For 20 years!&lt;/p&gt;
&lt;p&gt;With the rise of the Internet and the sheer amount of traffic, databases needed to scale. Unfortunately, relational databases only scale well vertically (by upgrading a &lt;em&gt;single&lt;/em&gt; node). This is &lt;em&gt;very&lt;/em&gt; expensive, and not something many could afford.&lt;/p&gt;
&lt;p&gt;The problem are those pesky &lt;code&gt;JOIN&lt;/code&gt;‘s, and its friends &lt;code&gt;GROUP BY&lt;/code&gt;. Because our program and reality model don’t match the tables used by SQL, we have to rely on them to query the data. It is because the model doesn’t map directly.&lt;/p&gt;
&lt;p&gt;Furthermore, graphs don’t map very well at all to relational models.&lt;/p&gt;
&lt;p&gt;We needed a way to scale horizontally (by increasing the &lt;em&gt;amount&lt;/em&gt; of nodes), something relational databases were not designed to do.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We need to do something different, relational across nodes is an unnatural act&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This inspired the NoSQL movement.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;#nosql was only meant to be a hashtag to advertise it, but unfortunately it’s how it is called now&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not possible to define NoSQL, but we can identify some of its characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-relational&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cluster-friendly&lt;/strong&gt; (this was the original spark)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open-source (until now, generally)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;21st century web culture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema-less (easier integration or conjugation of several models, structure aggregation)
These databases use different data models to those used by the relational model. However, it is possible to identify 4 broad chunks (some may say 3, or even 2!):&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Key-value store&lt;/strong&gt;. With a certain key, you obtain the value corresponding to it. It knows nothing else, nor does it care. We say the data is opaque.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Document-based&lt;/strong&gt;. It stores an entire mass of documents with complex structure, normally through the use of JSON (XML has been left behind). Then, you can ask for certain fields, structures, or portions. We say the data is transparent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Column-family&lt;/strong&gt;. There is a «row key», and within it we store multiple «column families» (columns that fit together, our aggregate). We access by row-key and column-family name.
All of these kind of serve to store documents without any &lt;em&gt;explicit&lt;/em&gt; schema. Just shove in anything! This gives a lot of flexibility and ease of migration, except… that’s not really true. There’s an &lt;em&gt;implicit&lt;/em&gt; schema when querying.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, a query where we may do &lt;code&gt;anOrder['price'] * anOrder['quantity']&lt;/code&gt; is assuming that &lt;code&gt;anOrder&lt;/code&gt; has both a &lt;code&gt;price&lt;/code&gt; and a &lt;code&gt;quantity&lt;/code&gt;, and that both of these can be multiplied together. «Schema-less» is a fuzzy term.&lt;/p&gt;
&lt;p&gt;However, it is the lack of a &lt;em&gt;fixed&lt;/em&gt; schema that gives flexibility.&lt;/p&gt;
&lt;p&gt;One could argue that the line between key-value and document-based is very fuzzy, and they would be right! Key-value databases often let you include additional metadata that behaves like an index, and in document-based, documents often have an identifier anyway.&lt;/p&gt;
&lt;p&gt;The common notion between these three types is what matters. They save an entire structure as an &lt;em&gt;unit&lt;/em&gt;. We can refer to these as «Aggregate Oriented Databases». Aggregate, because we group things when designing or modeling our systems, as opposed to relational databases that scatter the information across many tables.&lt;/p&gt;
&lt;p&gt;There exists a notable outlier, though, and that’s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graph&lt;/strong&gt; databases. They use a node-and-arc graph structure. They are great for moving on relationships across things. Ironically, relational databases are not very good at jumping across relationships! It is possibly to perform very interesting queries in graph databases which would be really hard and costly on relational models. Unlike the aggregated databases, graphs break things into even smaller units.
NoSQL is not &lt;em&gt;the&lt;/em&gt; solution. It depends on how you’ll work with your data. Do you need an aggregate database? Will you have a lot of relationships? Or would the relational model be good fit for you?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NoSQL, however, is a good fit for large-scale projects (data will &lt;em&gt;always&lt;/em&gt; grow) and faster development (the impedance mismatch is drastically reduced).&lt;/p&gt;
&lt;p&gt;Regardless of our choice, it is important to remember that NoSQL is a young technology, which is still evolving really fast (SQL has been stable for &lt;em&gt;decades&lt;/em&gt;). But the &lt;em&gt;polyglot persistence&lt;/em&gt; is what matters. One must know the alternatives, and be able to choose.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Relational databases have the well-known ACID properties: Atomicity, Consistency, Isolation and Durability.&lt;/p&gt;
&lt;p&gt;NoSQL (except graph-based!) are about being BASE instead: Basically Available, Soft state, Eventual consistency.&lt;/p&gt;
&lt;p&gt;SQL needs transactions because we don’t want to perform a read while we’re only half-way done with a write! The readers and writers are the problem, and ensuring consistency results in a performance hit, even if the risk is low (two writers are extremely rare but it still must be handled).&lt;/p&gt;
&lt;p&gt;NoSQL on the other hand doesn’t need ACID because the aggregate &lt;em&gt;is&lt;/em&gt; the transaction boundary. Even before NoSQL itself existed! Any update is atomic by nature. When updating many documents it &lt;em&gt;is&lt;/em&gt; a problem, but this is very rare.&lt;/p&gt;
&lt;p&gt;We have to distinguish between logical and replication consistency. During an update and if a conflict occurs, it must be resolved to preserve the logical consistency. Replication consistency on the other hand is preserveed when distributing the data across many machines, for example during sharding or copies.&lt;/p&gt;
&lt;p&gt;Replication buys us more processing power and resillence (at the cost of more storage) in case some of the nodes die. But what happens if what dies is the communication across the nodes? We could drop the requests and preserve the consistency, or accept the risk to continue and instead preserve the availability.&lt;/p&gt;
&lt;p&gt;The choice on whether trading consistency for availability is acceptable or not depends on the domain rules. It is the domain’s choice, the business people will choose. If you’re Amazon, you always want to be able to sell, but if you’re a bank, you probably don’t want your clients to have negative numbers in their account!&lt;/p&gt;
&lt;p&gt;Regardless of what we do, in a distributed system, the CAP theorem always applies: Consistecy, Availability, Partitioning-tolerancy (error tolerancy). It is &lt;strong&gt;impossible&lt;/strong&gt; to guarantee all 3 at 100%. Most of the times, it does work, but it is mathematically impossible to guarantee at 100%.&lt;/p&gt;
&lt;p&gt;A database has to choose what to give up at some point. When designing a distributed system, this must be considered. Normally, the choice is made between consistency or response time.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;further_reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further_reading&quot;&gt;¶&lt;/a&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.martinfowler.com/articles/nosql-intro-original.pdf&quot;&gt;The future is: &lt;del&gt;NoSQL Databases&lt;/del&gt; Polyglot Persistence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/nosql-databases-overview&quot;&gt;NoSQL Databases: An Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Build your own PC</title><id>dist/build-your-own-pc/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-02-24T23:00:00+00:00</published><summary>…where PC obviously stands for Personal Crawler</summary><content type="html" src="dist/build-your-own-pc/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Build your own PC&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;&lt;em&gt;…where PC obviously stands for Personal Crawler&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-02-25&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;This post contains the source code for a very simple crawler written in Java. You can compile and run it on any file or directory, and it will calculate the frequency of all the words it finds.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;source_code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#source_code&quot;&gt;¶&lt;/a&gt;Source code&lt;/h2&gt;
&lt;p&gt;Paste the following code in a new file called &lt;code&gt;Crawl.java&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

class Crawl {
	// Regex used to tokenize the words from a line of text
	private final static Pattern WORDS = Pattern.compile(&amp;quot;\\w+&amp;quot;);

	// The file where we will cache our results
	private final static File INDEX_FILE = new File(&amp;quot;index.bin&amp;quot;);

	// Helper method to determine if a file is a text file or not
	private static boolean isTextFile(File file) {
		String name = file.getName().toLowerCase();
		return name.endsWith(&amp;quot;.txt&amp;quot;)
				|| name.endsWith(&amp;quot;.java&amp;quot;)
				|| name.endsWith(&amp;quot;.c&amp;quot;)
				|| name.endsWith(&amp;quot;.cpp&amp;quot;)
				|| name.endsWith(&amp;quot;.h&amp;quot;)
				|| name.endsWith(&amp;quot;.hpp&amp;quot;)
				|| name.endsWith(&amp;quot;.html&amp;quot;)
				|| name.endsWith(&amp;quot;.css&amp;quot;)
				|| name.endsWith(&amp;quot;.js&amp;quot;);
	}

	// Normalizes a string by converting it to lowercase and removing accents
	private static String normalize(String string) {
		return string.toLowerCase()
				.replace(&amp;quot;á&amp;quot;, &amp;quot;a&amp;quot;)
				.replace(&amp;quot;é&amp;quot;, &amp;quot;e&amp;quot;)
				.replace(&amp;quot;í&amp;quot;, &amp;quot;i&amp;quot;)
				.replace(&amp;quot;ó&amp;quot;, &amp;quot;o&amp;quot;)
				.replace(&amp;quot;ú&amp;quot;, &amp;quot;u&amp;quot;);
	}

	// Recursively fills the map with the count of words found on all the text files
	static void fillWordMap(Map&amp;lt;String, Integer&amp;gt; map, File root) throws IOException {
		// Our file queue begins with the root
		Queue&amp;lt;File&amp;gt; fileQueue = new ArrayDeque&amp;lt;&amp;gt;();
		fileQueue.add(root);

		// For as long as the queue is not empty...
		File file;
		while ((file = fileQueue.poll()) != null) {
			if (!file.exists() || !file.canRead()) {
				// ...ignore files for which we don't have permission...
				System.err.println(&amp;quot;warning: cannot read file: &amp;quot; + file);
			} else if (file.isDirectory()) {
				// ...else if it's a directory, extend our queue with its files...
				File[] files = file.listFiles();
				if (files == null) {
					System.err.println(&amp;quot;warning: cannot list dir: &amp;quot; + file);
				} else {
					fileQueue.addAll(Arrays.asList(files));
				}
			} else if (isTextFile(file)) {
				// ...otherwise, count the words in the file.
				countWordsInFile(map, file);
			}
		}
	}

	// Counts the words in a single file and adds the count to the map.
	public static void countWordsInFile(Map&amp;lt;String, Integer&amp;gt; map, File file) throws IOException {
		BufferedReader reader = new BufferedReader(new FileReader(file));

		String line;
		while ((line = reader.readLine()) != null) {
			Matcher matcher = WORDS.matcher(line);
			while (matcher.find()) {
				String token = normalize(matcher.group());
				Integer count = map.get(token);
				if (count == null) {
					map.put(token, 1);
				} else {
					map.put(token, count + 1);
				}
			}
		}

		reader.close();
	}

	// Prints the map of word count to the desired output stream.
	public static void printWordMap(Map&amp;lt;String, Integer&amp;gt; map, PrintStream writer) {
		List&amp;lt;String&amp;gt; keys = new ArrayList&amp;lt;&amp;gt;(map.keySet());
		Collections.sort(keys);
		for (String key : keys) {
			writer.println(key + &amp;quot;\t&amp;quot; + map.get(key));
		}
	}

	@SuppressWarnings(&amp;quot;unchecked&amp;quot;)
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		// Validate arguments
		if (args.length == 1 &amp;amp;&amp;amp; args[0].equals(&amp;quot;--help&amp;quot;)) {
			System.err.println(&amp;quot;usage: java Crawl [input]&amp;quot;);
			return;
		}

		File root = new File(args.length &amp;gt; 0 ? args[0] : &amp;quot;.&amp;quot;);

		// Loading or generating the map where we aggregate the data  {word: count}
		Map&amp;lt;String, Integer&amp;gt; map;
		if (INDEX_FILE.isFile()) {
			System.err.println(&amp;quot;Found existing index file: &amp;quot; + INDEX_FILE);
			try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(INDEX_FILE))) {
				map = (Map&amp;lt;String, Integer&amp;gt;) ois.readObject();
			}
		} else {
			System.err.println(&amp;quot;Index file not found: &amp;quot; + INDEX_FILE + &amp;quot;; indexing...&amp;quot;);
			map = new TreeMap&amp;lt;&amp;gt;();
			fillWordMap(map, root);
			// Cache the results to avoid doing the work a next time
			try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(INDEX_FILE))) {
				out.writeObject(map);
			}
		}

		// Ask the user in a loop to query for words
		Scanner scanner = new Scanner(System.in);
		while (true) {
			System.out.print(&amp;quot;Escriba palabra a consultar (o Enter para salir): &amp;quot;);
			System.out.flush();
			String line = scanner.nextLine().trim();
			if (line.isEmpty()) {
				break;
			}

			line = normalize(line);
			Integer count = map.get(line);
			if (count == null) {
				System.out.println(String.format(&amp;quot;La palabra \&amp;quot;%s\&amp;quot; no está presente&amp;quot;, line));
			} else if (count == 1) {
				System.out.println(String.format(&amp;quot;La palabra \&amp;quot;%s\&amp;quot; está presente 1 vez&amp;quot;, line));
			} else {
				System.out.println(String.format(&amp;quot;La palabra \&amp;quot;%s\&amp;quot; está presente %d veces&amp;quot;, line, count));
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be compiled and executed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javac Crawl.java
java Crawl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of copy-pasting the code, you may also download it as a &lt;code&gt;.zip&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(contents removed)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;addendum&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#addendum&quot;&gt;¶&lt;/a&gt;Addendum&lt;/h2&gt;
&lt;p&gt;The following simple function can be used if one desires to print the contents of a file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static void printFile(File file) {
	if (isTextFile(file)) {
		System.out.println('\n' + file.getName());
		try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
			String line;
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
			}
		} catch (FileNotFoundException ignored) {
			System.err.println(&amp;quot;warning: file disappeared while reading: &amp;quot; + file);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>About Boolean Retrieval</title><id>dist/about-boolean-retrieval/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-02-24T23:00:00+00:00</published><summary>This entry will discuss the section on the </summary><content type="html" src="dist/about-boolean-retrieval/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;About Boolean Retrieval&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This entry will discuss the section on the &lt;em&gt;&lt;a href=&quot;https://nlp.stanford.edu/IR-book/pdf/01bool.pdf&quot;&gt;Boolean retrieval&lt;/a&gt;&lt;/em&gt; section of the book &lt;em&gt;&lt;a href=&quot;https://nlp.stanford.edu/IR-book/pdf/irbookprint.pdf&quot;&gt;An Introduction to Information Retrieval&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-02-25&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;h2 class=&quot;title&quot; id=&quot;summary_on_the_topic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary_on_the_topic&quot;&gt;¶&lt;/a&gt;Summary on the topic&lt;/h2&gt;
&lt;p&gt;Boolean retrieval is one of the many ways information retrieval (finding materials that satisfy an information need), often simply called &lt;em&gt;search&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A simple way to retrieve information is to &lt;em&gt;grep&lt;/em&gt; through the text (term named after the Unix tool &lt;code&gt;grep&lt;/code&gt;), scanning text linearly and excluding it on certain criteria. However, this falls short when the volume of the data grows, more complex queries are desired, or one seeks some sort of ranking.&lt;/p&gt;
&lt;p&gt;To avoid linear scanning, we build an &lt;em&gt;index&lt;/em&gt; and record for each document whether it contains each term out of our full dictionary of terms (which may be words in a chapter and words in the book). This results in a binary term-document &lt;em&gt;incidence matrix&lt;/em&gt;. Such a possible matrix is:&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;em&gt;
     word/play
    &lt;/em&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Antony and Cleopatra
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Julius Caesar
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     The Tempest
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     …
    &lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Antony
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Brutus
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Caesar
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Calpurnia
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Cleopatra
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     mercy
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     worser
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    0
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     …
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can look at this matrix’s rows or columns to obtain a vector for each term indicating where it appears, or a vector for each document indicating the terms it contains.&lt;/p&gt;
&lt;p&gt;Now, answering a query such as &lt;code&gt;Brutus AND Caesar AND NOT Calpurnia&lt;/code&gt; becomes trivial:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;VECTOR(Brutus) AND VECTOR(Caesar) AND COMPLEMENT(VECTOR(Calpurnia))
= 110 AND 110 AND COMPLEMENT(010)
= 110 AND 110 AND 101
= 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The query is only satisfied for our first column.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Boolean retrieval model&lt;/em&gt; is thus a model that treats documents as a set of terms, in which we can perform any query in the form of Boolean expressions of terms, combined with &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;AND&lt;/code&gt;, and &lt;code&gt;NOT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, building such a matrix is often not feasible due to the sheer amount of data (say, a matrix with 500,000 terms across 1,000,000 documents, each with roughly 1,000 terms). However, it is important to notice that most of the terms will be &lt;em&gt;missing&lt;/em&gt; when examining each document. In our example, this means 99.8% or more of the cells will be 0. We can instead record the &lt;em&gt;positions&lt;/em&gt; of the 1’s. This is known as an &lt;em&gt;inverted index&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The inverted index is a dictionary of terms, each containing a list that records in which documents it appears (&lt;em&gt;postings&lt;/em&gt;). Applied to boolean retrieval, we would:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collects the documents to be indexed, assign a unique identifier each&lt;/li&gt;
&lt;li&gt;Tokenize the text in the documents into a list of terms&lt;/li&gt;
&lt;li&gt;Normalize the tokens, which now become indexing terms&lt;/li&gt;
&lt;li&gt;Index the documents&lt;/li&gt;
&lt;/ol&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Dictionary
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     Postings
    &lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Brutus
   &lt;/td&gt;
   &lt;td&gt;
    1, 2, 4, 11, 31, 45, 173, 174
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Caesar
   &lt;/td&gt;
   &lt;td&gt;
    1, 2, 4, 5, 6, 16, 57, 132, …
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Calpurnia
   &lt;/td&gt;
   &lt;td&gt;
    2, 31, 54, 101
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    …
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Sort the pairs &lt;code&gt;(term, document_id)&lt;/code&gt; so that the terms are alphabetical, and merge multiple occurences into one. Group instances of the same term and split again into a sorted list of postings.&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     term
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     document_id
    &lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    I
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    did
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    …
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    with
   &lt;/td&gt;
   &lt;td&gt;
    2
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     term
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     document_id
    &lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    be
   &lt;/td&gt;
   &lt;td&gt;
    2
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    brutus
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    brutus
   &lt;/td&gt;
   &lt;td&gt;
    2
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    …
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;strong&gt;
     term
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     frequency
    &lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;strong&gt;
     postings list
    &lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    be
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    2
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    brutus
   &lt;/td&gt;
   &lt;td&gt;
    2
   &lt;/td&gt;
   &lt;td&gt;
    1, 2
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    capitol
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
   &lt;td&gt;
    1
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    …
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Intersecting posting lists now becomes of transversing both lists in order:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Brutus   : 1 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 11 -&amp;gt; 31 -&amp;gt; 45 -&amp;gt;           173 -&amp;gt; 174
Calpurnia:      2 -&amp;gt;            31 -&amp;gt;       54 -&amp;gt; 101
Intersect:      2 -&amp;gt;            31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A simple conjunctive query (e.g. &lt;code&gt;Brutus AND Calpurnia&lt;/code&gt;) is executed as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Locate &lt;code&gt;Brutus&lt;/code&gt; in the dictionary&lt;/li&gt;
&lt;li&gt;Retrieve its postings&lt;/li&gt;
&lt;li&gt;Locate &lt;code&gt;Calpurnia&lt;/code&gt; in the dictionary&lt;/li&gt;
&lt;li&gt;Retrieve its postings&lt;/li&gt;
&lt;li&gt;Intersect (&lt;em&gt;merge&lt;/em&gt;) both postings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since the lists are sorted, walking both of them can be done in &lt;em&gt;O(n)&lt;/em&gt; time. By also storing the frequency, we can optimize the order in which we execute arbitrary queries, although we won’t go into detail.&lt;/p&gt;
&lt;h2 id=&quot;thoughts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thoughts&quot;&gt;¶&lt;/a&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;The boolean retrieval model can be implemented with relative ease, and can help with storage and efficient querying of the information if we intend to perform boolean queries.&lt;/p&gt;
&lt;p&gt;However, the basic design lacks other useful operations, such as a «near» operator, or the ability to rank the results.&lt;/p&gt;
&lt;p&gt;All in all, it’s an interesting way to look at the data and query it efficiently.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry></feed>