<feed xmlns="http://www.w3.org/2005/Atom"><title>pagong</title><id>pagong</id><updated>2020-10-02T22:00:00+00:00</updated><entry><title>Data Mining and Data Warehousing</title><id>dist/index/index.html</id><updated>2020-10-02T22:00:00+00:00</updated><published>2020-10-02T22:00:00+00:00</published><summary>During 2020 at university, this subject ("Minería de Datos y Almacenes de Datos") had us write</summary><content type="html" src="dist/index/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Data Mining and Data Warehousing&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;h1 class=&quot;title&quot; id=&quot;data_mining_and_data_warehousing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data_mining_and_data_warehousing&quot;&gt;¶&lt;/a&gt;Data Mining and Data Warehousing&lt;/h1&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;2020-10-03&lt;/div&gt;
&lt;p&gt;During 2020 at university, this subject (&amp;quot;Minería de Datos y Almacenes de Datos&amp;quot;) had us write
blog posts as assignments. I think it would be really fun and I wanted to preserve that work
here, with the hopes it's interesting to someone.&lt;/p&gt;
&lt;p&gt;The posts were auto-generated from the original HTML files and manually anonymized later.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Privado: Final NoSQL evaluation</title><id>dist/final-nosql-evaluation/index.html</id><updated>2020-05-13T22:00:00+00:00</updated><published>2020-05-12T22:00:00+00:00</published><summary>This evaluation is a bit different to my </summary><content type="html" src="dist/final-nosql-evaluation/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Privado: Final NoSQL evaluation&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This evaluation is a bit different to my &lt;a href=&quot;/blog/mdad/nosql-evaluation/&quot;&gt;previous one&lt;/a&gt; because this time I have been tasked to evaluate student &lt;code&gt;a(i - 2)&lt;/code&gt;, and because I am &lt;code&gt;i = 11&lt;/code&gt; that happens to be &lt;code&gt;a(9) =&lt;/code&gt; a classmate.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-05-13&lt;br&gt;
Modified 2020-05-14&lt;/div&gt;
&lt;h2 class=&quot;title&quot; id=&quot;classmate_s_evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation&quot;&gt;¶&lt;/a&gt;Classmate’s Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: A.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post I have evaluated is Trabajo en grupo – Bases de datos NoSQL, 3ª entrada: Aplicación con una Base de datos NoSQL seleccionada.&lt;/p&gt;
&lt;p&gt;It starts with a very brief introduction with who has written the post, what data they will be using, and what database they have chosen.&lt;/p&gt;
&lt;p&gt;They properly describe their objective, how they will do it and what library will be used.&lt;/p&gt;
&lt;p&gt;They also explain where they obtain the data from, and what other things the site can do, which is a nice bonus.&lt;/p&gt;
&lt;p&gt;The post continues listing and briefly explaining all the tools used and what they are for, including commands to execute.&lt;/p&gt;
&lt;p&gt;At last, they list what files their project uses, what they do, and contains a showcase of images which lets the reader know what the application does.&lt;/p&gt;
&lt;p&gt;All in all, in my opinion, it’s clear they have put work into this entry and I have not noticed any major flaws, so they deserve the highest grade.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>A practical example with Hadoop</title><id>dist/a-practical-example-with-hadoop/index.html</id><updated>2020-04-17T22:00:00+00:00</updated><published>2020-03-29T22:00:00+00:00</published><summary>In our </summary><content type="html" src="dist/a-practical-example-with-hadoop/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;A practical example with Hadoop&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;In our &lt;a href=&quot;/blog/mdad/introduction-to-hadoop-and-its-mapreduce/&quot;&gt;previous Hadoop post&lt;/a&gt;, we learnt what it is, how it originated, and how it works, from a theoretical standpoint. Here we will instead focus on a more practical example with Hadoop.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-30&lt;br&gt;
Modified 2020-04-18&lt;/div&gt;
&lt;p&gt;This post will reproduce the example on Chapter 2 of the book &lt;a href=&quot;http://www.hadoopbook.com/&quot;&gt;Hadoop: The Definitive Guide, Fourth Edition&lt;/a&gt; (&lt;a href=&quot;http://grut-computing.com/HadoopBook.pdf&quot;&gt;pdf,&lt;/a&gt;&lt;a href=&quot;http://www.hadoopbook.com/code.html&quot;&gt;code&lt;/a&gt;), that is, finding the maximum global-wide temperature for a given year.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;¶&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before running any piece of software, its executable code must first be downloaded into our computers so that we can run it. Head over to &lt;a href=&quot;http://hadoop.apache.org/releases.html&quot;&gt;Apache Hadoop’s releases&lt;/a&gt; and download the &lt;a href=&quot;https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz&quot;&gt;latest binary version&lt;/a&gt; at the time of writing (3.2.1).&lt;/p&gt;
&lt;p&gt;We will be using the &lt;a href=&quot;https://linuxmint.com/&quot;&gt;Linux Mint&lt;/a&gt; distribution because I love its simplicity, although the process shown here should work just fine on any similar Linux distribution such as &lt;a href=&quot;https://ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the archive download is complete, extract it with any tool of your choice (graphical or using the terminal) and execute it. Make sure you have a version of Java installed, such as &lt;a href=&quot;https://openjdk.java.net/&quot;&gt;OpenJDK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are all the three steps in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://apache.brunneis.com/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz
tar xf hadoop-3.2.1.tar.gz
hadoop-3.2.1/bin/hadoop version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will be using the two example data files that they provide in &lt;a href=&quot;https://github.com/tomwhite/hadoop-book/tree/master/input/ncdc/all&quot;&gt;their GitHub repository&lt;/a&gt;, although the full dataset is offered by the &lt;a href=&quot;https://www.ncdc.noaa.gov/&quot;&gt;National Climatic Data Center&lt;/a&gt; (NCDC).&lt;/p&gt;
&lt;p&gt;We will also unzip and concatenate both files into a single text file, to make it easier to work with. As a single command pipeline:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/tomwhite/hadoop-book/master/input/ncdc/all/190{1,2}.gz | gunzip &amp;gt; 190x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should create a &lt;code&gt;190x&lt;/code&gt; text file in the current directory, which will be our input data.&lt;/p&gt;
&lt;h2 id=&quot;processing_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#processing_data&quot;&gt;¶&lt;/a&gt;Processing data&lt;/h2&gt;
&lt;p&gt;To take advantage of Hadoop, we have to design our code to work in the MapReduce model. Both the map and reduce phase work on key-value pairs as input and output, and both have a programmer-defined function.&lt;/p&gt;
&lt;p&gt;We will use Java, because it’s a dependency that we already have anyway, so might as well.&lt;/p&gt;
&lt;p&gt;Our map function needs to extract the year and air temperature, which will prepare the data for later use (finding the maximum temperature for each year). We will also drop bad records here (if the temperature is missing, suspect or erroneous).&lt;/p&gt;
&lt;p&gt;Copy or reproduce the following code in a file called &lt;code&gt;MaxTempMapper.java&lt;/code&gt;, using any text editor of your choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class MaxTempMapper extends Mapper&amp;lt;LongWritable, Text, Text, IntWritable&amp;gt; {
    private static final int TEMP_MISSING = 9999;
    private static final String GOOD_QUALITY_RE = &amp;quot;[01459]&amp;quot;;

    @Override
    public void map(LongWritable key, Text value, Context context)
            throws IOException, InterruptedException {
        String line = value.toString();
        String year = line.substring(15, 19);
        String temp = line.substring(87, 92).replaceAll(&amp;quot;^\\+&amp;quot;, &amp;quot;&amp;quot;);
        String quality = line.substring(92, 93);

        int airTemperature = Integer.parseInt(temp);
        if (airTemperature != TEMP_MISSING &amp;amp;&amp;amp; quality.matches(GOOD_QUALITY_RE)) {
            context.write(new Text(year), new IntWritable(airTemperature));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s create the &lt;code&gt;MaxTempReducer.java&lt;/code&gt; file. Its job is to reduce the data from multiple values into just one. We do that by keeping the maximum out of all the values we receive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class MaxTempReducer extends Reducer&amp;lt;Text, IntWritable, Text, IntWritable&amp;gt; {
    @Override
    public void reduce(Text key, Iterable&amp;lt;IntWritable&amp;gt; values, Context context)
            throws IOException, InterruptedException {
        Iterator&amp;lt;IntWritable&amp;gt; iter = values.iterator();
        if (iter.hasNext()) {
            int maxValue = iter.next().get();
            while (iter.hasNext()) {
                maxValue = Math.max(maxValue, iter.next().get());
            }
            context.write(key, new IntWritable(maxValue));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Except for some Java weirdness (…why can’t we just iterate over an &lt;code&gt;Iterator&lt;/code&gt;? Or why can’t we just manually call &lt;code&gt;next()&lt;/code&gt; on an &lt;code&gt;Iterable&lt;/code&gt;?), our code is correct. There can’t be a maximum if there are no elements, and we want to avoid dummy values such as &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can also take a moment to appreciate how absolutely tiny this code is, and it’s Java! Hadoop’s API is really awesome and lets us write such concise code to achieve what we need.&lt;/p&gt;
&lt;p&gt;Last, let’s write the &lt;code&gt;main&lt;/code&gt; method, or else we won’t be able to run it. In our new file &lt;code&gt;MaxTemp.java&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MaxTemp {
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.err.println(&amp;quot;usage: java MaxTemp &amp;lt;input path&amp;gt; &amp;lt;output path&amp;gt;&amp;quot;);
            System.exit(-1);
        }

        Job job = Job.getInstance();

        job.setJobName(&amp;quot;Max temperature&amp;quot;);
        job.setJarByClass(MaxTemp.class);
        job.setMapperClass(MaxTempMapper.class);
        job.setReducerClass(MaxTempReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        boolean result = job.waitForCompletion(true);

        System.exit(result ? 0 : 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And compile by including the required &lt;code&gt;.jar&lt;/code&gt; dependencies in Java’s classpath with the &lt;code&gt;-cp&lt;/code&gt; switch:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javac -cp &amp;quot;hadoop-3.2.1/share/hadoop/common/*:hadoop-3.2.1/share/hadoop/mapreduce/*&amp;quot; *.java
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At last, we can run it (also specifying the dependencies in the classpath, this one’s a mouthful):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -cp &amp;quot;.:hadoop-3.2.1/share/hadoop/common/*:hadoop-3.2.1/share/hadoop/common/lib/*:hadoop-3.2.1/share/hadoop/mapreduce/*:hadoop-3.2.1/share/hadoop/mapreduce/lib/*:hadoop-3.2.1/share/hadoop/yarn/*:hadoop-3.2.1/share/hadoop/yarn/lib/*:hadoop-3.2.1/share/hadoop/hdfs/*:hadoop-3.2.1/share/hadoop/hdfs/lib/*&amp;quot; MaxTemp 190x results
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hooray! We should have a new &lt;code&gt;results/&lt;/code&gt; folder along with the following files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls results
part-r-00000  _SUCCESS
$ cat results/part-r-00000 
1901	317
1902	244
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked! Now this example was obviously tiny, but hopefully enough to demonstrate how to get the basics running on real world data.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Developing a Python application for Cassandra</title><id>dist/developing-a-python-application-for-cassandra/index.html</id><updated>2020-04-15T22:00:00+00:00</updated><published>2020-03-22T23:00:00+00:00</published><summary>Warning</summary><content type="html" src="dist/developing-a-python-application-for-cassandra/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Developing a Python application for Cassandra&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this post is, in fact, a shameless self-plug to my own library. If you continue reading, you accept that you are okay with this. Otherwise, please close the tab, shut down your computer, and set it on fire.__(Also, that was a joke. Please don’t do that.)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-23&lt;br&gt;
Modified 2020-04-16&lt;/div&gt;
&lt;p&gt;Let’s do some programming! Today we will be making a tiny CLI application in &lt;a href=&quot;http://python.org/&quot;&gt;Python&lt;/a&gt; that queries &lt;a href=&quot;https://core.telegram.org/api&quot;&gt;Telegram’s API&lt;/a&gt; and stores the data in &lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt;.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;our_goal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our_goal&quot;&gt;¶&lt;/a&gt;Our goal&lt;/h2&gt;
&lt;p&gt;Our goal is to make a Python console application. This application will connect to &lt;a href=&quot;https://telegram.org/&quot;&gt;Telegram&lt;/a&gt;, and ask for your account credentials. Once you have logged in, the application will fetch all of your open conversations and we will store these in Cassandra.&lt;/p&gt;
&lt;p&gt;With the data saved in Cassandra, we can now very efficiently query information about your conversations given their identifier offline (no need to query Telegram anymore).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In short&lt;/strong&gt;, we are making an application that performs efficient offline queries to Cassandra to print out information about your Telegram conversations given the ID you want to query.&lt;/p&gt;
&lt;h2 id=&quot;data_model&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data_model&quot;&gt;¶&lt;/a&gt;Data model&lt;/h2&gt;
&lt;p&gt;The application itself is really simple, and we only need one table to store all the relevant information we will be needing. This table called &lt;code&gt;**users**&lt;/code&gt; will contain the following columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**id**&lt;/code&gt;, of type &lt;code&gt;int&lt;/code&gt;. This will also be the &lt;code&gt;primary key&lt;/code&gt; and we’ll use it to query the database later on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**first_name**&lt;/code&gt;, of type &lt;code&gt;varchar&lt;/code&gt;. This field contains the first name of the stored user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**last_name**&lt;/code&gt;, of type &lt;code&gt;varchar&lt;/code&gt;. This field contains the last name of the stored user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**username**&lt;/code&gt;, of type &lt;code&gt;varchar&lt;/code&gt;. This field contains the username of the stored user.
Because Cassandra uses a &lt;a href=&quot;https://cassandra.apache.org/doc/latest/architecture/overview.html&quot;&gt;wide column storage model&lt;/a&gt;, direct access through a key is the most efficient way to query the database. In our case, the key is the primary key of the &lt;code&gt;users&lt;/code&gt; table, using the &lt;code&gt;id&lt;/code&gt; column. The index for the primary key is ready to be used as soon as we create the table, so we don’t need to create it on our own.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dependencies&quot;&gt;¶&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;Because we will program it in Python, you need Python installed. You can install it using a package manager of your choice or heading over to the &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python downloads section&lt;/a&gt;, but if you’re on Linux, chances are you have it installed already.&lt;/p&gt;
&lt;p&gt;Once Python 3.5 or above is installed, get a copy of the Cassandra driver for Python and Telethon through &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install cassandra-driver telethon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more details on that, see the &lt;a href=&quot;https://docs.datastax.com/en/developer/python-driver/3.22/installation/&quot;&gt;installation guide for &lt;code&gt;cassandra-driver&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&quot;https://docs.telethon.dev/en/latest/basic/installation.html&quot;&gt;installation guide for &lt;code&gt;telethon&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we did in our &lt;a href=&quot;/blog/mdad/cassandra-operaciones-basicas-y-arquitectura/&quot;&gt;previous post&lt;/a&gt;, we will setup a new keyspace for this application with &lt;code&gt;cqlsh&lt;/code&gt;. We will also create a table to store the users into. This could all be automated in the Python code, but because it’s a one-time thing, we prefer to use &lt;code&gt;cqlsh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure that Cassandra is running in the background. We can’t make queries to it if it’s not running.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 3.11.6 | CQL spec 3.4.4 | Native protocol v4]
Use HELP for help.
cqlsh&amp;gt; create keyspace mdad with replication = {'class': 'SimpleStrategy', 'replication_factor': 3};
cqlsh&amp;gt; use mdad;
cqlsh:mdad&amp;gt; create table users(id int primary key, first_name varchar, last_name varchar, username varchar);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python installed? Check. Python dependencies? Check. Cassandra ready? Check.&lt;/p&gt;
&lt;h2 id=&quot;the_code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the_code&quot;&gt;¶&lt;/a&gt;The code&lt;/h2&gt;
&lt;h3 id=&quot;getting_users&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting_users&quot;&gt;¶&lt;/a&gt;Getting users&lt;/h3&gt;
&lt;p&gt;The first step is connecting to &lt;a href=&quot;https://core.telegram.org/api&quot;&gt;Telegram’s API&lt;/a&gt;, for which we’ll use &lt;a href=&quot;https://telethon.dev/&quot;&gt;Telethon&lt;/a&gt;, a wonderful (wink, wink) Python library to interface with it.&lt;/p&gt;
&lt;p&gt;As with most APIs, we need to supply &lt;a href=&quot;https://my.telegram.org/&quot;&gt;our API key&lt;/a&gt; in order to use it (here &lt;code&gt;API_ID&lt;/code&gt; and &lt;code&gt;API_HASH&lt;/code&gt;). We will refer to them as constants. At the end, you may download the entire code and use my own key for this example. But please don’t use those values for your other applications!&lt;/p&gt;
&lt;p&gt;It’s pretty simple: we create a client, and for every dialog (that is, open conversation) we have, do some checks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it’s an user, we just store that in a dictionary mapping &lt;code&gt;ID → User&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Else if it’s a group, we iterate over the participants and store those users instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;async def load_users():
    from telethon import TelegramClient

    users = {}

    async with TelegramClient(SESSION, API_ID, API_HASH) as client:
        async for dialog in client.iter_dialogs():
            if dialog.is_user:
                user = dialog.entity
                users[user.id] = user
                print('found user:', user.id, file=sys.stderr)

            elif dialog.is_group:
                async for user in client.iter_participants(dialog):
                    users[user.id] = user
                    print('found member:', user.id, file=sys.stderr)

    return list(users.values())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this we have a mapping ID to user, so we know we won’t have duplicates. We simply return the list of user values, because that’s all we care about.&lt;/p&gt;
&lt;h3 id=&quot;saving_users&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#saving_users&quot;&gt;¶&lt;/a&gt;Saving users&lt;/h3&gt;
&lt;p&gt;Inserting users into Cassandra is pretty straightforward. We take the list of &lt;code&gt;User&lt;/code&gt; objects as input, and prepare a new &lt;code&gt;INSERT&lt;/code&gt; statement that we can reuse (because we will be using it in a loop, this is the best way to do it).&lt;/p&gt;
&lt;p&gt;For each user, execute the statement with the user data as input parameters. Simple as that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def save_users(session, users):
    insert_stmt = session.prepare(
        'INSERT INTO users (id, first_name, last_name, username) ' 
        'VALUES (?, ?, ?, ?)')

    for user in users:
        row = (user.id, user.first_name, user.last_name, user.username)
        session.execute(insert_stmt, row)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;fetching_users&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fetching_users&quot;&gt;¶&lt;/a&gt;Fetching users&lt;/h3&gt;
&lt;p&gt;Given a list of users, yield all of them from the database. Similar to before, we prepare a &lt;code&gt;SELECT&lt;/code&gt; statement and just execute it repeatedly over the input user IDs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def fetch_users(session, users):
    select_stmt = session.prepare('SELECT * FROM users WHERE id = ?')

    for user_id in users:
        yield session.execute(select_stmt, (user_id,)).one()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;parsing_arguments&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parsing_arguments&quot;&gt;¶&lt;/a&gt;Parsing arguments&lt;/h3&gt;
&lt;p&gt;We’ll be making a little CLI application, so we need to parse console arguments. It won’t be anything fancy, though. For that we’ll be using &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;Python’s &lt;code&gt;argparse&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def parse_args():
    import argparse

    parser = argparse.ArgumentParser(
        description='Dump and query Telegram users')

    parser.add_argument('users', type=int, nargs='*',
        help='one or more user IDs to query for')

    parser.add_argument('--load-users', action='store_true',
        help='load users from Telegram (do this first run)')

    return parser.parse_args()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;all_together&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#all_together&quot;&gt;¶&lt;/a&gt;All together&lt;/h3&gt;
&lt;p&gt;Last, the entry point. We import a Cassandra Cluster, and connect to some default keyspace (we called it &lt;code&gt;mdad&lt;/code&gt; earlier).&lt;/p&gt;
&lt;p&gt;If the user wants to load the users into the database, we’ll do just that first.&lt;/p&gt;
&lt;p&gt;Then, for each user we fetch from the database, we print it. Last names and usernames are optional, so don’t print those if they’re missing (&lt;code&gt;None&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;async def main(args):
    from cassandra.cluster import Cluster

    cluster = Cluster(CLUSTER_NODES)
    session = cluster.connect(KEYSPACE)

    if args.load_users:
        users = await load_users()
        save_users(session, users)

    for user in fetch_users(session, args.users):
        print('User', user.id, ':')
        print('  First name:', user.first_name)
        if user.last_name:
            print('  Last name:', user.last_name)
        if user.username:
            print('  Username:', user.username)

        print()

if __name__ == '__main__':
    asyncio.run(main(parse_args()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because Telethon is an &lt;code&gt;[asyncio](https://docs.python.org/3/library/asyncio.html)&lt;/code&gt; library, we define it as &lt;code&gt;async def main(...)&lt;/code&gt; and run it with &lt;code&gt;asyncio.run(main(...))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like in action:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python data.py --help
usage: data.py [-h] [--load-users] [users [users ...]]

Dump and query Telegram users

positional arguments:
  users         one or more user IDs to query for

optional arguments:
  -h, --help    show this help message and exit
  --load-users  load users from Telegram (do this first run)

$ python data.py --load-users
found user: 487158
found member: 59794114
found member: 487158
found member: 191045991
(...a lot more output)

$ python data.py 487158 59794114
User 487158 :
  First name: Rick
  Last name: Pickle

User 59794114 :
  Firt name: Peter
  Username: pete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Telegram’s data now persists in Cassandra, and we can efficiently query it whenever we need to! I would’ve shown a video presenting its usage, but I’m afraid that would leak some of the data I want to keep private :-).&lt;/p&gt;
&lt;p&gt;Feel free to download the code and try it yourself:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;download removed&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.datastax.com/en/developer/python-driver/3.22/getting_started/&quot;&gt;DataStax Python Driver for Apache Cassandra – Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.telethon.dev/en/latest/&quot;&gt;Telethon’s Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Introduction to Hadoop and its MapReduce</title><id>dist/introduction-to-hadoop-and-its-mapreduce/index.html</id><updated>2020-03-31T22:00:00+00:00</updated><published>2020-03-29T22:00:00+00:00</published><summary>Hadoop is an open-source, free, Java-based programming framework that helps processing large datasets in a distributed environment and the problems that arise when trying to harness the knowledge from BigData, capable of running on thousands of nodes and dealing with petabytes of data. It is based on Google File System (GFS) and originated from the work on the Nutch open-source project on search engines.</summary><content type="html" src="dist/introduction-to-hadoop-and-its-mapreduce/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Introduction to Hadoop and its MapReduce&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Hadoop is an open-source, free, Java-based programming framework that helps processing large datasets in a distributed environment and the problems that arise when trying to harness the knowledge from BigData, capable of running on thousands of nodes and dealing with petabytes of data. It is based on Google File System (GFS) and originated from the work on the Nutch open-source project on search engines.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-30&lt;br&gt;
Modified 2020-04-01&lt;/div&gt;
&lt;p&gt;Hadoop also offers a distributed filesystem (HDFS) enabling for fast transfer among nodes, and a way to program with MapReduce.&lt;/p&gt;
&lt;p&gt;It aims to strive for the 4 V’s: Volume, Variety, Veracity and Velocity. For veracity, it is a secure environment that can be trusted.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;milestones&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#milestones&quot;&gt;¶&lt;/a&gt;Milestones&lt;/h2&gt;
&lt;p&gt;The creators of Hadoop are Doug Cutting and Mike Cafarella, who just wanted to design a search engine, Nutch, and quickly found the problems of dealing with large amounts of data. They found their solution with the papers Google published.&lt;/p&gt;
&lt;p&gt;The name comes from the plush of Cutting’s child, a yellow elephant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In July 2005, Nutch used GFS to perform MapReduce operations.&lt;/li&gt;
&lt;li&gt;In February 2006, Nutch started a Lucene subproject which led to Hadoop.&lt;/li&gt;
&lt;li&gt;In April 2007, Yahoo used Hadoop in a 1 000-node cluster.&lt;/li&gt;
&lt;li&gt;In January 2008, Apache took over and made Hadoop a top-level project.&lt;/li&gt;
&lt;li&gt;In July 2008, Apache tested a 4000-node cluster. The performance was the fastest compared to other technologies that year.&lt;/li&gt;
&lt;li&gt;In May 2009, Hadoop sorted a petabyte of data in 17 hours.&lt;/li&gt;
&lt;li&gt;In December 2011, Hadoop reached 1.0.&lt;/li&gt;
&lt;li&gt;In May 2012, Hadoop 2.0 was released with the addition of YARN (Yet Another Resource Navigator) on top of HDFS, splitting MapReduce and other processes into separate components, greatly improving the fault tolerance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here onwards, many other alternatives have born, like Spark, Hive &amp;amp; Drill, Kafka, HBase, built around the Hadoop ecosystem.&lt;/p&gt;
&lt;p&gt;As of 2017, Amazon has clusters between 1 and 100 nodes, Yahoo has over 100 000 CPUs running Hadoop, AOL has clusters with 50 machines, and Facebook has a 320-machine (2 560 cores) and 1.3PB of raw storage.&lt;/p&gt;
&lt;h2 id=&quot;why_not_use_rdbms_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why_not_use_rdbms_&quot;&gt;¶&lt;/a&gt;Why not use RDBMS?&lt;/h2&gt;
&lt;p&gt;Relational database management systems simply cannot scale horizontally, and vertical scaling will require very expensive servers. Similar to RDBMS, Hadoop has a notion of jobs (analogous to transactions), but without ACID or concurrency control. Hadoop supports any form of data (unstructured or semi-structured) in read-only mode, and failures are common but there’s a simple yet efficient fault tolerance.&lt;/p&gt;
&lt;p&gt;So what problems does Hadoop solve? It solves the way we should think about problems, and distributing them, which is key to do anything related with BigData nowadays. We start working with clusters of nodes, and coordinating the jobs between them. Hadoop’s API makes this really easy.&lt;/p&gt;
&lt;p&gt;Hadoop also takes very seriously the loss of data with replication, and if a node falls, they are moved to a different node.&lt;/p&gt;
&lt;h2 id=&quot;major_components&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#major_components&quot;&gt;¶&lt;/a&gt;Major components&lt;/h2&gt;
&lt;p&gt;The previously-mentioned HDFS runs on commodity machine, which are cost-friendly. It is very fault-tolerant and efficient enough to process huge amounts of data, because it splits large files into smaller chunks (or blocks) that can be more easily handled. Multiple nodes can work on multiple chunks at the same time.&lt;/p&gt;
&lt;p&gt;NameNode stores the metadata of the various datablocks (map of blocks) along with their location. It is the brain and the master in Hadoop’s master-slave architecture, also known as the namespace, and makes use of the DataNode.&lt;/p&gt;
&lt;p&gt;A secondary NameNode is a replica that can be used if the first NameNode dies, so that Hadoop doesn’t shutdown and can restart.&lt;/p&gt;
&lt;p&gt;DataNode stores the blocks of data, and are the slaves in the architecture. This data is split into one or more files. Their only job is to manage this access to the data. They are often distributed among racks to avoid data lose.&lt;/p&gt;
&lt;p&gt;JobTracker creates and schedules jobs from the clients for either map or reduce operations.&lt;/p&gt;
&lt;p&gt;TaskTracker runs MapReduce tasks assigned to the current data node.&lt;/p&gt;
&lt;p&gt;When clients need data, they first interact with the NameNode and replies with the location of the data in the correct DataNode. Client proceeds with interaction with the DataNode.&lt;/p&gt;
&lt;h2 id=&quot;mapreduce&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mapreduce&quot;&gt;¶&lt;/a&gt;MapReduce&lt;/h2&gt;
&lt;p&gt;MapReduce, as the name implies, is split into two steps: the map and the reduce. The map stage is the «divide and conquer» strategy, while the reduce part is about combining and reducing the results.&lt;/p&gt;
&lt;p&gt;The mapper has to process the input data (normally a file or directory), commonly line-by-line, and produce one or more outputs. The reducer uses all the results from the mapper as its input to produce a new output file itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;bitmap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When reading the data, some may be junk that we can choose to ignore. If it is valid data, however, we label it with a particular type that can be useful for the upcoming process. Hadoop is responsible for splitting the data accross the many nodes available to execute this process in parallel.&lt;/p&gt;
&lt;p&gt;There is another part to MapReduce, known as the Shuffle-and-Sort. In this part, types or categories from one node get moved to a different node. This happens with all nodes, so that every node can work on a complete category. These categories are known as «keys», and allows Hadoop to scale linearly.&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/oT7kczq5A-0&quot;&gt;YouTube – Hadoop Tutorial For Beginners | What Is Hadoop? | Hadoop Tutorial | Hadoop Training | Simplilearn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/bcjSe0xCHbE&quot;&gt;YouTube – Learn MapReduce with Playing Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/j8ehT1_G5AY?list=PLi4tp-TF_qjM_ed4lIzn03w7OnEh0D8Xi&quot;&gt;YouTube – Video Post #2: Hadoop para torpes (I)-¿Qué es y para qué sirve?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/NQ8mjVPCDvk?list=PLi4tp-TF_qjM_ed4lIzn03w7OnEh0D8Xi&quot;&gt;Video Post #3: Hadoop para torpes (II)-¿Cómo funciona? HDFS y MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hadoop.apache.org/old/releases.html&quot;&gt;Apache Hadoop Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/20qWx2KYqYg?list=PLi4tp-TF_qjM_ed4lIzn03w7OnEh0D8Xi&quot;&gt;Video Post #4: Hadoop para torpes (III y fin)- Ecosistema y distribuciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hadoopbook.com/&quot;&gt;Chapter 2 – Hadoop: The Definitive Guide, Fourth Edition&lt;/a&gt; (&lt;a href=&quot;http://grut-computing.com/HadoopBook.pdf&quot;&gt;pdf,&lt;/a&gt;&lt;a href=&quot;http://www.hadoopbook.com/code.html&quot;&gt;code&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Data Warehousing and OLAP</title><id>dist/data-warehousing-and-olap/index.html</id><updated>2020-03-31T22:00:00+00:00</updated><published>2020-03-22T23:00:00+00:00</published><summary>Business intelligence (BI) refers to systems used to gain insights from data, traditionally taken from relational databases and being used to build a data warehouse. Performance and scalability are key aspects of BI systems.</summary><content type="html" src="dist/data-warehousing-and-olap/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Data Warehousing and OLAP&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Business intelligence (BI) refers to systems used to gain insights from data, traditionally taken from relational databases and being used to build a data warehouse. Performance and scalability are key aspects of BI systems.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-23&lt;br&gt;
Modified 2020-04-01&lt;/div&gt;
&lt;p&gt;Commonly, the data in the warehouse is a transformation of the original, operational data into a form better suited for reporting and analysis.&lt;/p&gt;
&lt;p&gt;This whole process is known as Online Analytical Processing (OLAP), and is different to the approach taken by relational databases, which is known as Online Transaction Processing (OLTP) and is optimized for individual transactions. OLAP is based on multidimensional databases simply by the way it works.&lt;/p&gt;
&lt;p&gt;The Business Intelligence Semantic Model (BISM) refers to the different semantics in which data can be accessed and queried.&lt;/p&gt;
&lt;p&gt;On the one hand, MDX is the language used for Microsoft’s BISM of multidimensional mode, and on the other, DAX is the language of tabular mode, based on Excel’s formula language and designed to be easy to use by those familiar with Excel.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;types_of_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#types_of_data&quot;&gt;¶&lt;/a&gt;Types of data&lt;/h2&gt;
&lt;p&gt;The business data is often called detail data or &lt;em&gt;fact&lt;/em&gt; data, goes in a de-normalized table called the fact table. The term «facts» literally refers to the facts, such as number of products sold and amount received for products sold. Different tables will often represent different dimensions of the data, where «dimensions» simply means different ways to look at the data.&lt;/p&gt;
&lt;p&gt;Data can also be referred to as measures, because most of it is numbers and subject to aggregations. By measures, we refer to these values and numbers.&lt;/p&gt;
&lt;p&gt;Multidimensional databases are formed with separate fact and dimension tables, grouped to create a «cube» with both facts and dimensions.&lt;/p&gt;
&lt;h2 id=&quot;places_to_store_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#places_to_store_data&quot;&gt;¶&lt;/a&gt;Places to store data&lt;/h2&gt;
&lt;p&gt;Three different terms are often heard when talking about the places where data is stored: data lakes, data warehouses, and data marts. All of these have different target users, cost, size and growth.&lt;/p&gt;
&lt;p&gt;The data lake contains &lt;strong&gt;all&lt;/strong&gt; the data generated by your business. Nothing is filtered out, not even cancelled or invalid transactions. If there are future plans to use the data, or a need to analyze it in various ways, a data lake is often necessary.&lt;/p&gt;
&lt;p&gt;The data warehouse contains &lt;strong&gt;structured&lt;/strong&gt; data, or has already been modelled. It’s also multi-purpose, but often of a lot smaller scale. Operational users are able to easily evaluate reports or analyze performance here, since it is built for their needs.&lt;/p&gt;
&lt;p&gt;The data mart contains a &lt;strong&gt;small portion&lt;/strong&gt; of the data, and is often part of data warehouses themselves. It can be seen as a subsection built for specific departments, and as a benefit, users get isolated security and performance. The data here is clean, and subject-oriented.&lt;/p&gt;
&lt;h2 id=&quot;ways_to_store_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ways_to_store_data&quot;&gt;¶&lt;/a&gt;Ways to store data&lt;/h2&gt;
&lt;p&gt;Data is often stored de-normalized, because it would not be feasible to store otherwise.&lt;/p&gt;
&lt;p&gt;There are two main techniques to implement data warehouses, known as Inmon approach and Kimball approach. They are named after Ralph Kimball &lt;em&gt;et al.&lt;/em&gt; for their work on «The Data Warehouse Lifecycle Toolkit», and Bill Inmon &lt;em&gt;et al.&lt;/em&gt; for their work on «Corporate Information Factory» respectively.&lt;/p&gt;
&lt;p&gt;When several independent systems identify and store data in different ways, we face what’s known as the problem of the stovepipe. Something as simple as trying to connect these systems or use their data in a warehouse results in an overly complicated system.&lt;/p&gt;
&lt;p&gt;To tackle this issue, Kimball advocates the use of «conformed dimensions», that is, some dimensions will be «of interest», and have the same attributes and rollups (or at least a subset) in different data marts. This way, warehouses contain dimensional databases to ease analysis in the data marts it is composed of, and users query the warehouse.&lt;/p&gt;
&lt;p&gt;The Inmon approach on the other hand has the warehouse laid out in third normal form, and users query the data marts, not the warehouse (so the data marts are dimensional in nature).&lt;/p&gt;
&lt;h2 id=&quot;key_takeaways&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#key_takeaways&quot;&gt;¶&lt;/a&gt;Key takeaways&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;«BI» stands for «Business Intelligence» and refers to the system that &lt;em&gt;perform&lt;/em&gt; data analysis.&lt;/li&gt;
&lt;li&gt;«BISM» stands for «Business Intelligence Semantic Model», and Microsoft has two languages to query data: MDX and DAX.&lt;/li&gt;
&lt;li&gt;«OLAP» stands for «Online Analytical Processing», and «OLTP» for «Online Transaction Processing».&lt;/li&gt;
&lt;li&gt;Data mart, warehouse and lake refer to places at different scales and with different needs to store data.&lt;/li&gt;
&lt;li&gt;Inmon and Kimbal are different ways to implement data warehouses.&lt;/li&gt;
&lt;li&gt;Data facts contains various measures arranged into different dimensions, which together form a data cube.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://media.wiley.com/product_data/excerpt/03/11181011/1118101103-157.pdf&quot;&gt;Chapter 1 – Professional Microsoft SQL Server 2012 Analysis Services with MDX and DAX (Harinath et al., 2012)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/m_DzhW-2pWI&quot;&gt;YouTube – Data Mining in SQL Server Analysis Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Almacenes de Datos y Procesamiento Analítico On-Line (Félix R.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/qkJOace9FZg&quot;&gt;YouTube – What are Dimensions and Measures?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.holistics.io/blog/data-lake-vs-data-warehouse-vs-data-mart/&quot;&gt;Data Lake vs Data Warehouse vs Data Mart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Cassandra: Introducción</title><id>dist/cassandra-introduccion/index.html</id><updated>2020-03-29T22:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>Este es el primer post en la serie sobre Cassandra, en el cuál introduciremos dicha bases de datos NoSQL y veremos sus características e instalación.</summary><content type="html" src="dist/cassandra-introduccion/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Cassandra: Introducción&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;&lt;img src=&quot;1200px-Cassandra_logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-03-30&lt;/div&gt;
&lt;p&gt;Este es el primer post en la serie sobre Cassandra, en el cuál introduciremos dicha bases de datos NoSQL y veremos sus características e instalación.&lt;/p&gt;
&lt;p&gt;Otros posts en esta serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/cassandra-introduccion/&quot;&gt;Cassandra: Introducción&lt;/a&gt; (este post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/cassandra-operaciones-basicas-y-arquitectura/&quot;&gt;Cassandra: Operaciones Básicas y Arquitectura&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este post está hecho en colaboración con un compañero.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 class=&quot;title&quot; id=&quot;finalidad_de_la_tecnología&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#finalidad_de_la_tecnología&quot;&gt;¶&lt;/a&gt;Finalidad de la tecnología&lt;/h2&gt;
&lt;p&gt;Apache Cassandra es una base de datos NoSQL distribuida y de código abierto (&lt;a href=&quot;https://github.com/apache/cassandra&quot;&gt;con un espejo en GitHub&lt;/a&gt;). Su filosofía es de tipo «clave-valor», y puede manejar grandes volúmenes de datos&lt;/p&gt;
&lt;p&gt;Entre sus objetivos, busca ser escalable horizontalmente (puede replicarse en varios centros manteniendo la latencia baja) y alta disponibilidad sin ceder en rendimiento.&lt;/p&gt;
&lt;h2 id=&quot;cómo_funciona&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cómo_funciona&quot;&gt;¶&lt;/a&gt;Cómo funciona&lt;/h2&gt;
&lt;p&gt;Instancias de Cassandra se distribuyen en nodos iguales (es decir, no hay maestro-esclavo) que se comunican entre sí (P2P). De este modo, da buen soporte entre varios centros de datos, con redundancia y réplicas síncronas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;multiple-data-centers-and-data-replication-in-cassandra.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Con respecto al modelo de datos, Cassandra particiona las filas con el objetivo de re-organizarla a lo largo distintas tablas. Como clave primaria, se usa un primer componente conocido como «clave de la partición». Dentro de cada partición, las filas se agrupan según el resto de columnas de la clave. Cualquier otra columna se puede indexar independientemente de la clave primaria.&lt;/p&gt;
&lt;p&gt;Las tablas se pueden crear, borrar, actualizar y consultar sin bloqueos. No hay soporte para JOIN o subconsultas, pero Cassandra prefiere de-normalizar los datos haciendo uso de características como coleciones.&lt;/p&gt;
&lt;p&gt;Para realizar las operaciones sobre cassandra se usa CQL (Cassandra Query Language), que tiene una sintaxis muy similar a SQL.&lt;/p&gt;
&lt;h2 id=&quot;características&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#características&quot;&gt;¶&lt;/a&gt;Características&lt;/h2&gt;
&lt;p&gt;Como ya hemos mencionado antes, la arquitectura de Cassandra es &lt;strong&gt;decentralizada&lt;/strong&gt;. No tiene un único punto que pudiera fallar porque todos los nodos son iguales (sin maestros), y por lo tanto, cualquiera puede dar servicio a la petición.&lt;/p&gt;
&lt;p&gt;Los datos se encuentran &lt;strong&gt;replicados&lt;/strong&gt; entre los distintos nodos del clúster (lo que ofrece gran &lt;strong&gt;tolerancia a fallos&lt;/strong&gt; sin necesidad de interrumpir la aplicación), y es trivial &lt;strong&gt;escalar&lt;/strong&gt; añadiendo más nodos al sistema.&lt;/p&gt;
&lt;p&gt;El nivel de &lt;strong&gt;consistencia&lt;/strong&gt; para lecturas y escrituras es configurable.&lt;/p&gt;
&lt;p&gt;Siendo de la familia Apache, Cassandra ofrece integración con Apache Hadoop para tener soporte MapReduce.&lt;/p&gt;
&lt;h2 id=&quot;arista_dentro_del_teorema_cap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#arista_dentro_del_teorema_cap&quot;&gt;¶&lt;/a&gt;Arista dentro del Teorema CAP&lt;/h2&gt;
&lt;p&gt;Cassandra se encuentra dentro de la esquina «AP» junto con CouchDB y otros, porque garantiza tanto la disponibilidad como la tolerancia a fallos.&lt;/p&gt;
&lt;p&gt;Sin embargo, puede configurarse como un sistema «CP» si se prefiere respetar la consistencia en todo momento.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;0.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;descarga&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#descarga&quot;&gt;¶&lt;/a&gt;Descarga&lt;/h2&gt;
&lt;p&gt;Se pueden seguir las instrucciones de la página oficial para &lt;a href=&quot;https://cassandra.apache.org/download/&quot;&gt;descargar Cassandra&lt;/a&gt;. Para ello, se debe clicar en la &lt;a href=&quot;https://www.apache.org/dyn/closer.lua/cassandra/3.11.6/apache-cassandra-3.11.6-bin.tar.gz&quot;&gt;última versión para descargar el archivo&lt;/a&gt;. En nuestro caso, esto es el enlace nombrado «3.11.6», versión que utilizamos.&lt;/p&gt;
&lt;h2 id=&quot;instalación&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#instalación&quot;&gt;¶&lt;/a&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Cassandra no ofrece binarios para Windows, por lo que usaremos Linux para instalarlo. En nuestro caso, tenemos un sistema Linux Mint (derivado de Ubuntu), pero una máquina virtual con cualquier Linux debería funcionar.&lt;/p&gt;
&lt;p&gt;Debemos asegurarnos de tener Java y Python 2 instalado mediante el siguiente comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install openjdk-8-jdk openjdk-8-jre python2.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para verificar que la instalación ha sido correcta, podemos mostrar las versiones de los programas:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ java -version
openjdk version &amp;quot;1.8.0_242&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)
OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)

$ python2 --version
Python 2.7.17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez las dependencias estén instaladas, extraemos el fichero descargado o bien mediante la interfaz gráfica de nuestro sistema, o bien mediante un comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xf apache-cassandra-3.11.6-bin.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y finalmente, lanzar la ejecución de Cassandra:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apache-cassandra-3.11.6/bin/cassandra
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es posible que tarde un poco en abrirse, pero luego debería haber muchas líneas de log indicando. Para apagar el servidor, simplemente basta con pulsar &lt;code&gt;Ctrl+C&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;referencias&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#referencias&quot;&gt;¶&lt;/a&gt;Referencias&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.yugabyte.com/apache-cassandra-architecture-how-it-works-lightweight-transactions/&quot;&gt;Apache Cassandra Architecture Fundamentals – The Distributed SQL Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datastax.com/blog/2019/05/how-apache-cassandratm-balances-consistency-availability-and-performance&quot;&gt;How Apache Cassandra™ Balances Consistency, Availability, and Performance – Datasax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.yugabyte.com/apache-cassandra-architecture-how-it-works-lightweight-transactions/&quot;&gt;Apache Cassandra Architecture Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Privado: NoSQL evaluation</title><id>dist/nosql-evaluation/index.html</id><updated>2020-03-27T23:00:00+00:00</updated><published>2020-03-15T23:00:00+00:00</published><summary>This evaluation is based on the criteria for the first delivery described by Trabajos en grupo sobre Bases de Datos NoSQL.</summary><content type="html" src="dist/nosql-evaluation/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Privado: NoSQL evaluation&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This evaluation is based on the criteria for the first delivery described by Trabajos en grupo sobre Bases de Datos NoSQL.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-16&lt;br&gt;
Modified 2020-03-28&lt;/div&gt;
&lt;p&gt;I have chosen to evaluate the following people and works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a12: Classmate (username) with Druid.&lt;/li&gt;
&lt;li&gt;a21: Classmate (username) with Neo4J.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;title&quot; id=&quot;classmate_s_evaluation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation&quot;&gt;¶&lt;/a&gt;Classmate’s Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: A.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post evaluated is Bases de datos NoSQL – Apache Druid – Primera entrega.&lt;/p&gt;
&lt;p&gt;It is a very well-written, complete post, with each section meeting one of the points in the required criteria. The only thing that bothered me a little is the abuse of strong emphasis in the text, which I found quite distracting. However, the content deserves the highest grading.&lt;/p&gt;
&lt;h2 id=&quot;classmate_s_evaluation_2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#classmate_s_evaluation_2&quot;&gt;¶&lt;/a&gt;Classmate’s Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Grading: A.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post evaluated is Bases de datos NoSQL – Neo4j – Primera entrega.&lt;/p&gt;
&lt;p&gt;Well-written post, although a bit smaller than Classmate’s, but that’s not really an issue. It still talks about everything it should talk and includes photos to go along the text which help. There is no noticeable wrong things in it, so it gets the highest grading as well.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Mining of Massive Datasets</title><id>dist/mining-of-massive-datasets/index.html</id><updated>2020-03-27T23:00:00+00:00</updated><published>2020-03-15T23:00:00+00:00</published><summary>In this post we will talk about the Chapter 1 of the book Mining of Massive Datasets Leskovec, J. et al., available online, and I will summarize and share my thoughts on it.</summary><content type="html" src="dist/mining-of-massive-datasets/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Mining of Massive Datasets&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;In this post we will talk about the Chapter 1 of the book Mining of Massive Datasets Leskovec, J. et al., available online, and I will summarize and share my thoughts on it.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-16&lt;br&gt;
Modified 2020-03-28&lt;/div&gt;
&lt;p&gt;Data mining often refers to the discovery of models for data, where the model can be for statistics, machine learning, summarizing, extracting features, or other computational approaches to perform complex queries on the data.&lt;/p&gt;
&lt;p&gt;Commonly, problems related to data mining involve discovering unusual events hidden in massive data sets. There is another problem when trying to achieve Total Information Awareness (TIA), though, a project that was proposed by the Bush administration but shut down. The problem is, if you look at so much data, and try to find activities that look like (for example) terrorist behavior, inevitably one will find other illicit activities that are not terrorism with bad consequences. So it is important to narrow the activities we are looking for, in this case.&lt;/p&gt;
&lt;p&gt;When looking at data, even completely random data, for a certain event type, the event will likely occur. With more data, it will occur more times. However, these are bogus results. The Bonferroni correction gives a statistically sound way to avoid most of these bogus results, however, the Bonferroni’s Principle can be used as an informal version to achieve the same thing.&lt;/p&gt;
&lt;p&gt;For that, we calculate the expected number of occurrences of the events you are looking for on the assumption that data is random. If this number is way larger than the number of real instances one hoped to find, then nearly everything will be Bogus.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;When analysing documents, some words will be more important than others, and can help determine the topic of the document. One could think the most repeated words are the most important, but that’s far from the truth. The most common words are the stop-words, which carry no meaning, reason why we should remove them prior to processing. We are mostly looking for rare nouns.&lt;/p&gt;
&lt;p&gt;There are of course formal measures for how concentrated into relatively few documents are the occurrences of a given word, known as TF.IDF (Term Frequency times In-verse Document Frequency). We won’t go into details on how to compute it, because there are multiple ways.&lt;/p&gt;
&lt;p&gt;Hash functions are also frequently used, because they can turn hash keys into a bucket number (the index of the bucket where this hash key belongs). They «randomize» and spread the universe of keys into a smaller number of buckets, useful for storage and access.&lt;/p&gt;
&lt;p&gt;An index is an efficient structure to query for values given a key, and can be built with hash functions and buckets.&lt;/p&gt;
&lt;p&gt;Having all of these is important when analysing documents when doing data mining, because otherwise it would take far too long.&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>MongoDB: Operaciones Básicas y Arquitectura</title><id>dist/mongodb-operaciones-basicas-y-arquitectura/index.html</id><updated>2020-03-19T23:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>Este es el segundo post en la serie sobre MongoDB, con una breve descripción de las operaciones básicas (tales como inserción, recuperación e indexado), y ejecución por completo junto con el modelo de datos y arquitectura.</summary><content type="html" src="dist/mongodb-operaciones-basicas-y-arquitectura/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;MongoDB: Operaciones Básicas y Arquitectura&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Este es el segundo post en la serie sobre MongoDB, con una breve descripción de las operaciones básicas (tales como inserción, recuperación e indexado), y ejecución por completo junto con el modelo de datos y arquitectura.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-03-20&lt;/div&gt;
&lt;p&gt;Otros posts en esta serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/mongodb-introduction/&quot;&gt;MongoDB: Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/mongodb-operaciones-basicas-y-arquitectura/&quot;&gt;MongoDB: Operaciones Básicas y Arquitectura&lt;/a&gt; (este post)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este post está hecho en colaboración con un compañero, y en él veremos algunos ejemplos de las operaciones básicas (&lt;a href=&quot;https://stackify.com/what-are-crud-operations/&quot;&gt;CRUD&lt;/a&gt;) sobre MongoDB.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Empezaremos viendo cómo creamos una nueva base de datos dentro de MongoDB y una nueva colección donde poder insertar nuestros documentos.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;creación_de_una_base_de_datos_e_inserción_de_un_primer_documento&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creación_de_una_base_de_datos_e_inserción_de_un_primer_documento&quot;&gt;¶&lt;/a&gt;Creación de una base de datos e inserción de un primer documento&lt;/h2&gt;
&lt;p&gt;Podemos ver las bases de datos que tenemos disponibles ejecutando el comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; show databases
admin   0.000GB
config  0.000GB
local   0.000GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para crear una nueva base de datos, o utilizar una de las que tenemos creadas ejecutamos &lt;code&gt;use&lt;/code&gt; junto con el nombre que le vamos a dar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; use new_DB
switched to db new_DB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez hecho esto, podemos ver que si volvemos a ejecutar «show databases», la nueva base de datos no aparece. Esto es porque para que Mongo registre una base de datos en la lista de las existentes, necesitamos insertar al menos un nuevo documento en una colección de esta. Lo podemos hacer de la siguiente forma:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.movie.insert({&amp;quot;name&amp;quot;:&amp;quot;tutorials point&amp;quot;})
WriteResult({ &amp;quot;nInserted&amp;quot; : 1 })

&amp;gt; show databases
admin       0.000GB
config      0.000GB
local       0.000GB
movie       0.000GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al igual que podemos ver las bases de datos existentes, también podemos consultar las colecciones que existen dentro de estas. Siguiendo la anterior ejecución, si ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; show collections
movie
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar_base_de_datos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#borrar_base_de_datos&quot;&gt;¶&lt;/a&gt;Borrar base de datos&lt;/h3&gt;
&lt;p&gt;Para borrar una base de datos tenemos que ejecutar el siguiente comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.dropDatabase()
{ &amp;quot;dropped&amp;quot; : &amp;quot;new_DB&amp;quot;, &amp;quot;ok&amp;quot; : 1 }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crear_colección&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#crear_colección&quot;&gt;¶&lt;/a&gt;Crear colección&lt;/h3&gt;
&lt;p&gt;Para crear una colección podemos hacerlo de dos formas. O bien mediante el comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.createCollection(&amp;lt;nombre de la colección&amp;gt;, opciones)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Donde el primer parámetro es el nombre que le queremos asignar a la colección, y los siguientes, todos opcionales, pueden ser (entre otros):&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th&gt;
    Campo
   &lt;/th&gt;
   &lt;th&gt;
    Tipo
   &lt;/th&gt;
   &lt;th&gt;
    Descripción
   &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;code&gt;
     capped
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    Booleano
   &lt;/td&gt;
   &lt;td&gt;
    Si es
    &lt;code&gt;
     true
    &lt;/code&gt;
    ,
 permite una colección limitada. Una colección limitada es una colección
 de tamaño fijo que sobrescribe automáticamente sus entradas más 
antiguas cuando alcanza su tamaño máximo. Si especifica
    &lt;code&gt;
     true
    &lt;/code&gt;
    , también debe especificar el parámetro de
    &lt;code&gt;
     size
    &lt;/code&gt;
    .
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;code&gt;
     autoIndexId
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    Booleano
   &lt;/td&gt;
   &lt;td&gt;
    Si es
    &lt;code&gt;
     true
    &lt;/code&gt;
    crea automáticamente un índice en el campo
    &lt;code&gt;
     _id
    &lt;/code&gt;
    . Por defecto es
    &lt;code&gt;
     false
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;code&gt;
     size
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    Número
   &lt;/td&gt;
   &lt;td&gt;
    Especifica el tamaño máximo en bytes para una colección limitada. Es obligatorio si el campo
    &lt;code&gt;
     capped
    &lt;/code&gt;
    está a
    &lt;code&gt;
     true
    &lt;/code&gt;
    .
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;code&gt;
     max
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    Número
   &lt;/td&gt;
   &lt;td&gt;
    Especifica el número máximo de documentos que están permitidos en la colección limitada.
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; use test
switched to db test

&amp;gt; db.createCollection(&amp;quot;mycollection&amp;quot;)
{ &amp;quot;ok&amp;quot; : 1 }

&amp;gt; db.createCollection(&amp;quot;mycol&amp;quot;, {capped : true, autoIndexId: true, size: 6142800, max: 10000})
{
    &amp;quot;note&amp;quot; : &amp;quot;the autoIndexId option is deprecated and will be removed in a future release&amp;quot;,
    &amp;quot;ok&amp;quot; : 1
}

&amp;gt; show collections
mycol
mycollection
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como se ha visto anteriormente al crear la base de datos, podemos insertar un documento en una colección sin que la hayamos creado anteriormente. Esto es porque MongoDB crea automáticamente una colección cuando insertas algún documento en ella:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.tutorialspoint.insert({&amp;quot;name&amp;quot;:&amp;quot;tutorialspoint&amp;quot;})
WriteResult({ &amp;quot;nInserted&amp;quot; : 1 })

&amp;gt; show collections
mycol
mycollection
tutorialspoint
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar_colección&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#borrar_colección&quot;&gt;¶&lt;/a&gt;Borrar colección&lt;/h3&gt;
&lt;p&gt;Para borrar una colección basta con situarnos en la base de datos que la contiene, y ejecutar lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.&amp;lt;nombre_de_la_colección&amp;gt;.drop()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.mycollection.drop()
true

&amp;gt; show collections
mycol
tutorialspoint
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;insertar_documento&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#insertar_documento&quot;&gt;¶&lt;/a&gt;Insertar documento&lt;/h3&gt;
&lt;p&gt;Para insertar datos en una colección de MongoDB necesitaremos usar el método &lt;code&gt;insert()&lt;/code&gt; o &lt;code&gt;save()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ejemplo del método &lt;code&gt;insert&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.colection.insert({
... title: 'Esto es una prueba para MDAD',
... description: 'MongoDB es una BD no SQL',
... by: 'Classmate and Me',
... tags: ['mongodb', 'database'],
... likes: 100
... })
WriteResults({ &amp;quot;nInserted&amp;quot; : 1 })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo solo se ha insertado un único documento, pero podemos insertar los que queramos separándolos de la siguiente forma:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.collection.insert({documento}, {documento2}, {documento3})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No hace falta especificar un ID ya que el propio mongo asigna un ID a cada documento automáticamente, aunque nos da la opción de poder asignarle uno mediante el atributo &lt;code&gt;_id&lt;/code&gt; en la inserción de los datos&lt;/p&gt;
&lt;p&gt;Como se indica en el título de este apartado también se puede insertar mediante el método &lt;code&gt;db.coleccion.save(documento)&lt;/code&gt;, funcionando este como el método &lt;code&gt;insert&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;método_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#método_&quot;&gt;¶&lt;/a&gt;Método &lt;code&gt;find()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;El método find en MongoDB es el que nos permite realizar consultas a las colecciones de nuestra base de datos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.&amp;lt;nombre_de_la_colección&amp;gt;.find()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método mostrará de una forma no estructurada todos los documentos de la colección. Si le añadimos la función &lt;code&gt;pretty&lt;/code&gt; a este método, se mostrarán de una manera más «bonita».&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.colection.find()
{ &amp;quot;_id&amp;quot;: ObjectId(&amp;quot;5e738f0989f85a7eafdf044a&amp;quot;), &amp;quot;title&amp;quot; : &amp;quot;Esto es una prueba para MDAD&amp;quot;, &amp;quot;description&amp;quot; : &amp;quot;MongoDB es una BD no SQL&amp;quot;, &amp;quot;by&amp;quot; : &amp;quot;Classmate and Me&amp;quot;, &amp;quot;tags&amp;quot; : [ &amp;quot;mongodb&amp;quot;, &amp;quot;database&amp;quot; ], &amp;quot;likes&amp;quot; : 100 }

&amp;gt; db.colection.find().pretty()
{
    &amp;quot;_id&amp;quot;: ObjectId(&amp;quot;5e738f0989f85a7eafdf044a&amp;quot;),
    &amp;quot;title&amp;quot; : &amp;quot;Esto es una prueba para MDAD&amp;quot;,
    &amp;quot;description&amp;quot; : &amp;quot;MongoDB es una BD no SQL&amp;quot;,
    &amp;quot;by&amp;quot; : &amp;quot;Classmate and Me&amp;quot;,
    &amp;quot;tags&amp;quot; : [
        &amp;quot;mongodb&amp;quot;,
        &amp;quot;database&amp;quot;
    ],
    &amp;quot;likes&amp;quot; : 100
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los equivalentes del &lt;code&gt;where&lt;/code&gt; en las bases de datos relacionales son:&lt;/p&gt;
&lt;table class=&quot;&quot;&gt;
 &lt;thead&gt;
  &lt;tr&gt;
   &lt;th&gt;
    Operación
   &lt;/th&gt;
   &lt;th&gt;
    Sintaxis
   &lt;/th&gt;
   &lt;th&gt;
    Ejemplo
   &lt;/th&gt;
   &lt;th&gt;
    Equivalente en RDBMS
   &lt;/th&gt;
  &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Igual
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {&amp;lt;clave&amp;gt;:&amp;lt;valor&amp;gt;}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     db.mycol.find({&quot;by&quot;:&quot;Classmate and Me&quot;})
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where by = 'Classmate and Me'
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Menor que
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {&amp;lt;clave&amp;gt;:{$lt:&amp;lt;valor&amp;gt;}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     db.mycol.find({&quot;likes&quot;:{$lt:60}})
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where likes &amp;lt; 60
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Menor o igual que
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {&amp;lt;clave&amp;gt;:{$lte:&amp;lt;valor&amp;gt;}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     db.mycol.find({&quot;likes&quot;:{$lte:60}})
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where likes &amp;lt;= 60
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Mayor que
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {&amp;lt;clave&amp;gt;:{$gt:&amp;lt;valor&amp;gt;}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     db.mycol.find({&quot;likes&quot;:{$gt:60}})
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where likes &amp;gt; 60
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    Mayor o igual que
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {&amp;lt;clave&amp;gt;:{$gte:&amp;lt;valor&amp;gt;}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     db.mycol.find({&quot;likes&quot;:{$gte:60}})
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where likes &amp;gt;= 60
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    No igual
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     {&amp;lt;clave&amp;gt;:{$ne:&amp;lt;valor&amp;gt;}}
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     db.mycol.find({&quot;likes&quot;:{$ne:60}})
    &lt;/code&gt;
   &lt;/td&gt;
   &lt;td&gt;
    &lt;code&gt;
     where likes != 60
    &lt;/code&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;En el método &lt;code&gt;find()&lt;/code&gt; podemos añadir condiciones AND y OR de la siguiente manera:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(AND)
&amp;gt; db.colection.find({$and:[{&amp;quot;by&amp;quot;:&amp;quot;Classmate and Me&amp;quot;},{&amp;quot;title&amp;quot;: &amp;quot;Esto es una prueba para MDAD&amp;quot;}]}).pretty()

(OR)
&amp;gt; db.colection.find({$or:[{&amp;quot;by&amp;quot;:&amp;quot;Classmate and Me&amp;quot;},{&amp;quot;title&amp;quot;: &amp;quot;Esto es una prueba para MDAD&amp;quot;}]}).pretty()

(Ambos a la vez)
&amp;gt; db.colection.find({&amp;quot;likes&amp;quot;: {$gt:10}, $or: [{&amp;quot;by&amp;quot;: &amp;quot;Classmate and Me&amp;quot;}, {&amp;quot;title&amp;quot;: &amp;quot;Esto es una prueba para MDAD&amp;quot;}]}).pretty()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La última llamada con ambos a la vez equivalente en una consulta SQL a:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;where likes&amp;gt;10 AND (by = 'Classmate and Me' OR title = 'Esto es una prueba para MDAD')
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;actualizar_un_documento&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#actualizar_un_documento&quot;&gt;¶&lt;/a&gt;Actualizar un documento&lt;/h3&gt;
&lt;p&gt;En MongoDB se hace utilizando el método &lt;code&gt;update&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.&amp;lt;nombre_colección&amp;gt;.update(&amp;lt;criterio_de_selección&amp;gt;, &amp;lt;dato_actualizado&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para este ejemplo vamos a actualizar el documento que hemos insertado en el apartado anterior:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.colection.update({'title':'Esto es una prueba para MDAD'},{$set:{'title':'Título actualizado'}})
WriteResult({ &amp;quot;nMatched&amp;quot; : 1, &amp;quot;nUpserted&amp;quot; : 0, &amp;quot;nModified&amp;quot; : 1 })
&amp;gt; db.colection.find().pretty()
{
    &amp;quot;_id&amp;quot;: ObjectId(&amp;quot;5e738f0989f85a7eafdf044a&amp;quot;),
    &amp;quot;title&amp;quot; : &amp;quot;Título actualizado&amp;quot;,
    &amp;quot;description&amp;quot; : &amp;quot;MongoDB es una BD no SQL&amp;quot;,
    &amp;quot;by&amp;quot; : &amp;quot;Classmate and Me&amp;quot;,
    &amp;quot;tags&amp;quot; : [
        &amp;quot;mongodb&amp;quot;,
        &amp;quot;database&amp;quot;
    ],
    &amp;quot;likes&amp;quot; : 100
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anteriormente se ha mencionado el método &lt;code&gt;save()&lt;/code&gt; para la inserción de documentos, pero también podemos utilizarlo para sustituir documentos enteros por uno nuevo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.&amp;lt;nombre_de_la_colección&amp;gt;.save({_id:ObjectId(), &amp;lt;nuevo_documento&amp;gt;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con nuestro documento:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.colection.save(
...   {
...     &amp;quot;_id&amp;quot;: ObjectId(&amp;quot;5e738f0989f85a7eafdf044a&amp;quot;), &amp;quot;title&amp;quot;: &amp;quot;Este es el nuevo título&amp;quot;, &amp;quot;by&amp;quot;: &amp;quot;MDAD&amp;quot;
...   }
... )
WriteResult({ &amp;quot;nMatched&amp;quot; : 1, &amp;quot;nUpserted&amp;quot; : 0, &amp;quot;nModified&amp;quot; : 1 })

&amp;gt; db.colection.find()
{
    &amp;quot;_id&amp;quot;: ObjectId(&amp;quot;5e738f0989f85a7eafdf044a&amp;quot;),
    &amp;quot;title&amp;quot;: &amp;quot;Este es el nuevo título&amp;quot;,
    &amp;quot;by&amp;quot;: &amp;quot;MDAD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar_documento&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#borrar_documento&quot;&gt;¶&lt;/a&gt;Borrar documento&lt;/h3&gt;
&lt;p&gt;Para borrar un documento utilizaremos el método &lt;code&gt;remove()&lt;/code&gt; de la siguiente manera:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.&amp;lt;nombre_de_la_colección&amp;gt;.remove(&amp;lt;criterio_de_borrado&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Considerando la colección del apartado anterior borraremos el único documento que tenemos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.colection.remove({'title': 'Este es el nuevo título'})
WriteResult({ &amp;quot;nRemoved&amp;quot; : 1 })
&amp;gt; db.colection.find().pretty()
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para borrar todos los documentos de una colección usamos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.&amp;lt;colección&amp;gt;.remove({})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;indexación&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#indexación&quot;&gt;¶&lt;/a&gt;Indexación&lt;/h3&gt;
&lt;p&gt;MongDB nos permite crear índices sobre atributos de una colección de la siguiente forma:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.&amp;lt;colección&amp;gt;.createIndex( {&amp;lt;atributo&amp;gt;:&amp;lt;opciones&amp;gt;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.mycol.createIndex({&amp;quot;title&amp;quot;:1})
{
    &amp;quot;createdCollectionAutomatically&amp;quot; : false,
    &amp;quot;numIndexesBefore&amp;quot; : 1,
    &amp;quot;numIndexesAfter&amp;quot; : 2,
    &amp;quot;ok&amp;quot; : 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos más de un atributo en el índice lo haremos así:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; db.mycol.ensureIndex({&amp;quot;title&amp;quot;:1,&amp;quot;description&amp;quot;:-1})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los valores que puede tomar son &lt;code&gt;+1&lt;/code&gt; para ascendente o &lt;code&gt;-1&lt;/code&gt; para descendente.&lt;/p&gt;
&lt;h3 id=&quot;referencias&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#referencias&quot;&gt;¶&lt;/a&gt;Referencias&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Manual MongoDB. (n.d.). &lt;a href=&quot;https://docs.mongodb.com/manual/&quot;&gt;https://docs.mongodb.com/manual/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MongoDB Tutorial – Tutorialspoint. (n.d.). – &lt;a href=&quot;https://www.tutorialspoint.com/mongodb/index.htm&quot;&gt;https://www.tutorialspoint.com/mongodb/index.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>MongoDB: Introducción</title><id>dist/mongodb-introduction/index.html</id><updated>2020-03-19T23:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>Este es el primer post en la serie sobre Mongo, en el cuál introduciremos dicha bases de datos NoSQL y veremos sus características e instalación.</summary><content type="html" src="dist/mongodb-introduction/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;MongoDB: Introducción&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Este es el primer post en la serie sobre Mongo, en el cuál introduciremos dicha bases de datos NoSQL y veremos sus características e instalación.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-03-20&lt;/div&gt;
&lt;p&gt;Otros posts en esta serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/mongodb-introduction/&quot;&gt;MongoDB: Introducción&lt;/a&gt; (este post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/mongodb-operaciones-basicas-y-arquitectura/&quot;&gt;MongoDB: Operaciones Básicas y Arquitectura&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este post está hecho en colaboración con un compañero.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;0LRP4__jIIkJ-0gl8j2RDzWscL1Rto-NwvdqzmYk0jmYBIVbJ78n1ZLByPgV.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;definición&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#definición&quot;&gt;¶&lt;/a&gt;Definición&lt;/h2&gt;
&lt;p&gt;MongoDB es una base de datos orientada a documentos. Esto quiere decir que en lugar de guardar los datos en registros, guarda los datos en documentos. Estos documentos son almacenados en BSON, que es una representación binaria de JSON. Una de las principales diferencias respecto a las bases de datos relacionales es que no necesita seguir ningún esquema, los documentos de una misma colección pueden tener esquemas diferentes.&lt;/p&gt;
&lt;p&gt;MongoDB está escrito en C++, aunque las consultas se hacen pasando objetos JSON como parámetro.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
        &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;52f602d787945c344bb4bda5&amp;quot;),
        &amp;quot;name&amp;quot; : &amp;quot;Tyrion&amp;quot;,
        &amp;quot;hobbies&amp;quot; : [ 
            &amp;quot;books&amp;quot;, 
            &amp;quot;girls&amp;quot;, 
            &amp;quot;wine&amp;quot;
        ],
        &amp;quot;friends&amp;quot; : [ 
            {
                &amp;quot;name&amp;quot; : &amp;quot;Bronn&amp;quot;,
                &amp;quot;ocuppation&amp;quot; : &amp;quot;sellsword&amp;quot;
            }, 
            {
                &amp;quot;name&amp;quot; : &amp;quot;Shae&amp;quot;,
                &amp;quot;ocuppation&amp;quot; : &amp;quot;handmaiden&amp;quot;
            }
        ]
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;características&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#características&quot;&gt;¶&lt;/a&gt;Características&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;WxZenSwSsimGvXVu5XH4cFUd3kr3Is_arrdSZGX8Hi0Ligqgw_ZTvGSIeXZm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;MongoDB alcanza un balance perfecto entre rendimiento y funcionalidad gracias a su sistema de consulta de contenidos. Pero sus características principales no se limitan solo a esto, también cuenta con otras que lo posicionan como el preferido de muchos desarrolladores de aplicaciones como aplicaciones móviles, gaming, logging o e-commerce.&lt;/p&gt;
&lt;p&gt;Algunas de las principales características de esta base de datos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Almacenamiento orientado a documentos (documentos JSON con esquemas dinámicos).&lt;/li&gt;
&lt;li&gt;Soporte Full index: puede crear índices sobre cualquier atributo y añadir múltiples índices secundarios.&lt;/li&gt;
&lt;li&gt;Replicación y alta disponibilidad: espejos entre LANs y WANs.&lt;/li&gt;
&lt;li&gt;Auto-Sharding: escalabilidad horizontal sin comprometer la funcionalidad, está limitada, actualmente, a 20 nodos, aunque el objetivo es alcanzar una cifra cercana a los 1000.&lt;/li&gt;
&lt;li&gt;Consultas ricas y basadas en documentos.&lt;/li&gt;
&lt;li&gt;Rápidas actualizaciones en el contexto.&lt;/li&gt;
&lt;li&gt;Soporte comercial, capacitación y consultoría disponibles.&lt;/li&gt;
&lt;li&gt;También puede ser utilizada para el almacenamiento de archivos aprovechando la capacidad de MongoDB para el balanceo de carga y la replicación de datos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En cuanto a la arquitectura, podríamos decir que divide en tres partes: las bases de datos, las colecciones y los documentos (que contienen los campos de cada entrada).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base de datos&lt;/strong&gt;: cada una de las bases de datos tiene un conjunto propio de archivos en el sistema de archivos con diversas bases de datos existentes en un solo servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Colección&lt;/strong&gt;: un conjunto de documentos de base de datos. El equivalente RDBMS de la colección es una tabla. Toda colección existe dentro de una única base de datos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documento&lt;/strong&gt;: un conjunto de pares clave/valor. Los documentos están asociados con esquemas dinámicos. La ventaja de tener esquemas dinámicos es que el documento en una sola colección no tiene que tener la misma estructura o campos. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;arista_dentro_del_teorema_cap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#arista_dentro_del_teorema_cap&quot;&gt;¶&lt;/a&gt;Arista dentro del Teorema CAP&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;t73Q1t-HXfWij-Q1o5AYEnO39Kz2oyLLCdQz6lWQQPaSQWamlDMjmptAn97h.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;MongoDB es CP por defecto, es decir, garantiza consistencia y tolerancia a particiones (fallos). Pero también podemos configurar el nivel de consistencia, eligiendo el número de nodos a los que se replicarán los datos. O podemos configurar si se pueden leer datos de los nodos secundarios (en MongoDB solo hay un servidor principal, que es el único que acepta inserciones o modificaciones). Si permitimos leer de un nodo secundario mediante la replicación, sacrificamos consistencia, pero ganamos disponibilidad.&lt;/p&gt;
&lt;h2 id=&quot;descarga_e_instalación&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#descarga_e_instalación&quot;&gt;¶&lt;/a&gt;Descarga e instalación&lt;/h2&gt;
&lt;h3 id=&quot;windows&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#windows&quot;&gt;¶&lt;/a&gt;Windows&lt;/h3&gt;
&lt;p&gt;Descargar el archivo desde &lt;a href=&quot;https://www.mongodb.com/download-center#production&quot;&gt;https://www.mongodb.com/download-center#production&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Doble clic en el archivo &lt;code&gt;.msi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;El instalador de Windows lo guía a través del proceso de instalación.
Si elige la opción de instalación personalizada, puede especificar un directorio de instalación. 
MongoDB no tiene ninguna otra dependencia del sistema. Puede instalar y ejecutar MongoDB desde cualquier carpeta que elija.&lt;/li&gt;
&lt;li&gt;Ejecutar el &lt;code&gt;.exe&lt;/code&gt; que hemos instalado.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;linux&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#linux&quot;&gt;¶&lt;/a&gt;Linux&lt;/h3&gt;
&lt;p&gt;Abrimos una terminal y ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt install -y mongodb-org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luego comprobamos el estado del servicio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl start mongod
sudo systemctl status mongod
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente ejecutamos la base de datos con el comando:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;macos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#macos&quot;&gt;¶&lt;/a&gt;macOS&lt;/h3&gt;
&lt;p&gt;Abrimos una terminal y ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew update
brew install mongodb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Iniciamos el servicio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew services start mongodb
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;referencias&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#referencias&quot;&gt;¶&lt;/a&gt;Referencias&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://expertoenbigdata.com/que-es-mongodb/#La_arquitectura_de_MongoDB&quot;&gt;Todo lo que debes saber sobre MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ecured.cu/MongoDB&quot;&gt;MongoDB – EcuRed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mappinggis.com/2014/07/mongodb-y-gis/&quot;&gt;Bases de datos NoSQL, MongoDB y GIS – MappingGIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es.slideshare.net/maxfontana90/caractersticas-mongo-db&quot;&gt;Características MONGO DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openwebinars.net/blog/que-es-mongodb&quot;&gt;Qué es MongoDB y características&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.genbeta.com/desarrollo/mongodb-que-es-como-funciona-y-cuando-podemos-usarlo-o-no&quot;&gt;MongoDB. Qué es, cómo funciona y cuándo podemos usarlo (o no)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.mongodb.com/&quot;&gt;MongoDB Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.genbeta.com/desarrollo/nosql-clasificacion-de-las-bases-de-datos-segun-el-teorema-cap&quot;&gt;NoSQL: Clasificación de las bases de datos según el teorema CAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Cassandra: Operaciones Básicas y Arquitectura</title><id>dist/cassandra-operaciones-basicas-y-arquitectura/index.html</id><updated>2020-03-19T23:00:00+00:00</updated><published>2020-03-04T23:00:00+00:00</published><summary>Este es el segundo post en la serie sobre Cassandra, con una breve descripción de las operaciones básicas (tales como inserción, recuperación e indexado), y ejecución por completo junto con el modelo de datos y arquitectura.</summary><content type="html" src="dist/cassandra-operaciones-basicas-y-arquitectura/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Cassandra: Operaciones Básicas y Arquitectura&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Este es el segundo post en la serie sobre Cassandra, con una breve descripción de las operaciones básicas (tales como inserción, recuperación e indexado), y ejecución por completo junto con el modelo de datos y arquitectura.&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-05&lt;br&gt;
Modified 2020-03-20&lt;/div&gt;
&lt;p&gt;Otros posts en esta serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/cassandra-introduccion/&quot;&gt;Cassandra: Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/mdad/cassandra-operaciones-basicas-y-arquitectura/&quot;&gt;Cassandra: Operaciones Básicas y Arquitectura&lt;/a&gt; (este post)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este post está hecho en colaboración con un compañero.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Antes de poder ejecutar ninguna consulta, debemos lanzar la base de datos en caso de que no se encuentre en ejecución aún. Para ello, en una terminal, lanzamos el binario de &lt;code&gt;cassandra&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cassandra-3.11.6/bin/cassandra
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin cerrar esta consola, abrimos otra en la que podamos usar la &lt;a href=&quot;https://cassandra.apache.org/doc/latest/tools/cqlsh.html&quot;&gt;CQL shell&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cassandra-3.11.6/bin/cqlsh
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 3.11.6 | CQL spec 3.4.4 | Native protocol v4]
Use HELP for help.
cqlsh&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class=&quot;title&quot; id=&quot;crear&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#crear&quot;&gt;¶&lt;/a&gt;Crear&lt;/h2&gt;
&lt;h3 id=&quot;crear_una_base_de_datos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#crear_una_base_de_datos&quot;&gt;¶&lt;/a&gt;Crear una base de datos&lt;/h3&gt;
&lt;p&gt;Cassandra denomina a las «bases de datos» como «espacio de claves» (keyspace en inglés).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh&amp;gt; create keyspace helloworld with replication = {'class': 'SimpleStrategy', 'replication_factor': 3};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando creamos un nuevo &lt;em&gt;keyspace&lt;/em&gt;, indicamos el nombre y la estrategia de replicación a usar. Nosotros usamos la estrategia simple con un factor 3 de replicación.&lt;/p&gt;
&lt;h3 id=&quot;crear_una_tabla&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#crear_una_tabla&quot;&gt;¶&lt;/a&gt;Crear una tabla&lt;/h3&gt;
&lt;p&gt;Una vez estemos dentro de un &lt;em&gt;keyspace&lt;/em&gt;, podemos crear tablas. Vamos a crear una tabla llamada «greetings» con identificador (número entero), mensaje (texto) y lenguaje (&lt;code&gt;varchar&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh&amp;gt; use helloworld;
cqlsh:helloworld&amp;gt; create table greetings(id int primary key, message text, lang varchar);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crear_una_fila&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#crear_una_fila&quot;&gt;¶&lt;/a&gt;Crear una fila&lt;/h3&gt;
&lt;p&gt;Insertar nuevas filas es similar a otros sistemas gestores de datos, mediante la sentencia &lt;code&gt;INSERT&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:helloworld&amp;gt; insert into greetings(id, message, lang) values(1, '¡Bienvenido!', 'es');
cqlsh:helloworld&amp;gt; insert into greetings(id, message, lang) values(2, 'Welcome!', 'es');
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;leer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#leer&quot;&gt;¶&lt;/a&gt;Leer&lt;/h2&gt;
&lt;p&gt;La lectura se lleva a cabo mediante la sentencia &lt;code&gt;SELECT&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:helloworld&amp;gt; select * from greetings;

 id | lang | message
----+------+--------------
  1 |   es | ¡Bienvenido!
  2 |   es |     Welcome!

(2 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cqlsh&lt;/code&gt; colorea la salida, lo cuál resulta muy útil para identificar la clave primaria y distintos tipos de datos como texto, cadenas o números:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;actualizar&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#actualizar&quot;&gt;¶&lt;/a&gt;Actualizar&lt;/h2&gt;
&lt;p&gt;La actualización se lleva a cabo con la sentencia &lt;code&gt;UPDATE&lt;/code&gt;. Vamos a arreglar el fallo que hemos cometido al insertar «Welcome!» como español:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:helloworld&amp;gt; update greetings set lang = 'en' where id = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;indexar&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#indexar&quot;&gt;¶&lt;/a&gt;Indexar&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:helloworld&amp;gt; create index langIndex on greetings(lang);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;borrar&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#borrar&quot;&gt;¶&lt;/a&gt;Borrar&lt;/h2&gt;
&lt;p&gt;Finalmente, el borrado se lleva a cabo con la sentencia &lt;code&gt;DELETE&lt;/code&gt;. Es posible borrar solo campos individuales, lo cuál los pone a nulos:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:helloworld&amp;gt; delete message from greetings where id = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para eliminar la fila entera, basta con no especificar la columna:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cqlsh:helloworld&amp;gt; delete from greetings where id = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;referencias&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#referencias&quot;&gt;¶&lt;/a&gt;Referencias&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/cassandra/cassandra_create_keyspace.htm&quot;&gt;tutorialspoint – Creating a Keyspace using Cqlsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/cassandra/cassandra_cql_datatypes.htm&quot;&gt;tutorialspoint – Cassandra – CQL Datatypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/cassandra/cassandra_create_table.htm&quot;&gt;tutorialspoint – Cassandra – Create Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://data-flair.training/blogs/cassandra-crud-operation/&quot;&gt;Data Flair – Cassandra Crud Operation – Create, Update, Read &amp;amp; Delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cassandra.apache.org/doc/latest/cql/indexes.html&quot;&gt;Cassandra Documentation – Secondary Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Visualizing Cáceres’ OpenData</title><id>dist/visualizing-caceres-opendata/index.html</id><updated>2020-03-18T23:00:00+00:00</updated><published>2020-03-08T23:00:00+00:00</published><summary>The city of Cáceres has online services to provide </summary><content type="html" src="dist/visualizing-caceres-opendata/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Visualizing Cáceres’ OpenData&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;The city of Cáceres has online services to provide &lt;a href=&quot;http://opendata.caceres.es/&quot;&gt;Open Data&lt;/a&gt; over a wide range of &lt;a href=&quot;http://opendata.caceres.es/dataset&quot;&gt;categories&lt;/a&gt;, all of which are very interesting to explore!&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-03-09&lt;br&gt;
Modified 2020-03-19&lt;/div&gt;
&lt;p&gt;We have chosen two different datasets, and will explore four different ways to visualize the data.&lt;/p&gt;
&lt;p&gt;This post is co-authored with Classmate.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;obtain_the_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obtain_the_data&quot;&gt;¶&lt;/a&gt;Obtain the data&lt;/h2&gt;
&lt;p&gt;We are interested in the JSON format for the &lt;a href=&quot;http://opendata.caceres.es/dataset/informacion-del-padron-de-caceres-2017&quot;&gt;census in 2017&lt;/a&gt; and those for the &lt;a href=&quot;http://opendata.caceres.es/dataset/vias-urbanas-caceres&quot;&gt;vias of the city&lt;/a&gt;. This way, we can explore the population and their location in interesting ways! You may follow those two links and select the JSON format under Resources to download it.&lt;/p&gt;
&lt;p&gt;Why JSON? We will be using &lt;a href=&quot;https://python.org/&quot;&gt;Python&lt;/a&gt; (3.7 or above) and &lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; for quick iteration, and loading the data with &lt;a href=&quot;https://docs.python.org/3/library/json.html&quot;&gt;Python’s &lt;code&gt;json&lt;/code&gt; module&lt;/a&gt; will be trivial.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementation&quot;&gt;¶&lt;/a&gt;Implementation&lt;/h2&gt;
&lt;h3 id=&quot;imports_and_constants&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#imports_and_constants&quot;&gt;¶&lt;/a&gt;Imports and constants&lt;/h3&gt;
&lt;p&gt;We are going to need a lot of things in this code, such as &lt;code&gt;json&lt;/code&gt; to load the data, &lt;code&gt;matplotlib&lt;/code&gt; to visualize it, and other data types and type hinting for use in the code.&lt;/p&gt;
&lt;p&gt;We also want automatic download of the JSON files if they’re missing, so we add their URLs and download paths as constants.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import json
import re
import os
import sys
import urllib.request
import matplotlib.pyplot as plt
from dataclasses import dataclass
from collections import namedtuple
from datetime import date
from pathlib import Path
from typing import Optional

CENSUS_URL = 'http://opendata.caceres.es/GetData/GetData?dataset=om:InformacionCENSUS&amp;amp;year=2017&amp;amp;format=json'
VIAS_URL = 'http://opendata.caceres.es/GetData/GetData?dataset=om:Via&amp;amp;format=json'

CENSUS_JSON = Path('data/demografia/Padrón_Cáceres_2017.json')
VIAS_JSON = Path('data/via/Vías_Cáceres.json')
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;data_classes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#data_classes&quot;&gt;¶&lt;/a&gt;Data classes&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/&quot;&gt;Parse, don’t validate&lt;/a&gt;. By defining a clear data model, we will be able to tell at a glance what information we have available. It will also be typed, so we won’t be confused as to what is what! Python 3.7 introduces &lt;code&gt;[dataclasses](https://docs.python.org/3/library/dataclasses.html)&lt;/code&gt;, which are a wonderful feature to define… well, data classes concisely.&lt;/p&gt;
&lt;p&gt;We also have a &lt;code&gt;[namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple)&lt;/code&gt; for points, because it’s extremely common to represent them as tuples.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Point = namedtuple('Point', 'long lat')

@dataclass
class Census:
    year: int
    via: int
    count_per_year: dict
    count_per_city: dict
    count_per_gender: dict
    count_per_nationality: dict
    time_year: int

@dataclass
class Via:
    name: str
    kind: str
    code: int
    history: Optional[str]
    old_name: Optional[str]
    length: Optional[float]
    start: Optional[Point]
    middle: Optional[Point]
    end: Optional[Point]
    geometry: Optional[list]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;helper_methods&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#helper_methods&quot;&gt;¶&lt;/a&gt;Helper methods&lt;/h3&gt;
&lt;p&gt;We will have a little helper method to automatically download the JSON when missing. This is just for convenience, we could as well just download it manually. But it is fun to automate things.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def ensure_file(file, url):
    if not file.is_file():
        print('Downloading', file.name, 'because it was missing...', end='', flush=True, file=sys.stderr)
        file.parent.mkdir(parents=True, exist_ok=True)
        urllib.request.urlretrieve(url, file)
        print(' Done.', file=sys.stderr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;parsing_the_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parsing_the_data&quot;&gt;¶&lt;/a&gt;Parsing the data&lt;/h3&gt;
&lt;p&gt;I will be honest, parsing Cáceres’ OpenData is a pain in the neck! The official descriptions are huge and not all that helpful. Maybe if one needs documentation for a specific field. But luckily for us, the names are pretty self-descriptive, and we can explore the data to get a feel for what we will find.&lt;/p&gt;
&lt;p&gt;We define two methods, one to iterate over &lt;code&gt;Census&lt;/code&gt; values, and another to iterate over &lt;code&gt;Via&lt;/code&gt; values. Here’s where our friend &lt;code&gt;[re](https://docs.python.org/3/library/re.html)&lt;/code&gt; comes in, and oh boy the format of the data…&lt;/p&gt;
&lt;p&gt;For example, the year and via identifier are best extracted from the URI! The information is also available in the &lt;code&gt;rdfs_label&lt;/code&gt; field, but that’s just a Spanish text! At least the URI will be more reliable… hopefully.&lt;/p&gt;
&lt;p&gt;Birth date. They could have used a JSON list, but nah, that would’ve been too simple. Instead, you are given a string separated by semicolons. The values? They could have been dictionaries with names for «year» and «age», but nah! That would’ve been too simple! Instead, you are given strings that look like «2001 (7)», and that’s the year and the count.&lt;/p&gt;
&lt;p&gt;The birth place? Sometimes it’s «City (Province) (Count)», but sometimes the province is missing. Gender? Semicolon-separated. And there are only two genders. I know a few people who would be upset just reading this, but it’s not my data, it’s theirs. Oh, and plenty of things are optional. That was a lot of &lt;code&gt;AttributeError: 'NoneType' object has no attribute 'foo'&lt;/code&gt; to work through!&lt;/p&gt;
&lt;p&gt;But as a reward, we have nicely typed data, and we no longer have to deal with this mess when trying to visualize it. For brevity, we will only be showing how to parse the census data, and not the data for the vias. This post is already long enough on its own.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def iter_census(file):
    with file.open() as fd:
        data = json.load(fd)

    for row in data['results']['bindings']:
        year, via = map(int, row['uri']['value'].split('/')[-1].split('-'))

        count_per_year = {}
        for item in row['schema_birthDate']['value'].split(';'):
            y, c = map(int, re.match(r'(\d+) \((\d+)\)', item).groups())
            count_per_year[y] = c

        count_per_city = {}
        for item in row['schema_birthPlace']['value'].split(';'):
            match = re.match(r'([^(]+) \(([^)]+)\) \((\d+)\)', item)
            if match:
                l, _province, c = match.groups()
            else:
                l, c = re.match(r'([^(]+) \((\d+)\)', item).groups()

            count_per_city[l] = int(c)

        count_per_gender = {}
        for item in row['foaf_gender']['value'].split(';'):
            g, c = re.match(r'([^(]+) \((\d+)\)', item).groups()
            count_per_gender[g] = int(c)

        count_per_nationality = {}
        for item in row['schema_nationality']['value'].split(';'):
            match = re.match(r'([^(]+) \((\d+)\)', item)
            if match:
                g, c = match.groups()
            else:
                g, _alt_name, c = re.match(r'([^(]+) \(([^)]+)\) \((\d+)\)', item).groups()

            count_per_nationality[g] = int(c)
        time_year = int(row['time_year']['value'])

        yield Census(
            year=year,
            via=via,
            count_per_year=count_per_year,
            count_per_city=count_per_city,
            count_per_gender=count_per_gender,
            count_per_nationality=count_per_nationality,
            time_year=time_year,
        )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;visualizing_the_data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#visualizing_the_data&quot;&gt;¶&lt;/a&gt;Visualizing the data&lt;/h2&gt;
&lt;p&gt;Here comes the fun part! After parsing all the desired data from the mentioned JSON files, we plotted the data in four different graphics making use of Python’s &lt;a href=&quot;https://matplotlib.org/&quot;&gt;&lt;code&gt;matplotlib&lt;/code&gt; library.&lt;/a&gt; This powerful library helps with the creation of different visualizations in Python.&lt;/p&gt;
&lt;h3 id=&quot;visualizing_the_genders_in_a_pie_chart&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#visualizing_the_genders_in_a_pie_chart&quot;&gt;¶&lt;/a&gt;Visualizing the genders in a pie chart&lt;/h3&gt;
&lt;p&gt;After seeing that there are only two genders in the data of the census, we, displeased, started work in a chart for it. The pie chart was the best option since we wanted to show only the percentages of each gender. The result looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;pie_chart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pretty straight forward, isn’t it? To display this wonderful graphic, we used the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def pie_chart(ax, data):
    lists = sorted(data.items())

    x, y = zip(*lists)
    ax.pie(y, labels=x, autopct='%1.1f%%',
            shadow=True, startangle=90)
    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We pass the axis as the input parameter (later we will explain why) and the data collected from the JSON regarding the genders, which are in a dictionary with the key being the labels and the values the tally of each gender. We sort the data and with some unpacking magic we split it into two values: &lt;code&gt;x&lt;/code&gt; being the labels and &lt;code&gt;y&lt;/code&gt; the amount of each gender.&lt;/p&gt;
&lt;p&gt;After that we plot the pie chart with the data and labels from &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, we specify that we want the percentage with one decimal place with the &lt;code&gt;autopct&lt;/code&gt; parameter, we enable shadows for the presentation, and specify the start angle at 90º.&lt;/p&gt;
&lt;h3 id=&quot;date_tick_labels&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#date_tick_labels&quot;&gt;¶&lt;/a&gt;Date tick labels&lt;/h3&gt;
&lt;p&gt;We wanted to know how many of the living people were born on each year, so we are making a date plot! In the census we have the year each person was born in, and using that information is an easy task after parsing the data (parsing was an important task of this work). The result looks as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;date_tick.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;How did we do this? The following code was used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def date_tick(ax, data):
    lists = sorted(data.items())

    x, y = zip(*lists)
    x = [date(year, 1, 1) for year in x]
    ax.plot(x, y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we pass in an axis and the data related with the year born, we sort it, split it into two lists, being the keys the years and the values the number per year. After that, we put the years in a date format for the plot to be more accurate. Finally, we plot the values into that wonderful graphic.&lt;/p&gt;
&lt;h3 id=&quot;stacked_bar_chart&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stacked_bar_chart&quot;&gt;¶&lt;/a&gt;Stacked bar chart&lt;/h3&gt;
&lt;p&gt;We wanted to know if there was any relation between the latitudes and count per gender, so we developed the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def stacked_bar_chart(ax, data):
    labels = []
    males = []
    females = []

    for latitude, genders in data.items():
        labels.append(str(latitude))
        males.append(genders['Male'])
        females.append(genders['Female'])

    ax.bar(labels, males, label='Males')
    ax.bar(labels, females, bottom=males, label='Females')

    ax.set_ylabel('Counts')
    ax.set_xlabel('Latitudes')
    ax.legend()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key of the data dictionary is the latitude rounded to two decimals, and value is another dictionary, which is composed by the key that is the name of the gender and the value, the number of people per gender. So, in a single entry of the data dictionary we have the latitude and how many people per gender are in that latitude.&lt;/p&gt;
&lt;p&gt;We iterate the dictionary to extract the different latitudes and people per gender (because we know only two genders are used, we hardcode it to two lists). Then we plot them putting the &lt;code&gt;males&lt;/code&gt; and &lt;code&gt;females&lt;/code&gt; lists at the bottom and set the labels of each axis. The result is the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;stacked_bar_chart-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;scatter_plots&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#scatter_plots&quot;&gt;¶&lt;/a&gt;Scatter plots&lt;/h3&gt;
&lt;p&gt;This last graphic was very tricky to get right. It’s incredibly hard to find the extent of a city online! We were getting confused because some of the points were way farther than the centre of Cáceres, and the city background is a bit stretched even if the coordinates appear correct. But in the end, we did a pretty good job on it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def scatter_map(ax, data):
    xs = []
    ys = []
    areas = []
    for (long, lat), count in data.items():
        xs.append(long)
        ys.append(lat)
        areas.append(count / 100)

    if CACERES_MAP.is_file():
        ax.imshow(plt.imread(str(CACERES_MAP)), extent=CACERES_EXTENT)
    else:
        print('Note:', CACERES_MAP, 'does not exist, not showing it', file=sys.stderr)

    ax.scatter(xs, ys, areas, alpha=0.1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time, the keys in the data dictionary are points and the values are the total count of people in that point. We use a normal &lt;code&gt;for&lt;/code&gt; loop to create the different lists. For the areas on how big the circles we are going to represent will be, we divide the count of people by some number, like &lt;code&gt;100&lt;/code&gt;, or otherwise they would be huge.&lt;/p&gt;
&lt;p&gt;If the file of the map is present, we render it so that we can get a sense on where the points are, but if the file is missing we print a warning.&lt;/p&gt;
&lt;p&gt;At last, we draw the scatter plot with some low alpha value (there’s a lot of overlapping points). The result is &lt;em&gt;absolutely gorgeous&lt;/em&gt;. (For some definitions of gorgeous, anyway):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;scatter_map.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Just for fun, here’s what it looks like if we don’t divide the count by 100 and lower the opacity to &lt;code&gt;0.01&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;scatter_map-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That’s a big solid blob, and the opacity is only set to &lt;code&gt;0.01&lt;/code&gt;!&lt;/p&gt;
&lt;h3 id=&quot;drawing_all_the_graphs_in_the_same_window&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#drawing_all_the_graphs_in_the_same_window&quot;&gt;¶&lt;/a&gt;Drawing all the graphs in the same window&lt;/h3&gt;
&lt;p&gt;To draw all the graphs in the same window instead of getting four different windows we made use of the &lt;a href=&quot;https://matplotlib.org/3.2.0/api/_as_gen/matplotlib.pyplot.subplots.html&quot;&gt;&lt;code&gt;subplots&lt;/code&gt; function&lt;/a&gt;, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fig, axes = plt.subplots(2, 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a matrix of two by two of axes that we store in the axes variable (fitting name!). Following this code are the different calls to the methods commented before, where we access each individual axis and pass it to the methods to draw on:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pie_chart(axes[0, 0], genders)
date_tick(axes[0, 1], years)
stacked_bar_chart(axes[1, 0], latitudes)
scatter_map(axes[1, 1], positions)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we plot the different graphics:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wrapping everything together, here’s the result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;figures-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The numbers in some of the graphs are a bit crammed together, but we’ll blame that on &lt;code&gt;matplotlib&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;closing_words&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#closing_words&quot;&gt;¶&lt;/a&gt;Closing words&lt;/h2&gt;
&lt;p&gt;Wow, that was a long journey! We hope that this post helped you pick some interest in data exploration, it’s such a fun world. We also offer the full download for the code below, because we know it’s quite a bit!&lt;/p&gt;
&lt;p&gt;Which of the graphs was your favourite? I personally like the count per date, I think it’s nice to see the growth. Let us know in the comments below!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;download removed&lt;/em&gt;&lt;/p&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>What is an algorithm?</title><id>dist/what-is-an-algorithm/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-02-24T23:00:00+00:00</published><summary>Algorithms are a sequence of instructions that can be followed to achieve </summary><content type="html" src="dist/what-is-an-algorithm/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;What is an algorithm?&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Algorithms are a sequence of instructions that can be followed to achieve &lt;em&gt;something&lt;/em&gt;. That something can be anything, and depends entirely on your problem!&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-02-25&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;p&gt;For example, a recipe to cook some really nice food is an algorithm: it guides you, step by step, to cook something nice. People dealing with mathemathics also apply algorithms to transform their data. And computers &lt;em&gt;love&lt;/em&gt; algorithms, too!&lt;/p&gt;
&lt;p&gt;In reality, any computer program can basically be thought as an algorithm. It contains a series of instructions for the computer to execute. Running them is a process that takes time, consumes input and produces output. This is also why terms like «procedure» come up when talking about them.&lt;/p&gt;
&lt;p&gt;Computer programs (their algorithms) are normally written in some more specific language, like Java or Python. The instructions are very clear here, which is what we need! A natural language like English is a lot harder to process, and ambiguous. I’m sure you’ve been in arguments because the other person didn’t understand you!&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;algorithm – definition and meaning: &lt;a href=&quot;https://www.wordnik.com/words/algorithm&quot;&gt;https://www.wordnik.com/words/algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithm: &lt;a href=&quot;https://en.wikipedia.org/wiki/Algorithm&quot;&gt;https://en.wikipedia.org/wiki/Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What is a «computer algorithm»?: &lt;a href=&quot;https://computer.howstuffworks.com/what-is-a-computer-algorithm.htm&quot;&gt;https://computer.howstuffworks.com/what-is-a-computer-algorithm.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Introduction to NoSQL</title><id>dist/introduction-to-nosql/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-02-24T23:00:00+00:00</published><summary>This post will primarly focus on the talk held in the </summary><content type="html" src="dist/introduction-to-nosql/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Introduction to NoSQL&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;This post will primarly focus on the talk held in the &lt;a href=&quot;https://youtu.be/qI_g07C_Q5I&quot;&gt;GOTO 2012 conference: Introduction to NoSQL by Martin Fowler&lt;/a&gt;. It can be seen as an informal, summarized transcript of the talk&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-02-25&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;The relational database model is affected by the &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;impedance mismatch problem&lt;/a&gt;&lt;/em&gt;. This occurs because we have to match our high-level design with the separate columns and rows used by relational databases.&lt;/p&gt;
&lt;p&gt;Taking the in-memory objects and putting them into a relational database (which were dominant at the time) simply didn’t work out. Why? Relational databases were more than just databases, they served as a an integration mechanism across applications, up to the 2000s. For 20 years!&lt;/p&gt;
&lt;p&gt;With the rise of the Internet and the sheer amount of traffic, databases needed to scale. Unfortunately, relational databases only scale well vertically (by upgrading a &lt;em&gt;single&lt;/em&gt; node). This is &lt;em&gt;very&lt;/em&gt; expensive, and not something many could afford.&lt;/p&gt;
&lt;p&gt;The problem are those pesky &lt;code&gt;JOIN&lt;/code&gt;‘s, and its friends &lt;code&gt;GROUP BY&lt;/code&gt;. Because our program and reality model don’t match the tables used by SQL, we have to rely on them to query the data. It is because the model doesn’t map directly.&lt;/p&gt;
&lt;p&gt;Furthermore, graphs don’t map very well at all to relational models.&lt;/p&gt;
&lt;p&gt;We needed a way to scale horizontally (by increasing the &lt;em&gt;amount&lt;/em&gt; of nodes), something relational databases were not designed to do.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We need to do something different, relational across nodes is an unnatural act&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This inspired the NoSQL movement.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;#nosql was only meant to be a hashtag to advertise it, but unfortunately it’s how it is called now&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not possible to define NoSQL, but we can identify some of its characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-relational&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cluster-friendly&lt;/strong&gt; (this was the original spark)&lt;/li&gt;
&lt;li&gt;Open-source (until now, generally)&lt;/li&gt;
&lt;li&gt;21st century web culture&lt;/li&gt;
&lt;li&gt;Schema-less (easier integration or conjugation of several models, structure aggregation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These databases use different data models to those used by the relational model. However, it is possible to identify 4 broad chunks (some may say 3, or even 2!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Key-value store&lt;/strong&gt;. With a certain key, you obtain the value corresponding to it. It knows nothing else, nor does it care. We say the data is opaque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Document-based&lt;/strong&gt;. It stores an entire mass of documents with complex structure, normally through the use of JSON (XML has been left behind). Then, you can ask for certain fields, structures, or portions. We say the data is transparent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Column-family&lt;/strong&gt;. There is a «row key», and within it we store multiple «column families» (columns that fit together, our aggregate). We access by row-key and column-family name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these kind of serve to store documents without any &lt;em&gt;explicit&lt;/em&gt; schema. Just shove in anything! This gives a lot of flexibility and ease of migration, except… that’s not really true. There’s an &lt;em&gt;implicit&lt;/em&gt; schema when querying.&lt;/p&gt;
&lt;p&gt;For example, a query where we may do &lt;code&gt;anOrder['price'] * anOrder['quantity']&lt;/code&gt; is assuming that &lt;code&gt;anOrder&lt;/code&gt; has both a &lt;code&gt;price&lt;/code&gt; and a &lt;code&gt;quantity&lt;/code&gt;, and that both of these can be multiplied together. «Schema-less» is a fuzzy term.&lt;/p&gt;
&lt;p&gt;However, it is the lack of a &lt;em&gt;fixed&lt;/em&gt; schema that gives flexibility.&lt;/p&gt;
&lt;p&gt;One could argue that the line between key-value and document-based is very fuzzy, and they would be right! Key-value databases often let you include additional metadata that behaves like an index, and in document-based, documents often have an identifier anyway.&lt;/p&gt;
&lt;p&gt;The common notion between these three types is what matters. They save an entire structure as an &lt;em&gt;unit&lt;/em&gt;. We can refer to these as «Aggregate Oriented Databases». Aggregate, because we group things when designing or modeling our systems, as opposed to relational databases that scatter the information across many tables.&lt;/p&gt;
&lt;p&gt;There exists a notable outlier, though, and that’s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Graph&lt;/strong&gt; databases. They use a node-and-arc graph structure. They are great for moving on relationships across things. Ironically, relational databases are not very good at jumping across relationships! It is possibly to perform very interesting queries in graph databases which would be really hard and costly on relational models. Unlike the aggregated databases, graphs break things into even smaller units.
NoSQL is not &lt;em&gt;the&lt;/em&gt; solution. It depends on how you’ll work with your data. Do you need an aggregate database? Will you have a lot of relationships? Or would the relational model be good fit for you?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NoSQL, however, is a good fit for large-scale projects (data will &lt;em&gt;always&lt;/em&gt; grow) and faster development (the impedance mismatch is drastically reduced).&lt;/p&gt;
&lt;p&gt;Regardless of our choice, it is important to remember that NoSQL is a young technology, which is still evolving really fast (SQL has been stable for &lt;em&gt;decades&lt;/em&gt;). But the &lt;em&gt;polyglot persistence&lt;/em&gt; is what matters. One must know the alternatives, and be able to choose.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Relational databases have the well-known ACID properties: Atomicity, Consistency, Isolation and Durability.&lt;/p&gt;
&lt;p&gt;NoSQL (except graph-based!) are about being BASE instead: Basically Available, Soft state, Eventual consistency.&lt;/p&gt;
&lt;p&gt;SQL needs transactions because we don’t want to perform a read while we’re only half-way done with a write! The readers and writers are the problem, and ensuring consistency results in a performance hit, even if the risk is low (two writers are extremely rare but it still must be handled).&lt;/p&gt;
&lt;p&gt;NoSQL on the other hand doesn’t need ACID because the aggregate &lt;em&gt;is&lt;/em&gt; the transaction boundary. Even before NoSQL itself existed! Any update is atomic by nature. When updating many documents it &lt;em&gt;is&lt;/em&gt; a problem, but this is very rare.&lt;/p&gt;
&lt;p&gt;We have to distinguish between logical and replication consistency. During an update and if a conflict occurs, it must be resolved to preserve the logical consistency. Replication consistency on the other hand is preserveed when distributing the data across many machines, for example during sharding or copies.&lt;/p&gt;
&lt;p&gt;Replication buys us more processing power and resillence (at the cost of more storage) in case some of the nodes die. But what happens if what dies is the communication across the nodes? We could drop the requests and preserve the consistency, or accept the risk to continue and instead preserve the availability.&lt;/p&gt;
&lt;p&gt;The choice on whether trading consistency for availability is acceptable or not depends on the domain rules. It is the domain’s choice, the business people will choose. If you’re Amazon, you always want to be able to sell, but if you’re a bank, you probably don’t want your clients to have negative numbers in their account!&lt;/p&gt;
&lt;p&gt;Regardless of what we do, in a distributed system, the CAP theorem always applies: Consistecy, Availability, Partitioning-tolerancy (error tolerancy). It is &lt;strong&gt;impossible&lt;/strong&gt; to guarantee all 3 at 100%. Most of the times, it does work, but it is mathematically impossible to guarantee at 100%.&lt;/p&gt;
&lt;p&gt;A database has to choose what to give up at some point. When designing a distributed system, this must be considered. Normally, the choice is made between consistency or response time.&lt;/p&gt;
&lt;h2 class=&quot;title&quot; id=&quot;further_reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further_reading&quot;&gt;¶&lt;/a&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.martinfowler.com/articles/nosql-intro-original.pdf&quot;&gt;The future is: &lt;del&gt;NoSQL Databases&lt;/del&gt; Polyglot Persistence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/nosql-databases-overview&quot;&gt;NoSQL Databases: An Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry><entry><title>Big Data</title><id>dist/big-data/index.html</id><updated>2020-03-17T23:00:00+00:00</updated><published>2020-02-24T23:00:00+00:00</published><summary>Big Data sounds like a buzzword you may be hearing everywhere, but it’s actually here to stay!</summary><content type="html" src="dist/big-data/index.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
&lt;title&gt;Big Data&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;../css/style.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;main&gt;
&lt;p&gt;Big Data sounds like a buzzword you may be hearing everywhere, but it’s actually here to stay!&lt;/p&gt;
&lt;div class=&quot;date-created-modified&quot;&gt;Created 2020-02-25&lt;br&gt;
Modified 2020-03-18&lt;/div&gt;
&lt;h2 class=&quot;title&quot; id=&quot;what_is_big_data_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_is_big_data_&quot;&gt;¶&lt;/a&gt;What is Big Data?&lt;/h2&gt;
&lt;p&gt;And why is it so important? We use this term to refer to the large amount of data available, rapidly growing every day, that cannot be processed in conventional ways. It’s not only about the amount, it’s also about the variety and rate of growth.&lt;/p&gt;
&lt;p&gt;Thanks to technological advancements, there are new ways to process this insane amount of data, which would otherwise be too costly for processing in traditional database systems.&lt;/p&gt;
&lt;h2 id=&quot;where_does_data_come_from_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where_does_data_come_from_&quot;&gt;¶&lt;/a&gt;Where does data come from?&lt;/h2&gt;
&lt;p&gt;It can be pictures in your phone, industry transactions, messages in social networks, a sensor in the mountains. It can come from anywhere, which makes the data very varied.&lt;/p&gt;
&lt;p&gt;Just to give some numbers, over 12TB of data is generated on Twitter &lt;em&gt;daily&lt;/em&gt;. If you purchase a laptop today (as of March 2020), the disk will be roughly 1TB, maybe 2TB. Twitter would fill 6 of those drives every day!&lt;/p&gt;
&lt;p&gt;What about Facebook? It is estimated they store around 100PB of photos and videos. That would be 50000 laptop disks. Not a small number. And let’s not talk about worldwide network traffic…&lt;/p&gt;
&lt;h2 id=&quot;what_data_can_be_exploited_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_data_can_be_exploited_&quot;&gt;¶&lt;/a&gt;What data can be exploited?&lt;/h2&gt;
&lt;p&gt;So, we have a lot of data. Should we attempt and process everything? We can distinguish several categories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web and Social Media&lt;/strong&gt;: Clickstream Data, Twitter Feeds, Facebook Postings, Web content… Stuff coming from social networks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Biometrics&lt;/strong&gt;: Facial Recognion, Genetics… Any kind of personal recognition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine-to-Machine&lt;/strong&gt;: Utility Smart Meter Readings, RFID Readings, Oil Rig Sensor Readings, GPS Signals… Any sensor shared with other machines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Human Generated&lt;/strong&gt;: Call Center Voice Recordings, Email, Electronic Medical Records… Even the voice notes one sends over WhatsApp count.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Big Transaction Data&lt;/strong&gt;: Healthcare Claims, Telecommunications Call Detail Records, Utility Billing Records… Financial transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But asking what to process is asking the wrong question. Instead, one should think about «What problem am I trying to solve?».&lt;/p&gt;
&lt;h2 id=&quot;how_to_exploit_this_data_&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how_to_exploit_this_data_&quot;&gt;¶&lt;/a&gt;How to exploit this data?&lt;/h2&gt;
&lt;p&gt;What are some of the ways to deal with this data? If the problem fits the Map-Reduce paradigm then Hadoop is a great option! Hadoop is inspired by Google File System (GFS), and achieves great parallelism across the nodes of a cluster, and has the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hadoop Distributed File System&lt;/strong&gt;. Data is divided into smaller «blocks» and distributed across the cluster, which makes it possible to execute the mapping and reduction in smaller subsets, and makes it possible to scale horizontally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hadoop MapReduce&lt;/strong&gt;. First, a data set is «mapped» into a different set, and data becomes a list of tuples (key, value). The «reduce» step works on these tuples and combines them into a smaller subset.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hadoop Common&lt;/strong&gt;. These are a set of libraries that ease working with Hadoop.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;key_insights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#key_insights&quot;&gt;¶&lt;/a&gt;Key insights&lt;/h2&gt;
&lt;p&gt;Big Data is a field whose goal is to extract information from very large sets of data, and find ways to do so. To summarize its different dimensions, we can refer to what’s known as «the Four V’s of Big Data»:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Volume&lt;/strong&gt;. Really large quantities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Velocity&lt;/strong&gt;. Processing response time matters!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variety&lt;/strong&gt;. Data comes from plenty of sources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Veracity.&lt;/strong&gt; Can we trust all sources, though?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some sources talk about a fifth V for &lt;strong&gt;Value&lt;/strong&gt;; because processing this data is costly, it is important we can get value out of it.&lt;/p&gt;
&lt;p&gt;…And some other sources go as high as seven V’s, including &lt;strong&gt;Viability&lt;/strong&gt; and &lt;strong&gt;Visualization&lt;/strong&gt;. Computers can’t take decissions on their own (yet), a human has to. And they can only do so if they’re presented the data (and visualize it) in a meaningful way.&lt;/p&gt;
&lt;h2 id=&quot;infographics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#infographics&quot;&gt;¶&lt;/a&gt;Infographics&lt;/h2&gt;
&lt;p&gt;Let’s see some pictures, we all love pictures:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;4-Vs-of-big-data.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;common_patterns&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#common_patterns&quot;&gt;¶&lt;/a&gt;Common patterns&lt;/h2&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;¶&lt;/a&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;¿Qué es Big Data? – &lt;a href=&quot;https://www.ibm.com/developerworks/ssa/local/im/que-es-big-data/&quot;&gt;https://www.ibm.com/developerworks/ssa/local/im/que-es-big-data/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Four V’s of Big Data – &lt;a href=&quot;https://www.ibmbigdatahub.com/infographic/four-vs-big-data&quot;&gt;https://www.ibmbigdatahub.com/infographic/four-vs-big-data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Big data – &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_data&quot;&gt;https://en.wikipedia.org/wiki/Big_data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Las 5 V’s del Big Data – &lt;a href=&quot;https://www.quanticsolutions.es/big-data/las-5-vs-del-big-data&quot;&gt;https://www.quanticsolutions.es/big-data/las-5-vs-del-big-data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Las 7 V del Big data: Características más importantes – &lt;a href=&quot;https://www.iic.uam.es/innovacion/big-data-caracteristicas-mas-importantes-7-v/#viabilidad&quot;&gt;https://www.iic.uam.es/innovacion/big-data-caracteristicas-mas-importantes-7-v/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt;
 </content></entry></feed>